{"remainingRequest":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoCargoHauled.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoCargoHauled.vue","mtime":1571770663139},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from \"vuex\";\nimport { validateField, validateForm, minLength } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport axios from \"axios\";\nimport { setTimeout } from 'timers';\n\nexport default {\n  name: \"AccountInfoCargoHauled\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin,\n    \n  },\n  data() {\n    return {\n      final_uuid:\"\",\n      showmodel: false,\n      save: true,\n      userData:\"\",\n      uuid:\"\",\n      cargoGroup: [],\n      formData: {\n        haulType: {}\n      },\n      rules: {\n        haulType: [val => minLength(val, 1, \"Please select Cargo Type\")]\n      },\n      formErrors: {},\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    ...mapState(\"cargo\", [\"cargoGroups\"]),\n    selectedCargoGroups() {\n      return this.cargoGroups.filter(\n        group => this.cargoGroup.indexOf(group.value) > -1\n      );\n      \n    },\n    cargoHauledMap() {\n      let map = {};\n\n      for (let cargoGroupValue in this.formData.haulType) {\n        map[cargoGroupValue] = {};\n\n        let haulTypes = this.formData.haulType[cargoGroupValue];\n        haulTypes.forEach(haulType => {\n          map[cargoGroupValue][haulType] = true;\n        });\n      }\n\n      return map;\n    },\n    ...mapState([\"data\"])\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n        axios\n      .get(\n        \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n          localStorage.getItem(\"userId\")\n      )\n      .then(coins => {\n        this.userData = coins.data.uuid;\n      });\n      setTimeout(()=>{\n            this.$store.dispatch(\"loadData\", this.userData).then(() => {\n      let len = this.$store.state.getData.data;\n      for (let j = 0; j < len.length; j++) {\n        if (this.$store.state.getData.data[j].key == \"cargoHauled\") {\n          let a = this.$store.state.getData.data[j];\n          let b = JSON.parse(a.val).haulType;\n    \n        }\n      }\n\n      // let c =[]\n      for (let i = 0; i < this.cargoGroups.length; i++) {\n        for (let j = 0; j < this.cargoGroups[i].cargoHauled.length; j++) {\n          \n        }\n      }\n    });\n      },1000)\n    } else {\n      this.save = true;\n           setTimeout(()=>{\n            this.$store.dispatch(\"loadData\", this.uuid).then(() => {\n      let len = this.$store.state.getData.data;\n      for (let j = 0; j < len.length; j++) {\n        if (this.$store.state.getData.data[j].key == \"cargoHauled\") {\n          let a = this.$store.state.getData.data[j];\n          let b = JSON.parse(a.val).haulType;\n    \n        }\n      }\n\n      // let c =[]\n      for (let i = 0; i < this.cargoGroups.length; i++) {\n        for (let j = 0; j < this.cargoGroups[i].cargoHauled.length; j++) {\n          \n        }\n      }\n    });\n      },1000)\n    }\n  \n  },\n  methods: {\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n  \n        this.show();\n        if (willDelete) {\n          \n          this.$router.push({ name: \"AccountInfoCargoHauled\" });\n        } else {\n          \n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      var temp_uuid;\n        if (localStorage.getItem(\"token\")) {\n         temp_uuid = this.userData;\n  \n      } else {\n        temp_uuid = this.uuid;\n  \n      }\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoHauled\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n        \n        \n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n              if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n    \n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    selectHaulType(cargoGroupValue, haulTypeValue) {\n      if (!this.formData.haulType[cargoGroupValue]) {\n        this.$set(this.formData.haulType, cargoGroupValue, []);\n      }\n\n      let haulTypeIndex = this.formData.haulType[cargoGroupValue].indexOf(\n        haulTypeValue\n      );\n\n\n      if (haulTypeIndex > -1) {\n        this.formData.haulType[cargoGroupValue].splice(haulTypeIndex, 1);\n\n        if (!this.formData.haulType[cargoGroupValue].length) {\n          this.$delete(this.formData.haulType, cargoGroupValue);\n        }\n      } else {\n        this.formData.haulType[cargoGroupValue].push(haulTypeValue);\n      }\n\n      this.formErrors = {};\n    },\n    goPrevForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n  \n        if (data.status === \"OK\") {\n          let { cargoGroup: cargoGroupTab, cargoHauled } = data.data.a;\n          let { cargoGroup } = cargoGroupTab;\n          let groupData = data.data.a.cargoGroup;\n          this.cargoGroup = groupData.cargoGroup;\nthis.uuid = data.data.b;\n          if (cargoHauled) {\n            this.formData = {\n              ...this.formData,\n              ...cargoHauled\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: \"Home\" });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if(localStorage.getItem('token')){\n        \n          this.final_uuid = this.userData;\n    \n      }else{\n        this.final_uuid = this.uuid;\n  \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoHauled\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid:  this.final_uuid\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n        axios\n          .post(\n            \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\" +\n             this.final_uuid+\n              \"&user_id=\" +\n              localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n      \n          });\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoCargoHauled.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"AccountInfoCargoHauled.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"cargo-hauled-form container-fluid mob-2\">\n    \n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"mb-4\">\n        <img src=\"https://picsum.photos/g/100/100\" alt style=\"width:50px;\" class=\"d-inline mr-2\">\n        <h4 class=\"card-title d-inline form-sub-title\">Cargo Hauled</h4>\n      </div>\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title mb-3\">Cargo Hauled</h4>\n          <div\n            v-for=\"(item, index) in selectedCargoGroups\"\n            :key=\"index\"\n            class=\"col-12 text-center mb-2 p-1\"\n          >\n            <div class=\"font-weight-bold ft-clr\">{{ item.value }}</div>\n\n            <div class=\"container\">\n              <div class=\"row cargo-group-page\">\n                <div\n                  v-for=\"(subItem, subIndex) in item.cargoHauled\"\n                  :key=\"subIndex\"\n                  class=\"col-3 text-center mb-2 p-1 pointer \"\n                  @click=\"selectHaulType(item.value, subItem.value)\"\n                  :class=\"{\n                      selected:\n                          cargoHauledMap[item.value] &&\n                        cargoHauledMap[item.value][subItem.value]\n                    }\"\n                >\n                <div class=\"haul-type\">\n                  <div class=\"p-1\">\n                    <img :src=\"subItem.img\" alt>\n                  </div>\n\n                  <div\n                    class=\"name\"\n                    :class=\"{\n                      selected:\n                        cargoHauledMap[item.value] &&\n                        cargoHauledMap[item.value][subItem.value]\n                    }\"\n                  >{{ subItem.value }}</div>\n                </div>\n                </div>\n              </div>\n            </div>\n\n            <div v-if=\"formErrors.haulType\" class=\"text-danger\">{{ formErrors.haulType }}</div>\n\n            <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n          </div>\n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default px-4 btn-block btn-border-radius-lb mob-2\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">Cargo Group</div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main btn-block btn-border-radius-rb mob-2\"\n              ><span class=\"load-12\">\n                {{ loading ? 'Loading...' : 'Next' }}</span>\n                <div\n                  class=\"next-title text-center d-inline pl-3 text-white mob-2\"\n                >Vehicles & Trailers</div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n        <span class=\"save-hover\">Save & Continue</span>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"newQuoteReq\" v-else>\n        <span class=\"save-hover\">Save Changes</span>\n      </div>\n      <div v-if=\"showmodel\">\n        <modelLogin/>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport { validateField, validateForm, minLength } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport axios from \"axios\";\nimport { setTimeout } from 'timers';\n\nexport default {\n  name: \"AccountInfoCargoHauled\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin,\n    \n  },\n  data() {\n    return {\n      final_uuid:\"\",\n      showmodel: false,\n      save: true,\n      userData:\"\",\n      uuid:\"\",\n      cargoGroup: [],\n      formData: {\n        haulType: {}\n      },\n      rules: {\n        haulType: [val => minLength(val, 1, \"Please select Cargo Type\")]\n      },\n      formErrors: {},\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    ...mapState(\"cargo\", [\"cargoGroups\"]),\n    selectedCargoGroups() {\n      return this.cargoGroups.filter(\n        group => this.cargoGroup.indexOf(group.value) > -1\n      );\n      \n    },\n    cargoHauledMap() {\n      let map = {};\n\n      for (let cargoGroupValue in this.formData.haulType) {\n        map[cargoGroupValue] = {};\n\n        let haulTypes = this.formData.haulType[cargoGroupValue];\n        haulTypes.forEach(haulType => {\n          map[cargoGroupValue][haulType] = true;\n        });\n      }\n\n      return map;\n    },\n    ...mapState([\"data\"])\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n        axios\n      .get(\n        \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n          localStorage.getItem(\"userId\")\n      )\n      .then(coins => {\n        this.userData = coins.data.uuid;\n      });\n      setTimeout(()=>{\n            this.$store.dispatch(\"loadData\", this.userData).then(() => {\n      let len = this.$store.state.getData.data;\n      for (let j = 0; j < len.length; j++) {\n        if (this.$store.state.getData.data[j].key == \"cargoHauled\") {\n          let a = this.$store.state.getData.data[j];\n          let b = JSON.parse(a.val).haulType;\n    \n        }\n      }\n\n      // let c =[]\n      for (let i = 0; i < this.cargoGroups.length; i++) {\n        for (let j = 0; j < this.cargoGroups[i].cargoHauled.length; j++) {\n          \n        }\n      }\n    });\n      },1000)\n    } else {\n      this.save = true;\n           setTimeout(()=>{\n            this.$store.dispatch(\"loadData\", this.uuid).then(() => {\n      let len = this.$store.state.getData.data;\n      for (let j = 0; j < len.length; j++) {\n        if (this.$store.state.getData.data[j].key == \"cargoHauled\") {\n          let a = this.$store.state.getData.data[j];\n          let b = JSON.parse(a.val).haulType;\n    \n        }\n      }\n\n      // let c =[]\n      for (let i = 0; i < this.cargoGroups.length; i++) {\n        for (let j = 0; j < this.cargoGroups[i].cargoHauled.length; j++) {\n          \n        }\n      }\n    });\n      },1000)\n    }\n  \n  },\n  methods: {\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n  \n        this.show();\n        if (willDelete) {\n          \n          this.$router.push({ name: \"AccountInfoCargoHauled\" });\n        } else {\n          \n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      var temp_uuid;\n        if (localStorage.getItem(\"token\")) {\n         temp_uuid = this.userData;\n  \n      } else {\n        temp_uuid = this.uuid;\n  \n      }\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoHauled\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n        \n        \n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n              if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n    \n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    selectHaulType(cargoGroupValue, haulTypeValue) {\n      if (!this.formData.haulType[cargoGroupValue]) {\n        this.$set(this.formData.haulType, cargoGroupValue, []);\n      }\n\n      let haulTypeIndex = this.formData.haulType[cargoGroupValue].indexOf(\n        haulTypeValue\n      );\n\n\n      if (haulTypeIndex > -1) {\n        this.formData.haulType[cargoGroupValue].splice(haulTypeIndex, 1);\n\n        if (!this.formData.haulType[cargoGroupValue].length) {\n          this.$delete(this.formData.haulType, cargoGroupValue);\n        }\n      } else {\n        this.formData.haulType[cargoGroupValue].push(haulTypeValue);\n      }\n\n      this.formErrors = {};\n    },\n    goPrevForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n  \n        if (data.status === \"OK\") {\n          let { cargoGroup: cargoGroupTab, cargoHauled } = data.data.a;\n          let { cargoGroup } = cargoGroupTab;\n          let groupData = data.data.a.cargoGroup;\n          this.cargoGroup = groupData.cargoGroup;\nthis.uuid = data.data.b;\n          if (cargoHauled) {\n            this.formData = {\n              ...this.formData,\n              ...cargoHauled\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: \"Home\" });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if(localStorage.getItem('token')){\n        \n          this.final_uuid = this.userData;\n    \n      }else{\n        this.final_uuid = this.uuid;\n  \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoHauled\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid:  this.final_uuid\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n        axios\n          .post(\n            \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\" +\n             this.final_uuid+\n              \"&user_id=\" +\n              localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n      \n          });\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.ft-clr {\n  padding: 10px;\n  color: #5e98f9;\n  border: #5e98f9 solid 1px;\n  border-radius: 10px;\n}\n.cargo-hauled-form {\n  .haul-type {\n    .name {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      border-radius: 5px;\n      min-height: 50px;\n      font-size: 12px;\n      word-break: break-word;\n\n      &.selected {\n        color: #5e98f9;\n      }\n    }\n  }\n}\n@media screen and (max-width: 639px) {\n  .cargo-group-page .col-3 {\n    flex: 0 0 33.333%;\n    max-width: 33.333%;\n  }\n}\n\n@media screen and (max-width: 479px) {\n  .cargo-group-page .col-3 {\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n}\n\n</style>"]}]}