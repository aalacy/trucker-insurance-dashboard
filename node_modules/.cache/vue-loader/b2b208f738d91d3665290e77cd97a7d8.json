{"remainingRequest":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoBusinessStructure.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoBusinessStructure.vue","mtime":1571770663139},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ModalLogin from \"./ModalLogin.vue\";\nimport {\n  validateField,\n  validateForm,\n  required,\n  minLength\n} from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport { mapState } from \"vuex\";\nimport { constants } from \"fs\";\nimport axios from \"axios\";\nimport { setTimeout } from \"timers\";\n\nexport default {\n  name: \"AccountInfoBusinessStructure\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    \n    modelLogin: ModalLogin\n  },\n  data() {\n    return {\n      final_uuid: \"\",\n      uuid: \"\",\n      showmodel: false,\n      save: true,\n      userData: \"\",\n      formData: {\n        businessStructure: \"\",\n        // businessClassification: '',\n        MC: \"\",\n        businessType: \"\"\n      },\n      rules: {\n        businessStructure: [required],\n        // businessClassification: [required],\n        businessType: [required]\n      },\n      formErrors: {},\n      hints: {\n        businessStructure: \"Please select Business Structure from below List\",\n        businessType:\n          \"It’s very important to make the correct selection here. Before purchasing a policy, confirm that business type is accurate\",\n        // businessClassification:\"Please add Business Classfication here\",\n        MC: \"Please add MC number\"\n      },\n      businessStructures: [\n        \"Sole Proprietorship\",\n        \"Partnership\",\n        \"Corporation\",\n        \"Limited Liability Company\"\n      ],\n\n      // businessClassifications: [\n      //  'Private(Proerty)'\n\n      //   // { name: 'Private (Property)', value: 'Private(Property)' }\n      //   // 'Private (Property)',\n      // ],\n      businessTypes: [\n        \"Trucker - General Freight\",\n        \"Dirt, Sand & Gravel (DSG) Hauler\",\n        \"Excavating, Landscaping or Building Contractor\",\n        \"Trucker - Refrigerated Goods\",\n        \"For-Hire Trucking – Additional Specialty Classes\",\n        \"Agricultural Hauling\",\n        \"Livestock Hauling\",\n        \"Farmer\",\n        \"Auto Hauler\",\n        \"Towing\",\n        \"Courier\",\n        \"Expediter\",\n        \"For-Hire Livery – Taxi, Black Car, Limousine, Sightseeing/Guided Tours\",\n        \"Not-For-Hire Livery – Social Services, Courtesy (Hotel) Shuttle, Religious Organization, Child/Adult Daycare\"\n      ],\n      loading: false,\n      error: null\n    };\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios\n        .get(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n            localStorage.getItem(\"userId\")\n        )\n        .then(coins => {\n          this.userData = coins.data.uuid;\n\n        });\n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.userData).then(res => {\n          let len = this.$store.state.getData.data;\n          for (let i = 0; i <= len.length; i++) {\n            if (this.$store.state.getData.data[i].key == \"businessStructure\") {\n              let a = this.$store.state.getData.data[i];\n              let b = JSON.parse(a.val);\n              \n              this.formData.businessStructure = b.businessStructure;\n              this.formData.businessType = b.businessType;\n              this.formData.MC = b.MC;\n            }\n          }\n        });\n      }, 1000);\n    } else {\n      this.save = true;\n      \n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.uuid).then(res => {\n          let len = this.$store.state.getData.data;\n          for (let i = 0; i <= len.length; i++) {\n            if (this.$store.state.getData.data[i].key == \"businessStructure\") {\n              let a = this.$store.state.getData.data[i];\n              let b = JSON.parse(a.val);\n              \n              this.formData.businessStructure = b.businessStructure;\n              this.formData.businessType = b.businessType;\n              this.formData.MC = b.MC;\n            }\n          }\n        });\n      }, 1000);\n    }\n  },\n  computed: {\n    ...mapState([\"data\"])\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n\n  methods: {\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n        \n        this.show();\n        if (willDelete) {\n          this.$router.push({ name: \"AccountInfoBusinessStructure\" });\n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n      var temp_uuid;\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n        \n      } else {\n        temp_uuid = this.uuid;\n        \n      }\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"businessStructure\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n            if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { businessStructure } = data.data;\n          this.uuid = data.data.b;\n          if (businessStructure) {\n            this.formData = {\n              ...this.formData,\n              ...businessStructure\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        this.final_uuid = this.userData;\n        \n      } else {\n        this.final_uuid = this.uuid;\n\n      }\n      try {\n\n        let data = await API.post(\"company/save\", {\n          key: \"businessStructure\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n        axios\n          .post(\n            \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\" +\n              this.final_uuid +\n              \"&user_id=\" +\n              localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n            \n          });\n      } catch (err) {\n        \n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoBusinessStructure.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"AccountInfoBusinessStructure.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"business-structure-form container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Business Structure</h4>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.businessStructure\"\n                  :class=\"{ 'has-error': formErrors.businessStructure }\"\n                  class=\"lt-input\"\n                  @blur=\"onBlur\"\n                   @click=\"onFocus('businessStructure')\"\n                  required\n                  @change=\"validateField('businessStructure')\"\n                  \n                  \n                >\n                <!-- @focus=\"onFocus('businessStructure')\" -->\n                <!-- @blur=\"onBlur\" -->\n                  <option value>Business Structure*</option>\n                  <option v-for=\"item in businessStructures\" :key=\"item\" :value=\"item\">{{ item }}</option>\n                </select>\n\n                <div\n                  v-if=\"formErrors.businessStructure\"\n                  class=\"text-danger\"\n                >{{ formErrors.businessStructure }}</div>\n              </div>\n            </div>\n          </div>\n\n          <!-- <div class=\"row\"> -->\n          <!-- <div class=\"col-12\"> -->\n          <!-- <div class=\"form-group\"> -->\n          <!-- <select\n                  v-model=\"formData.businessClassification\"\n                  :class=\"{ 'has-error': formErrors.businessClassification }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessClassification')\"\n                  @focus=\"onFocus('businessClassification')\"\n                  @blur=\"onBlur\"\n                >\n\n                  <option disabled value=\"\">Business Classification*</option>\n                  <option\n                    v-for=\"item in businessClassifications\"\n                    :key=\"item\"\n                    :value=\"item\"\n                  >\n                    {{ item }}\n                  </option>\n          </select>-->\n          <!-- <input\n                  v-model=\"formData.businessClassification\"\n                  :class=\"{ 'has-error': formErrors.businessClassification }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Business Classification# (Optional)\"\n                  @focus=\"onFocus('businessClassification')\"\n                  @blur=\"onBlur\"\n                />\n                <div\n                  v-if=\"formErrors.businessClassification\"\n                  class=\"text-danger\"\n                >\n                  {{ formErrors.businessClassification }}\n                </div>\n              </div>\n            </div>\n          </div>-->\n\n          <div class=\"row\">\n            <div class=\"col-9\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.MC\"\n                  :class=\"{ 'has-error': formErrors.MC }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"MC# (Optional)\"\n                  @focus=\"onFocus('MC')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.MC\" class=\"text-danger\">{{ formErrors.MC }}</div>\n              </div>\n            </div>\n          </div>\n\n          <h4 class=\"card-title form-sub-title\">Business Type</h4>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\" @click=\"onFocus('businessType')\">\n                <select\n                  v-model=\"formData.businessType\"\n                  :class=\"{ 'has-error': formErrors.businessType }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessType')\"\n                  \n                  @blur=\"onBlur\"\n                >\n                <!-- @focus=\"onFocus('businessType')\" -->\n                  <option value>Business Type*</option>\n                  <option v-for=\"item in businessTypes\" :key=\"item\" :value=\"item\">{{ item }}</option>\n                </select>\n\n                <div\n                  v-if=\"formErrors.businessType\"\n                  class=\"text-danger\"\n                >{{ formErrors.businessType }}</div>\n              </div>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default btn-block btn-border-radius-lb\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3\">Business Info</div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main btn-block btn-border-radius-rb\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 text-white\">Cargo Group</div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n    <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n      <span class=\"save-hover\">Save & Continue</span>\n    </div>\n    <div class=\"d-flex justify-content-center m-4\" @click=\"newQuoteReq\" v-else>\n      <span class=\"save-hover\">Save Changes</span>\n    </div>\n    <div class v-if=\"showmodel\">\n      <modelLogin/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ModalLogin from \"./ModalLogin.vue\";\nimport {\n  validateField,\n  validateForm,\n  required,\n  minLength\n} from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport { mapState } from \"vuex\";\nimport { constants } from \"fs\";\nimport axios from \"axios\";\nimport { setTimeout } from \"timers\";\n\nexport default {\n  name: \"AccountInfoBusinessStructure\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    \n    modelLogin: ModalLogin\n  },\n  data() {\n    return {\n      final_uuid: \"\",\n      uuid: \"\",\n      showmodel: false,\n      save: true,\n      userData: \"\",\n      formData: {\n        businessStructure: \"\",\n        // businessClassification: '',\n        MC: \"\",\n        businessType: \"\"\n      },\n      rules: {\n        businessStructure: [required],\n        // businessClassification: [required],\n        businessType: [required]\n      },\n      formErrors: {},\n      hints: {\n        businessStructure: \"Please select Business Structure from below List\",\n        businessType:\n          \"It’s very important to make the correct selection here. Before purchasing a policy, confirm that business type is accurate\",\n        // businessClassification:\"Please add Business Classfication here\",\n        MC: \"Please add MC number\"\n      },\n      businessStructures: [\n        \"Sole Proprietorship\",\n        \"Partnership\",\n        \"Corporation\",\n        \"Limited Liability Company\"\n      ],\n\n      // businessClassifications: [\n      //  'Private(Proerty)'\n\n      //   // { name: 'Private (Property)', value: 'Private(Property)' }\n      //   // 'Private (Property)',\n      // ],\n      businessTypes: [\n        \"Trucker - General Freight\",\n        \"Dirt, Sand & Gravel (DSG) Hauler\",\n        \"Excavating, Landscaping or Building Contractor\",\n        \"Trucker - Refrigerated Goods\",\n        \"For-Hire Trucking – Additional Specialty Classes\",\n        \"Agricultural Hauling\",\n        \"Livestock Hauling\",\n        \"Farmer\",\n        \"Auto Hauler\",\n        \"Towing\",\n        \"Courier\",\n        \"Expediter\",\n        \"For-Hire Livery – Taxi, Black Car, Limousine, Sightseeing/Guided Tours\",\n        \"Not-For-Hire Livery – Social Services, Courtesy (Hotel) Shuttle, Religious Organization, Child/Adult Daycare\"\n      ],\n      loading: false,\n      error: null\n    };\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios\n        .get(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n            localStorage.getItem(\"userId\")\n        )\n        .then(coins => {\n          this.userData = coins.data.uuid;\n\n        });\n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.userData).then(res => {\n          let len = this.$store.state.getData.data;\n          for (let i = 0; i <= len.length; i++) {\n            if (this.$store.state.getData.data[i].key == \"businessStructure\") {\n              let a = this.$store.state.getData.data[i];\n              let b = JSON.parse(a.val);\n              \n              this.formData.businessStructure = b.businessStructure;\n              this.formData.businessType = b.businessType;\n              this.formData.MC = b.MC;\n            }\n          }\n        });\n      }, 1000);\n    } else {\n      this.save = true;\n      \n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.uuid).then(res => {\n          let len = this.$store.state.getData.data;\n          for (let i = 0; i <= len.length; i++) {\n            if (this.$store.state.getData.data[i].key == \"businessStructure\") {\n              let a = this.$store.state.getData.data[i];\n              let b = JSON.parse(a.val);\n              \n              this.formData.businessStructure = b.businessStructure;\n              this.formData.businessType = b.businessType;\n              this.formData.MC = b.MC;\n            }\n          }\n        });\n      }, 1000);\n    }\n  },\n  computed: {\n    ...mapState([\"data\"])\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n\n  methods: {\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n        \n        this.show();\n        if (willDelete) {\n          this.$router.push({ name: \"AccountInfoBusinessStructure\" });\n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n      var temp_uuid;\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n        \n      } else {\n        temp_uuid = this.uuid;\n        \n      }\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"businessStructure\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n            if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { businessStructure } = data.data;\n          this.uuid = data.data.b;\n          if (businessStructure) {\n            this.formData = {\n              ...this.formData,\n              ...businessStructure\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        this.final_uuid = this.userData;\n        \n      } else {\n        this.final_uuid = this.uuid;\n\n      }\n      try {\n\n        let data = await API.post(\"company/save\", {\n          key: \"businessStructure\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n        axios\n          .post(\n            \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\" +\n              this.final_uuid +\n              \"&user_id=\" +\n              localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n            \n          });\n      } catch (err) {\n        \n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style>\nselect{\n  position: relative;\n  -webkit-appearance: none;\n  background: url('../assets/images/arrow-dropdown.png') no-repeat 96% center;\n  -moz-appearance: none;\n}\n</style>\n"]}]}