{"remainingRequest":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoOwners.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoOwners.vue","mtime":1571770663139},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport uuidv4 from \"uuid/v4\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"AccountInfoOwners\",\n  components: {\n    // AccountInfoOwnersItem: () => import(\"./AccountInfoOwnersItem.vue\"),\n    modelLogin: ModalLogin,\n\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      userData:\"\",\n      uuid:\"\",\n      final_uuid:\"\",\n      selected:\"Select Driver\",\n      showmodel: false,\n      save: true,\n      formData: {\n        driverIsOwner: false,\n        driverOwnerIndex: -1,\n        owners: []\n      },\n      drivers: [],\n      driversData: [],\n      loading: false,\n      error: null,\n      selectedDriver: \"\",\n      validations: {\n        driversData: {},\n        oneDriver: {\n          is_valid: true,\n          text: \"\"\n        },\n        website: {\n          is_valid: true,\n          text: \"\"\n        }\n      }\n    };\n  },\n  computed: {\n    noOwners() {\n      return (\n        this.formData.driverOwnerIndex === -1 && !this.formData.owners.length\n      );\n    }\n  },\n  watch: {\n    \"formData.driverIsOwner\"(driverIsOwner) {\n      if (!driverIsOwner) {\n        this.formData.driverOwnerIndex = -1;\n      }\n    },\n    noOwners(noOwners) {\n      this.error = noOwners ? \"Please add at least one owner\" : null;\n    }\n  },\n  mounted() {\n      if (localStorage.getItem(\"token\")) {\n      this.save = false;\n        axios\n        .get(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n            localStorage.getItem(\"userId\")\n        )\n        .then(coins => {\n          this.userData = coins.data.uuid;\n        });\n\n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.userData).then(() => {\n          let len = this.$store.state.getData.data;\n          \n          for (let i = 0; i < len.length; i++) {\n            if (this.$store.state.getData.data[i].key == \"owners\") {\n              let a = this.$store.state.getData.data[i];\n              let b = JSON.parse(a.val);\n              \n              if(b.owners.length>0){\n                this.driversData = b.owners; \n                this.addDriverDataValidation(b.owners.length)\n              }\n            }\n          }\n        }\n      )},1000)\n    } else {\n      this.save = true;\n    }\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    validateFieldCustom(fieldName, index){\n      if (this.driversData[index][fieldName].trim() == '') {\n        this.validations.driversData[index][fieldName].is_valid = false;\n        this.validations.driversData[index][fieldName].text = 'Please enter   ' + fieldName + '!';\n      } else {\n        this.validations.driversData[index][fieldName].is_valid = true;\n      }\n    },\n    sizeOfObject(obj) {\n      var size = 0, key;\n      for (key in obj) {\n          if (obj.hasOwnProperty(key)) size++;\n      }\n      return size;\n    },\n    changeData(){\n      if(!this.driverIsOwner){\n        \n        this.driversData[0].firstName = \"\";\n        this.driversData[0].lastName = \"\";\n        this.driversData[0].dobM = \"\";\n        this.driversData[0].dobD = \"\";\n        this.driversData[0].dobY=\"\";\n        this.driversData[0].address=\"\";\n        this.driversData[0].city=\"\";\n        this.driversData[0].state=\"\";\n        this.driversData[0].zip=\"\"\n      }\n    },\n    addDriverDataValidation(count){\n      let driverDatavalidationsLength = this.sizeOfObject(this.validations.driversData);\n      for (let index = 0; index < count; index++) {\n\n        this.$set(this.validations.driversData, driverDatavalidationsLength + index, {\n          firstName: {\n            is_valid: true,\n            text: \"\"\n          },\n          lastName: {\n            is_valid: true,\n            text: \"\"\n          },\n          dobM: {\n            is_valid: true,\n            text: \"\"\n          },\n          dobD: {\n            is_valid: true,\n            text: \"\"\n          },\n          dobY: {\n            is_valid: true,\n            text: \"\"\n          },\n          address: {\n            is_valid: true,\n            text: \"\"\n          },\n          city: {\n            is_valid: true,\n            text: \"\"\n          },\n          state: {\n            is_valid: true,\n            text: \"\"\n          },\n          zip: {\n            is_valid: true,\n            text: \"\"\n          }\n        });\n      }\n    },\n    addDriverData(data) {\n      \n      if  (data == undefined || data.firstName == undefined) {\n        this.driversData.push({\n          firstName: \"\",\n          lastName: \"\",\n          dobM: \"\",\n          dobD: \"\",\n          dobY: \"\",\n          address: \"\",\n          city: \"\",\n          zip: \"\",\n          state: \"\"\n        });\n        this.addDriverDataValidation(1);\n      } else {\n        this.driversData.push(data);\n      }\n    },\n    removeDriverData( key ){\n      this.driversData.splice( key, 1 );\n      Vue.delete(this.validations.driversData,key)\n      // this.validations.driversData.splice( key, 1 );\n    },\n    validateNewDriverData() {\n      let validNewDriverForm = true;\n      for( var index in this.driversData ) {\n        if (this.driversData.hasOwnProperty( index ) ) {\n          \n          if( this.driversData[index].firstName.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].firstName.is_valid = false;\n            this.validations.driversData[index].firstName.text = 'Please enter firstname!';\n          }else{\n            this.validations.driversData[index].firstName.is_valid = true;\n            this.validations.driversData[index].firstName.text = '';\n          }\n\n          if( this.driversData[index].lastName.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].lastName.is_valid = false;\n            this.validations.driversData[index].lastName.text = 'Please enter lastname!';\n          }else{\n            this.validations.driversData[index].lastName.is_valid = true;\n            this.validations.driversData[index].lastName.text = '';\n          }\n\n          if (this.driversData[index].dobM < 1 || this.driversData[index].dobM > 12)  {\n              validNewDriverForm = false;\n              this.validations.driversData[index].dobM.is_valid = false;\n              this.validations.driversData[index].dobM.text =\n              \"Please enter valid month!\";\n          if( this.driversData[index].dobM.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobM.is_valid = false;\n            this.validations.driversData[index].dobM.text = 'Please enter month!';\n          }}\n          else{\n            this.validations.driversData[index].dobM.is_valid = true;\n            this.validations.driversData[index].dobM.text = '';\n          }\n\n\n\n          if (this.driversData[index].dobD < 1 || this.driversData[index].dobD > 31)  {\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobD.is_valid = false;\n            this.validations.driversData[index].dobD.text =\n              \"Please enter valid date!\";\n          if( this.driversData[index].dobD.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobD.is_valid = false;\n            this.validations.driversData[index].dobD.text = 'Please enter date!';\n          }}else{\n            this.validations.driversData[index].dobD.is_valid = true;\n            this.validations.driversData[index].dobD.text = '';\n          }\n\n          \n          \n          if(this.driversData[index].dobY.length<4){\n              validNewDriverForm = false;\n            this.validations.driversData[index].dobY.is_valid = false;\n            this.validations.driversData[index].dobY.text =\n              \"Please enter valid year!\";\n          if( this.driversData[index].dobY.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobY.is_valid = false;\n            this.validations.driversData[index].dobY.text = 'Please enter year!';\n          }}else{\n            this.validations.driversData[index].dobY.is_valid = true;\n            this.validations.driversData[index].dobY.text = '';\n          }\n\n\n          if( this.driversData[index].address.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].address.is_valid = false;\n            this.validations.driversData[index].address.text = 'Please enter an address!';\n          }else{\n            this.validations.driversData[index].address.is_valid = true;\n            this.validations.driversData[index].address.text = '';\n          }\n\n          if(this.driversData[index].city.trim() == '') {\n            validNewDriverForm = false;\n            this.validations.driversData[index].city.is_valid = false;\n            this.validations.driversData[index].city.text = 'Please enter city!';\n          } else {\n            this.validations.driversData[index].city.is_valid = true;\n            this.validations.driversData[index].city.text = '';\n          }\n\n          if(this.driversData[index].state.trim() == '') {\n            validNewDriverForm = false;\n            this.validations.driversData[index].state.is_valid = false;\n            this.validations.driversData[index].state.text = 'Please enter state!';\n          } else {\n            this.validations.driversData[index].state.is_valid = true;\n            this.validations.driversData[index].state.text = '';\n          }\n\n\n          if(!this.driversData[index].zip.match(/(^\\d{5}$)/)){\n            validNewDriverForm = false;\n            this.validations.driversData[index].zip.is_valid = false;\n            this.validations.driversData[index].zip.text = 'Please enter minimum 5 character!';\n          if(this.driversData[index].zip.trim() == '' ) {\n            validNewDriverForm = false;\n            this.validations.driversData[index].zip.is_valid = false;\n            this.validations.driversData[index].zip.text = 'Please enter zip!';\n          }} else {\n            this.validations.driversData[index].zip.is_valid = true;\n            this.validations.driversData[index].zip.text = '';\n          }\n        }\n      }\n      return validNewDriverForm;\n    },\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n        this.show();\n        \n        if (willDelete) {\n\n          this.$router.push({ name: \"AccountInfoOwners\" });\n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      if (\n        this.formData.driverIsOwner &&\n        this.formData.driverOwnerIndex === -1\n      ) {\n        this.formData.driverIsOwner = false;\n      }\n\n      this.setDataFromForms();\n      var temp_uuid;\n      if (this.noOwners) {\n        return;\n      }\n\n      let allFormAreValid = this.$refs.ownerForm\n        ? this.$refs.ownerForm.every(formRef => formRef.validateForm())\n        : true;\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n        \n      } else {\n        temp_uuid = this.uuid;\n        \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"owners\",\n          \n          val: {\n              owners:this.driversData.map(o => {\n              let owner = { ...o };\n              delete owner._uuid;\n              return owner;\n            })\n          },\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n\n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n            if (this.showmodel) {\n              this.showmodel = false;\n            } else {\n              this.showmodel = true;\n            }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    addForm() {\n      // \n\n      // var dropDown = document.getElementById(\"driverList\");\n      // \n      // dropDown.selectedIndex = 0;\n      // \n      // \n      this.formData.owners.push({ _uuid: uuidv4() });\n      this.error = null;\n    },\n    removeForm(index) {\n      this.formData.owners.splice(index, 1);\n    },\n\n    onChange($event) {\n      \n      \n      // if(this.drivers.drivers[$event.target.value] != undefined){\n      this.driversData[0] = Object.assign({}, this.driversData[0], this.drivers.drivers[$event.target.value]);\n      this.driversData[0].dobD = this.drivers.drivers[$event.target.value].dateOfBirth.split('/')[1];\n      this.driversData[0].dobM = this.drivers.drivers[$event.target.value].dateOfBirth.split('/')[0];\n      this.driversData[0].dobY = this.drivers.drivers[$event.target.value].dateOfBirth.split('/')[2];\n      // }\n      // else{\n      //   \n        \n      // this.formData.driverIsOwner= false;\n      //     this.driversData[0] = \"\";\n          \n      // }\n      \n    },\n    updateHint(hint) {\n      this.$emit(\"update-hint\", hint);\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { drivers, owners: ownersTab } = data.data.a;\n          \n          // \n          this.uuid = data.data.b;\n          if (drivers) {\n            this.drivers = drivers;\n          }\n          if (ownersTab) {\n            \n          let { owners } = ownersTab;\n            \n            \n\n            // this.formData = {\n            //   ...this.formData,\n            //   ...ownersTab,\n            //   owners: ownersTab.map(o => ({ ...o, _uuid: uuidv4() }))\n            // };\n\n            if(data.data.a.owners.owners.length > 0) {\n              this.driversData = data.data.a.owners.owners;\n              \n              this.addDriverDataValidation(data.data.a.owners.owners.length)\n            } else {\n              this.addDriverData();\n            }\n\n          } else {\n            // this.addForm();\n            this.addDriverData();\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n          \n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n        // this.addDriverData();\n\n      }\n    },\n    // setDataFromForms() {\n    //   let owners = [];\n\n    //   if (this.$refs.ownerForm) {\n    //     this.$refs.ownerForm.forEach(formRef => {\n    //       let formData = formRef.getFormData();\n    //       owners.push(formData);\n    //     });\n    //   }\n\n    //   this.formData.owners = owners;\n    // },\n    async updateCompany() {\n      \n      if ( this.formData.driverIsOwner && this.formData.driverOwnerIndex === -1 ) {\n        this.formData.driverIsOwner = false;\n      }\n\n      // this.setDataFromForms();\n\n      // if (this.noOwners) {\n      //   return;\n      // }\n\n      // let allFormAreValid = this.$refs.ownerForm\n      //   ? this.$refs.ownerForm.every(formRef => formRef.validateForm())\n      //   : true;\n\n      let allFormAreValid = this.validateNewDriverData();\n      if (!allFormAreValid) {\n        \n        return;\n      } else {\n        \n      }\n\n      this.loading = true;\n      this.error = null;\n      if(localStorage.getItem('token')){\n\n        this.final_uuid = this.userData;\n        \n      }else{\n        this.final_uuid = this.uuid;\n        \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"owners\",\n          val: {\n             owners:this.driversData.map(o => {\n              let owner = { ...o };\n              delete owner._uuid;\n              return owner;\n            // owners: this.formData.owners.map(o => {\n            //   let owner = { ...o };\n            //   delete owner._uuid;\n            //   return owner;\n            // })\n            // owners: this.driversData.map(o => {\n            //   let owner = { ...o };\n            //   delete owner._uuid;\n            //   return owner;\n            // })\n             })\n          },\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n             axios.post(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\"+this.final_uuid+\"&user_id=\"+localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n            \n          })\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoOwners.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+TA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AccountInfoOwners.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"drivers-form container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card mb-5\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Owner(s)</h4>\n\n          <div class=\"d-flex\">\n            <div class=\"pr-3\">Are one of the drivers the owner?</div>\n\n            <div class=\"flex-grow-1\">\n              <label>\n                <input v-model=\"formData.driverIsOwner\" type=\"checkbox\"  v-on:change=\"changeData()\"> Yes\n              </label>\n            </div>\n          </div>\n\n          <div v-if=\"formData.driverIsOwner\" class=\"col-12 col-md-6\">\n            <select v-model=\"formData.driverOwnerIndex\" @change=\"onChange($event)\" class=\"lt-input\" id=\"driverList\" >\n              <option value=\"\" disabled>Select Driver</option>\n \n              <option\n                v-for=\"(item, index) in drivers.drivers\"\n                :key=\"index\"\n                :value=\"index\"\n              >{{ item.firstName }} {{ item.lastName }}</option>\n            </select>\n          </div>\n\n          <hr>\n\n          <template>\n            <div class=\"owner-form-item container-fluid mob-2\" v-for=\"(singleDriver, index) in driversData\" :key=\"index\">\n              <div class=\"row\">\n                <div class=\"col\">\n                  <h2 class=\"h5\">Owner #{{ index + 1 }}</h2>\n                </div>\n\n                <button\n                  v-show=\"index > 0\"\n                  type=\"button\"\n                  class=\"lt-button mx-2 mb-3\"\n                  @click=\"removeDriverData(index)\"\n                  title=\"Remove Owner\"\n                >\n                  <h3>-</h3>\n                </button>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-6\">\n                  <div class=\"form-group\">\n                      <!-- :class=\"{ 'has-error': formErrors.firstName }\" -->\n                    <input\n                      v-model=\"driversData[index].firstName\"\n                      type=\"text\"\n                      class=\"lt-input\"\n                      placeholder=\"First name\"\n                      :class=\"{ 'has-error': !validations.driversData[index].firstName.is_valid }\"\n                      @change=\"validateFieldCustom('firstName', index)\"\n                    />\n                      <!-- required -->\n                      <!-- @focus=\"onFocus('firstName')\"\n                      @blur=\"onBlur\"\n                      @change=\"validateField('firstName')\" -->\n                    \n                    <div class=\"text-danger\" v-show=\"!validations.driversData[index].firstName.is_valid\">{{ validations.driversData[index].firstName.text }}</div>\n                  </div>\n                </div>\n\n                <div class=\"col-6\">\n                  <div class=\"form-group\">\n                      <!-- :class=\"{ 'has-error': formErrors.lastName }\" -->\n                    <input\n                      v-model=\"driversData[index].lastName\"\n                      type=\"text\"\n                      class=\"lt-input\"\n                      placeholder=\"Last name\"\n                      :class=\"{ 'has-error': !validations.driversData[index].lastName.is_valid }\"\n                      @change=\"validateFieldCustom('lastName', index)\"\n                    />\n                      <!-- required -->\n                      <!-- @focus=\"onFocus('lastName')\"\n                      @blur=\"onBlur\"\n                      @change=\"validateField('lastName')\" -->\n\n                    <div class=\"text-danger\" v-show=\"!validations.driversData[index].lastName.is_valid\">{{ validations.driversData[index].lastName.text }}</div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\" id=\"text-date\">\n                <div class=\"col-12 col-md-6 pt-2\">\n                  <div>Date of Birth</div>\n\n                  <!-- <div\n                    v-if=\"formErrors.dateOfBirth\"\n                    class=\"text-danger\"\n                  >{{ formErrors.dateOfBirth }}</div> -->\n                </div>\n\n                <div class=\"col-12 col-md-6\">\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                          <!-- :class=\"{ 'has-error': formErrors.dobM }\" -->\n                        <input\n                          v-model=\"driversData[index].dobM\"\n                          type=\"number\"\n                          class=\"lt-input\"\n                          :class=\"{ 'has-error': !validations.driversData[index].dobM.is_valid }\"\n                          @change=\"validateFieldCustom('Month', index)\"\n                          placeholder=\"MM\"\n                        />\n                          <!-- required -->\n                          <!-- @focus=\"onFocus('dobM')\"\n                          @blur=\"onBlur\"\n                          @change=\"validateField('dobM')\" -->\n\n                        <div class=\"text-danger\" v-show=\"!validations.driversData[index].dobM.is_valid\">{{ validations.driversData[index].dobM.text }}</div>\n                      </div>\n                    </div>\n                    <span class=\"mt-1\">/</span>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                          <!-- :class=\"{ 'has-error': formErrors.dobD }\" -->\n                        <input\n                          v-model=\"driversData[index].dobD\"\n                          type=\"number\"\n                          class=\"lt-input\"\n                          :class=\"{ 'has-error': !validations.driversData[index].dobD.is_valid }\"\n                          @change=\"validateFieldCustom('Day', index)\"\n                          placeholder=\"DD\"\n                        />\n                          <!-- required -->\n                          <!-- @focus=\"onFocus('dobD')\"\n                          @blur=\"onBlur\"\n                          @change=\"validateField('dobD')\" -->\n\n                        <div class=\"text-danger\" v-show=\"!validations.driversData[index].dobD.is_valid\">{{ validations.driversData[index].dobD.text }}</div>\n                      </div>\n                    </div>\n                    <span class=\"mt-1\">/</span>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                          <!-- :class=\"{ 'has-error': formErrors.dobY }\" -->\n                        <input\n                          v-model=\"driversData[index].dobY\"\n                          type=\"number\"\n                          class=\"lt-input\"\n                          placeholder=\"YYYY\"\n                          :class=\"{ 'has-error': !validations.driversData[index].dobY.is_valid }\"\n                          @change=\"validateFieldCustom('Year', index)\"\n                        />\n                          <!-- required -->\n                          <!-- @focus=\"onFocus('dobY')\"\n                          @blur=\"onBlur\"\n                          @change=\"validateField('dobY')\" -->\n\n                        <div class=\"text-danger\" v-show=\"!validations.driversData[index].dobY.is_valid\">{{ validations.driversData[index].dobY.text }}</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-6\">\n                  <div class=\"form-group\">\n                      <!-- :class=\"{ 'has-error': formErrors.address }\" -->\n                    <input\n                      v-model=\"driversData[index].address\"\n                      type=\"text\"\n                      class=\"lt-input\"\n                      placeholder=\"Address\"\n                      :class=\"{ 'has-error': !validations.driversData[index].address.is_valid }\"\n                      @change=\"validateFieldCustom('address', index)\"\n                    >\n                      <!-- required -->\n                      <!-- @focus=\"onFocus('address')\"\n                      @blur=\"onBlur\"\n                      @change=\"validateField('address')\" -->\n\n                    <div class=\"text-danger\" v-show=\"!validations.driversData[index].address.is_valid\">{{ validations.driversData[index].address.text }}</div>\n                  </div>\n                </div>\n                <div class=\"col-6\">\n                  <div class=\"form-group\">\n                      <!-- :class=\"{ 'has-error': formErrors.city }\" -->\n                    <input\n                      v-model=\"driversData[index].city\"\n                      type=\"text\"\n                      class=\"lt-input\"\n                      placeholder=\"City\"\n                      :class=\"{ 'has-error': !validations.driversData[index].city.is_valid }\"\n                      @change=\"validateFieldCustom('city', index)\"\n                    >\n                      <!-- required -->\n                      <!-- @focus=\"onFocus('city')\"\n                      @blur=\"onBlur\"\n                      @change=\"validateField('city')\" -->\n\n                    <div class=\"text-danger\" v-show=\"!validations.driversData[index].city.is_valid\">{{ validations.driversData[index].city.text }}</div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-6\">\n                  <div class=\"form-group\">\n                      <!-- :class=\"{ 'has-error': formErrors.state }\" -->\n                    <input\n                      v-model=\"driversData[index].state\"\n                      type=\"text\"\n                      class=\"lt-input\"\n                      placeholder=\"State\"\n                      :class=\"{ 'has-error': !validations.driversData[index].state.is_valid }\"\n                      @change=\"validateFieldCustom('state', index)\"\n                    >\n                      <!-- required -->\n                      <!-- @focus=\"onFocus('state')\"\n                      @blur=\"onBlur\"\n                      @change=\"validateField('state')\" -->\n\n                    <div class=\"text-danger\" v-show=\"!validations.driversData[index].state.is_valid\">{{ validations.driversData[index].state.text }}</div>\n                  </div>\n                </div>\n                <div class=\"col-6\">\n                  <div class=\"form-group\">\n                      <!-- :class=\"{ 'has-error': formErrors.zip }\" -->\n                    <input\n                      v-model=\"driversData[index].zip\"\n                      type=\"text\"\n                      class=\"lt-input\"\n                      minlength=\"5\"\n                      placeholder=\"Zip\"\n                      :class=\"{ 'has-error': !validations.driversData[index].zip.is_valid }\"\n                       @change=\"validateFieldCustom('zip', index)\"\n                    >\n                      <!-- required -->\n                      <!-- @focus=\"onFocus('zip')\"\n                      @blur=\"onBlur\"\n                      @change=\"validateField('zip')\" -->\n\n                    <div class=\"text-danger\" v-show=\"!validations.driversData[index].zip.is_valid\">{{ validations.driversData[index].zip.text }}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </template>\n          <!-- <account-info-owners-item\n            v-for=\"(item, index) in formData.owners\"\n            ref=\"ownerForm\"\n            :key=\"item._uuid\"\n            :index=\"index\"\n            :owner=\"item\"\n            :drivers=\"drivers\"\n            :selectedDriver=\"selectedDriver\"\n            :id=\"formData.driverIsOwner\"\n            class=\"mb-5\"\n            @update-hint=\"updateHint\"\n            @remove-form=\"removeForm\"\n          />-->\n\n          <hr>\n\n          <div class=\"row align-items-center mb-3\">\n            <div class=\"col font-weight-bold\">Add another owner</div>\n\n            <div class=\"col-auto text-right\">\n              <button type=\"button\" class=\"lt-button px-3\" @click=\"addDriverData\" title=\"Add Owner\">+</button>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n        </div>\n\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default px-4 btn-block btn-border-radius-lb mob-2\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">Drivers</div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main px-4 btn-block btn-border-radius-rb mob-2\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div\n                  class=\"next-title text-center d-inline pl-3 text-white mob-2\"\n                >Additional Comments</div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n        <span class=\"save-hover\">Save & Continue</span>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"newQuoteReq\" v-else>\n        <span class=\"save-hover\">Save Changes</span>\n      </div>\n      <div v-if=\"showmodel\">\n        <modelLogin/>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport uuidv4 from \"uuid/v4\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"AccountInfoOwners\",\n  components: {\n    // AccountInfoOwnersItem: () => import(\"./AccountInfoOwnersItem.vue\"),\n    modelLogin: ModalLogin,\n\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      userData:\"\",\n      uuid:\"\",\n      final_uuid:\"\",\n      selected:\"Select Driver\",\n      showmodel: false,\n      save: true,\n      formData: {\n        driverIsOwner: false,\n        driverOwnerIndex: -1,\n        owners: []\n      },\n      drivers: [],\n      driversData: [],\n      loading: false,\n      error: null,\n      selectedDriver: \"\",\n      validations: {\n        driversData: {},\n        oneDriver: {\n          is_valid: true,\n          text: \"\"\n        },\n        website: {\n          is_valid: true,\n          text: \"\"\n        }\n      }\n    };\n  },\n  computed: {\n    noOwners() {\n      return (\n        this.formData.driverOwnerIndex === -1 && !this.formData.owners.length\n      );\n    }\n  },\n  watch: {\n    \"formData.driverIsOwner\"(driverIsOwner) {\n      if (!driverIsOwner) {\n        this.formData.driverOwnerIndex = -1;\n      }\n    },\n    noOwners(noOwners) {\n      this.error = noOwners ? \"Please add at least one owner\" : null;\n    }\n  },\n  mounted() {\n      if (localStorage.getItem(\"token\")) {\n      this.save = false;\n        axios\n        .get(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n            localStorage.getItem(\"userId\")\n        )\n        .then(coins => {\n          this.userData = coins.data.uuid;\n        });\n\n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.userData).then(() => {\n          let len = this.$store.state.getData.data;\n          \n          for (let i = 0; i < len.length; i++) {\n            if (this.$store.state.getData.data[i].key == \"owners\") {\n              let a = this.$store.state.getData.data[i];\n              let b = JSON.parse(a.val);\n              \n              if(b.owners.length>0){\n                this.driversData = b.owners; \n                this.addDriverDataValidation(b.owners.length)\n              }\n            }\n          }\n        }\n      )},1000)\n    } else {\n      this.save = true;\n    }\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    validateFieldCustom(fieldName, index){\n      if (this.driversData[index][fieldName].trim() == '') {\n        this.validations.driversData[index][fieldName].is_valid = false;\n        this.validations.driversData[index][fieldName].text = 'Please enter   ' + fieldName + '!';\n      } else {\n        this.validations.driversData[index][fieldName].is_valid = true;\n      }\n    },\n    sizeOfObject(obj) {\n      var size = 0, key;\n      for (key in obj) {\n          if (obj.hasOwnProperty(key)) size++;\n      }\n      return size;\n    },\n    changeData(){\n      if(!this.driverIsOwner){\n        \n        this.driversData[0].firstName = \"\";\n        this.driversData[0].lastName = \"\";\n        this.driversData[0].dobM = \"\";\n        this.driversData[0].dobD = \"\";\n        this.driversData[0].dobY=\"\";\n        this.driversData[0].address=\"\";\n        this.driversData[0].city=\"\";\n        this.driversData[0].state=\"\";\n        this.driversData[0].zip=\"\"\n      }\n    },\n    addDriverDataValidation(count){\n      let driverDatavalidationsLength = this.sizeOfObject(this.validations.driversData);\n      for (let index = 0; index < count; index++) {\n\n        this.$set(this.validations.driversData, driverDatavalidationsLength + index, {\n          firstName: {\n            is_valid: true,\n            text: \"\"\n          },\n          lastName: {\n            is_valid: true,\n            text: \"\"\n          },\n          dobM: {\n            is_valid: true,\n            text: \"\"\n          },\n          dobD: {\n            is_valid: true,\n            text: \"\"\n          },\n          dobY: {\n            is_valid: true,\n            text: \"\"\n          },\n          address: {\n            is_valid: true,\n            text: \"\"\n          },\n          city: {\n            is_valid: true,\n            text: \"\"\n          },\n          state: {\n            is_valid: true,\n            text: \"\"\n          },\n          zip: {\n            is_valid: true,\n            text: \"\"\n          }\n        });\n      }\n    },\n    addDriverData(data) {\n      \n      if  (data == undefined || data.firstName == undefined) {\n        this.driversData.push({\n          firstName: \"\",\n          lastName: \"\",\n          dobM: \"\",\n          dobD: \"\",\n          dobY: \"\",\n          address: \"\",\n          city: \"\",\n          zip: \"\",\n          state: \"\"\n        });\n        this.addDriverDataValidation(1);\n      } else {\n        this.driversData.push(data);\n      }\n    },\n    removeDriverData( key ){\n      this.driversData.splice( key, 1 );\n      Vue.delete(this.validations.driversData,key)\n      // this.validations.driversData.splice( key, 1 );\n    },\n    validateNewDriverData() {\n      let validNewDriverForm = true;\n      for( var index in this.driversData ) {\n        if (this.driversData.hasOwnProperty( index ) ) {\n          \n          if( this.driversData[index].firstName.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].firstName.is_valid = false;\n            this.validations.driversData[index].firstName.text = 'Please enter firstname!';\n          }else{\n            this.validations.driversData[index].firstName.is_valid = true;\n            this.validations.driversData[index].firstName.text = '';\n          }\n\n          if( this.driversData[index].lastName.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].lastName.is_valid = false;\n            this.validations.driversData[index].lastName.text = 'Please enter lastname!';\n          }else{\n            this.validations.driversData[index].lastName.is_valid = true;\n            this.validations.driversData[index].lastName.text = '';\n          }\n\n          if (this.driversData[index].dobM < 1 || this.driversData[index].dobM > 12)  {\n              validNewDriverForm = false;\n              this.validations.driversData[index].dobM.is_valid = false;\n              this.validations.driversData[index].dobM.text =\n              \"Please enter valid month!\";\n          if( this.driversData[index].dobM.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobM.is_valid = false;\n            this.validations.driversData[index].dobM.text = 'Please enter month!';\n          }}\n          else{\n            this.validations.driversData[index].dobM.is_valid = true;\n            this.validations.driversData[index].dobM.text = '';\n          }\n\n\n\n          if (this.driversData[index].dobD < 1 || this.driversData[index].dobD > 31)  {\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobD.is_valid = false;\n            this.validations.driversData[index].dobD.text =\n              \"Please enter valid date!\";\n          if( this.driversData[index].dobD.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobD.is_valid = false;\n            this.validations.driversData[index].dobD.text = 'Please enter date!';\n          }}else{\n            this.validations.driversData[index].dobD.is_valid = true;\n            this.validations.driversData[index].dobD.text = '';\n          }\n\n          \n          \n          if(this.driversData[index].dobY.length<4){\n              validNewDriverForm = false;\n            this.validations.driversData[index].dobY.is_valid = false;\n            this.validations.driversData[index].dobY.text =\n              \"Please enter valid year!\";\n          if( this.driversData[index].dobY.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].dobY.is_valid = false;\n            this.validations.driversData[index].dobY.text = 'Please enter year!';\n          }}else{\n            this.validations.driversData[index].dobY.is_valid = true;\n            this.validations.driversData[index].dobY.text = '';\n          }\n\n\n          if( this.driversData[index].address.trim() == '' ){\n            validNewDriverForm = false;\n            this.validations.driversData[index].address.is_valid = false;\n            this.validations.driversData[index].address.text = 'Please enter an address!';\n          }else{\n            this.validations.driversData[index].address.is_valid = true;\n            this.validations.driversData[index].address.text = '';\n          }\n\n          if(this.driversData[index].city.trim() == '') {\n            validNewDriverForm = false;\n            this.validations.driversData[index].city.is_valid = false;\n            this.validations.driversData[index].city.text = 'Please enter city!';\n          } else {\n            this.validations.driversData[index].city.is_valid = true;\n            this.validations.driversData[index].city.text = '';\n          }\n\n          if(this.driversData[index].state.trim() == '') {\n            validNewDriverForm = false;\n            this.validations.driversData[index].state.is_valid = false;\n            this.validations.driversData[index].state.text = 'Please enter state!';\n          } else {\n            this.validations.driversData[index].state.is_valid = true;\n            this.validations.driversData[index].state.text = '';\n          }\n\n\n          if(!this.driversData[index].zip.match(/(^\\d{5}$)/)){\n            validNewDriverForm = false;\n            this.validations.driversData[index].zip.is_valid = false;\n            this.validations.driversData[index].zip.text = 'Please enter minimum 5 character!';\n          if(this.driversData[index].zip.trim() == '' ) {\n            validNewDriverForm = false;\n            this.validations.driversData[index].zip.is_valid = false;\n            this.validations.driversData[index].zip.text = 'Please enter zip!';\n          }} else {\n            this.validations.driversData[index].zip.is_valid = true;\n            this.validations.driversData[index].zip.text = '';\n          }\n        }\n      }\n      return validNewDriverForm;\n    },\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n        this.show();\n        \n        if (willDelete) {\n\n          this.$router.push({ name: \"AccountInfoOwners\" });\n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      if (\n        this.formData.driverIsOwner &&\n        this.formData.driverOwnerIndex === -1\n      ) {\n        this.formData.driverIsOwner = false;\n      }\n\n      this.setDataFromForms();\n      var temp_uuid;\n      if (this.noOwners) {\n        return;\n      }\n\n      let allFormAreValid = this.$refs.ownerForm\n        ? this.$refs.ownerForm.every(formRef => formRef.validateForm())\n        : true;\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n        \n      } else {\n        temp_uuid = this.uuid;\n        \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"owners\",\n          \n          val: {\n              owners:this.driversData.map(o => {\n              let owner = { ...o };\n              delete owner._uuid;\n              return owner;\n            })\n          },\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n\n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n            if (this.showmodel) {\n              this.showmodel = false;\n            } else {\n              this.showmodel = true;\n            }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    addForm() {\n      // \n\n      // var dropDown = document.getElementById(\"driverList\");\n      // \n      // dropDown.selectedIndex = 0;\n      // \n      // \n      this.formData.owners.push({ _uuid: uuidv4() });\n      this.error = null;\n    },\n    removeForm(index) {\n      this.formData.owners.splice(index, 1);\n    },\n\n    onChange($event) {\n      \n      \n      // if(this.drivers.drivers[$event.target.value] != undefined){\n      this.driversData[0] = Object.assign({}, this.driversData[0], this.drivers.drivers[$event.target.value]);\n      this.driversData[0].dobD = this.drivers.drivers[$event.target.value].dateOfBirth.split('/')[1];\n      this.driversData[0].dobM = this.drivers.drivers[$event.target.value].dateOfBirth.split('/')[0];\n      this.driversData[0].dobY = this.drivers.drivers[$event.target.value].dateOfBirth.split('/')[2];\n      // }\n      // else{\n      //   \n        \n      // this.formData.driverIsOwner= false;\n      //     this.driversData[0] = \"\";\n          \n      // }\n      \n    },\n    updateHint(hint) {\n      this.$emit(\"update-hint\", hint);\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { drivers, owners: ownersTab } = data.data.a;\n          \n          // \n          this.uuid = data.data.b;\n          if (drivers) {\n            this.drivers = drivers;\n          }\n          if (ownersTab) {\n            \n          let { owners } = ownersTab;\n            \n            \n\n            // this.formData = {\n            //   ...this.formData,\n            //   ...ownersTab,\n            //   owners: ownersTab.map(o => ({ ...o, _uuid: uuidv4() }))\n            // };\n\n            if(data.data.a.owners.owners.length > 0) {\n              this.driversData = data.data.a.owners.owners;\n              \n              this.addDriverDataValidation(data.data.a.owners.owners.length)\n            } else {\n              this.addDriverData();\n            }\n\n          } else {\n            // this.addForm();\n            this.addDriverData();\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n          \n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n        // this.addDriverData();\n\n      }\n    },\n    // setDataFromForms() {\n    //   let owners = [];\n\n    //   if (this.$refs.ownerForm) {\n    //     this.$refs.ownerForm.forEach(formRef => {\n    //       let formData = formRef.getFormData();\n    //       owners.push(formData);\n    //     });\n    //   }\n\n    //   this.formData.owners = owners;\n    // },\n    async updateCompany() {\n      \n      if ( this.formData.driverIsOwner && this.formData.driverOwnerIndex === -1 ) {\n        this.formData.driverIsOwner = false;\n      }\n\n      // this.setDataFromForms();\n\n      // if (this.noOwners) {\n      //   return;\n      // }\n\n      // let allFormAreValid = this.$refs.ownerForm\n      //   ? this.$refs.ownerForm.every(formRef => formRef.validateForm())\n      //   : true;\n\n      let allFormAreValid = this.validateNewDriverData();\n      if (!allFormAreValid) {\n        \n        return;\n      } else {\n        \n      }\n\n      this.loading = true;\n      this.error = null;\n      if(localStorage.getItem('token')){\n\n        this.final_uuid = this.userData;\n        \n      }else{\n        this.final_uuid = this.uuid;\n        \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"owners\",\n          val: {\n             owners:this.driversData.map(o => {\n              let owner = { ...o };\n              delete owner._uuid;\n              return owner;\n            // owners: this.formData.owners.map(o => {\n            //   let owner = { ...o };\n            //   delete owner._uuid;\n            //   return owner;\n            // })\n            // owners: this.driversData.map(o => {\n            //   let owner = { ...o };\n            //   delete owner._uuid;\n            //   return owner;\n            // })\n             })\n          },\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n             axios.post(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\"+this.final_uuid+\"&user_id=\"+localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n            \n          })\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"css\">\nselect{\n  position: relative;\n  -webkit-appearance: none;\n  background: url('../assets/images/arrow-dropdown.png') no-repeat 96% center;\n  -moz-appearance: none;\n}\n</style>\n\n"]}]}