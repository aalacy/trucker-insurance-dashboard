{"remainingRequest":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Downloads/LuckyTruck_UI-master/src/components/AccountInfoSignComplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/src/components/AccountInfoSignComplete.vue","mtime":1561625189392},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validateField, validateForm, required } from '../validators.js';\nexport default {  \n  name: \"AccountInfoSignComplete\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data(){\n      return {\n      formData: {\n        dobM: '',\n        dobD: '',\n        dobY: '',\n       imageIdFront: null,\n        \n      },\n        preview: {\n        imageIdFront: null,\n        },\n     rules: {\n        dobM: [required],\n        dobD: [required],\n        dobY: [required],\n        // sign: [required]\n      },\n      formErrors: {},\n      hints: {},\n      loading: false,\n      error: null\n    };\n  },\n    created() {\n     let dobM = '',\n     imageSign='',\n      dobD = '',\n      dobY = '';\n    // this.$emit(\"update-progress\", this.progress);\n    // if (this.driver.dateOfSign) {\n    //       [dobM, dobD, dobY] = this.driver.dateOfSign.split('/');\n    //     }\n    this.formData = {\n      ...this.formData,\n    //   ...this.driver,\n      dobM,\n      dobD,\n      dobY\n    };\n    },\n    methods: {\n      setImage(event, fieldName) {\n      let { files } = event.target;\n\n      let image = files[0] || null;\n\n      this.formData[fieldName] = image;\n      this.previewFile(image, fieldName);\n\n      // this.validateField(fieldName);\n    },\n    previewFile(file, fieldName) {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.preview[fieldName] = reader.result;\n      };\n\n      if (file) {\n        reader.readAsDataURL(file);\n      } else {\n        this.preview[fieldName] = null;\n      }\n    },\n      clearFiles() {\n        this.$refs['file-input'].reset()\n      },\n       async updateCompany() {},\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    }\n},\ncomputed:{\n    dateOfSign() {\n      let { dobM: m, dobD: d, dobY: y } = this.formData;\n\n      if (m.length < 2) {\n        m = `0${m}`;\n      }\n\n      if (d.length < 2) {\n        d = `0${d}`;\n      }\n\n      return `${m}/${d}/${y}`;\n    },\n\n}\n}\n",{"version":3,"sources":["AccountInfoSignComplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"AccountInfoSignComplete.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card mb-5\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Sign and Complete</h4>\n          <div class=\"row\">\n      <div class=\"col-12 col-md-4 pt-2\">\n        <div>Date of Sign</div>\n\n        <div v-if=\"formErrors.dateOfSign\" class=\"text-danger\">\n          {{ formErrors.dateOfSign }}\n        </div>\n      </div>\n\n      <div class=\"col-12 col-md-8\">\n        <div class=\"row \">\n          <div class=\"col \">\n            <div class=\"form-group\">\n              <input\n                v-model=\"formData.dobM\"\n                :class=\"{ 'has-error': formErrors.dobM }\"\n                type=\"text\"\n                class=\"lt-input\"\n                placeholder=\"MM\"\n                required\n                @focus=\"onFocus('dobM')\"\n                @blur=\"onBlur\"\n                @change=\"validateField('dobM')\"\n              />\n\n              <div v-if=\"formErrors.dobM\" class=\"text-danger\">\n                {{ formErrors.dobM }}\n              </div>\n            </div>\n           </div>\n           <span class=\"mt-1\">/</span> \n          <div class=\"col \">\n            <div class=\"form-group\">\n              <input\n                v-model=\"formData.dobD\"\n                :class=\"{ 'has-error': formErrors.dobD }\"\n                type=\"text\"\n                class=\"lt-input\"\n                placeholder=\"DD\"\n                required\n                @focus=\"onFocus('dobD')\"\n                @blur=\"onBlur\"\n                @change=\"validateField('dobD')\"\n              />\n\n              <div v-if=\"formErrors.dobD\" class=\"text-danger\">\n                {{ formErrors.dobD }}\n              </div>\n            </div>\n         </div>\n          <span class=\"mt-1\">/</span> \n          <div class=\"col\">\n            <div class=\"form-group\">\n              <input\n                v-model=\"formData.dobY\"\n                :class=\"{ 'has-error': formErrors.dobY }\"\n                type=\"text\"\n                class=\"lt-input\"\n                placeholder=\"YYYY\"\n                required\n                @focus=\"onFocus('dobY')\"\n                @blur=\"onBlur\"\n                @change=\"validateField('dobY')\"\n              />\n\n              <div v-if=\"formErrors.dobY\" class=\"text-danger\">\n                {{ formErrors.dobY }}\n              </div>\n            </div>\n          </div>\n          \n              \n        </div>\n     \n       \n      \n    </div>\n      \n            <div class=\"card-body\">\n              <div class=\"form-group \">\n                <label\n                  :class=\"{ 'has-error': formErrors.imageIdFront }\"\n                  for=\"imageIdFront\"\n                  class=\"lt-input d-flex align-items-center pl-5\"\n                >\n                 Signature\n                </label>\n\n                <input\n                  id=\"imageIdFront\"\n                  :class=\"{ 'has-error': formErrors.imageIdFront }\"\n                  type=\"file\"\n                  class=\"lt-input\" \n                  hidden\n                  @change=\"setImage($event, 'imageIdFront')\"\n                />\n\n                <div v-if=\"formErrors.imageIdFront\" class=\"text-danger\">\n                  {{ formErrors.imageIdFront }}\n                </div>\n\n                <div v-if=\"preview.imageIdFront\" class=\"preview\">\n                  <img\n                    :src=\"preview.imageIdFront\"\n                    alt=\"\"\n                    class=\"preview-image mt-3\"\n                  />\n                </div>\n              </div>\n              \n            </div>\n          </div>\n     \n        </div>\n          <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default btn-block btn-border-radius-lb\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">Underwriting Questions</div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0 \">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main btn-block btn-border-radius-rb color-green\"\n                 @click=\"goNextForm\"\n              >\n                {{ loading ? 'Loading...' : 'Complete!' }}\n                <!-- <div class=\"next-title text-center d-inline pl-3 mob-2 text-white\"></div> -->\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n       \n    </form>\n    \n  </div>\n</template>\n\n<script>\nimport { validateField, validateForm, required } from '../validators.js';\nexport default {  \n  name: \"AccountInfoSignComplete\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data(){\n      return {\n      formData: {\n        dobM: '',\n        dobD: '',\n        dobY: '',\n       imageIdFront: null,\n        \n      },\n        preview: {\n        imageIdFront: null,\n        },\n     rules: {\n        dobM: [required],\n        dobD: [required],\n        dobY: [required],\n        // sign: [required]\n      },\n      formErrors: {},\n      hints: {},\n      loading: false,\n      error: null\n    };\n  },\n    created() {\n     let dobM = '',\n     imageSign='',\n      dobD = '',\n      dobY = '';\n    // this.$emit(\"update-progress\", this.progress);\n    // if (this.driver.dateOfSign) {\n    //       [dobM, dobD, dobY] = this.driver.dateOfSign.split('/');\n    //     }\n    this.formData = {\n      ...this.formData,\n    //   ...this.driver,\n      dobM,\n      dobD,\n      dobY\n    };\n    },\n    methods: {\n      setImage(event, fieldName) {\n      let { files } = event.target;\n\n      let image = files[0] || null;\n\n      this.formData[fieldName] = image;\n      this.previewFile(image, fieldName);\n\n      // this.validateField(fieldName);\n    },\n    previewFile(file, fieldName) {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.preview[fieldName] = reader.result;\n      };\n\n      if (file) {\n        reader.readAsDataURL(file);\n      } else {\n        this.preview[fieldName] = null;\n      }\n    },\n      clearFiles() {\n        this.$refs['file-input'].reset()\n      },\n       async updateCompany() {},\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    }\n},\ncomputed:{\n    dateOfSign() {\n      let { dobM: m, dobD: d, dobY: y } = this.formData;\n\n      if (m.length < 2) {\n        m = `0${m}`;\n      }\n\n      if (d.length < 2) {\n        d = `0${d}`;\n      }\n\n      return `${m}/${d}/${y}`;\n    },\n\n}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.image-upload > input {\n  display: none;\n}\n\n  .preview {\n    height: 200px;\n    text-align: center;\n  }\n    .preview-image {\n      max-height: 100%;\n    }\n \n.color-green{\n  background-color: #73c185;\n  border-color: #73c185;\n}\n</style>\n\n"]}]}