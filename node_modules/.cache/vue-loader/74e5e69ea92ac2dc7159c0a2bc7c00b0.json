{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoOwners.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoOwners.vue","mtime":1563371354400},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport uuidv4 from 'uuid/v4';\nimport { API } from '../api.js';\nimport ModalLogin from \"./ModalLogin.vue\"\nexport default {\n  name: 'AccountInfoOwners',\n  components: {\n    AccountInfoOwnersItem: () => import('./AccountInfoOwnersItem.vue'),\n        \"modelLogin\":ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n       showmodel:false,\n      save:true,\n      formData: {\n        driverIsOwner: false,\n        driverOwnerIndex: -1,\n        owners: []\n      },\n      drivers: [],\n      loading: false,\n      error: null,\n      \n    };\n  },\n  computed: {\n    noOwners() {\n      return (\n        this.formData.driverOwnerIndex === -1 && !this.formData.owners.length\n      );\n    }\n  },\n  watch: {\n    'formData.driverIsOwner'(driverIsOwner) {\n      if (!driverIsOwner) {\n        this.formData.driverOwnerIndex = -1;\n      }\n    },\n    noOwners(noOwners) {\n      this.error = noOwners ? 'Please add at least one owner' : null;\n    }\n  },\n mounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n   }else{\n     \n     this.save = true\n   }\n },\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n       updated(){\n  \nif(localStorage.getItem(\"showModal\") == \"true\")\n     {\n       this.showmodel = true;\n     }\n     else{\n       this.showmodel = false;\n     }\n },\n  methods: {\n    async show() {\n      if (\n        this.formData.driverIsOwner &&\n        this.formData.driverOwnerIndex === -1\n      ) {\n        this.formData.driverIsOwner = false;\n      }\n\n      this.setDataFromForms();\n\n      if (this.noOwners) {\n        return;\n      }\n\n      let allFormAreValid = this.$refs.ownerForm\n        ? this.$refs.ownerForm.every(formRef => formRef.validateForm())\n        : true;\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'owners',\n          val: {\n            ...this.formData,\n            owners: this.formData.owners.map(o => {\n              let owner = { ...o };\n              delete owner._uuid;\n              return owner;\n            })\n          },\n            userId:localStorage.getItem(\"userId\"),\n            uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === \"OK\") {\n          if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n        } else if (data.status === \"ERROR\") {\n          this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    addForm() {\n\n      // console.log(\" _uuid: uuidv4()\", uuidv4())\n      this.formData.owners.push({ _uuid: uuidv4() });\n      this.error = null;\n    },\n    removeForm(index) {\n      this.formData.owners.splice(index, 1);\n    },\n    updateHint(hint) {\n      this.$emit('update-hint', hint);\n    },\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { drivers, owners: ownersTab } = data.data.a;\n            console.log(\"sssss\",data.data.a)\n          if (drivers) {\n            this.drivers = drivers;\n          }\n\n          if (ownersTab) {\n            let { owners } = ownersTab;\n\n            this.formData = {\n              ...this.formData,\n              ...ownersTab,\n              owners: owners.map(o => ({ ...o, _uuid: uuidv4() }))\n            };\n          } else {\n            this.addForm();\n          }\n        } else if (data.status === 'ERROR') {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    setDataFromForms() {\n      let owners = [];\n\n      if (this.$refs.ownerForm) {\n        this.$refs.ownerForm.forEach(formRef => {\n          let formData = formRef.getFormData();\n          owners.push(formData);\n        });\n      }\n\n      this.formData.owners = owners;\n    },\n    async updateCompany() {\n      if (\n        this.formData.driverIsOwner &&\n        this.formData.driverOwnerIndex === -1\n      ) {\n        this.formData.driverIsOwner = false;\n      }\n\n      this.setDataFromForms();\n\n      if (this.noOwners) {\n        return;\n      }\n\n      let allFormAreValid = this.$refs.ownerForm\n        ? this.$refs.ownerForm.every(formRef => formRef.validateForm())\n        : true;\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'owners',\n          val: {\n            ...this.formData,\n            owners: this.formData.owners.map(o => {\n              let owner = { ...o };\n              delete owner._uuid;\n              return owner;\n            })\n          },\n            userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",null]}