{"remainingRequest":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Downloads/LuckyTruck_UI-master/src/components/AccountInfoDrivers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/src/components/AccountInfoDrivers.vue","mtime":1560865129140},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport uuidv4 from 'uuid/v4';\nimport { API } from '../api.js';\n\nexport default {\n  name: 'AccountInfoDrivers',\n  components: {\n    AccountInfoDriversItem: () => import('./AccountInfoDriversItem.vue')\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      drivers: [],\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n  methods: {\n    addForm() {\n      this.drivers.push({ _uuid: uuidv4() });\n      this.error = null;\n    },\n    removeForm(index) {\n      this.drivers.splice(index, 1);\n\n      if (!this.drivers.length) {\n        this.error = 'Please add at least one driver';\n      }\n    },\n    updateHint(hint) {\n      this.$emit('update-hint', hint);\n    },\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { drivers } = data.data;\n\n          if (drivers && drivers.length) {\n            this.drivers = drivers.map(d => ({ ...d, _uuid: uuidv4() }));\n          } else {\n            this.addForm();\n          }\n        } else if (data.status === 'ERROR') {\n          this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    setDataFromForms() {\n      let drivers = [];\n\n      this.$refs.driverForm.forEach(formRef => {\n        let formData = formRef.getFormData();\n        drivers.push(formData);\n      });\n\n      this.drivers = drivers;\n    },\n    async updateCompany() {\n      this.setDataFromForms();\n\n      let driverForms = this.$refs.driverForm;\n      if (!driverForms.length) {\n        return;\n      }\n\n      let allFormAreValid = driverForms.every(formRef =>\n        formRef.validateForm()\n      );\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'drivers',\n          val: this.drivers.map(d => {\n            let driver = { ...d };\n            delete driver._uuid;\n            return driver;\n          })\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoDrivers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"AccountInfoDrivers.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"drivers-form container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card mb-5\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Drivers</h4>\n\n          <account-info-drivers-item\n            v-for=\"(item, index) in drivers\"\n            ref=\"driverForm\"\n            :key=\"item._uuid\"\n            :index=\"index\"\n            :driver=\"item\"\n            class=\"mb-5\"\n            @update-hint=\"updateHint\"\n            @remove-form=\"removeForm\"\n          />\n\n          <hr />\n\n          <div class=\"row align-items-center mb-3\">\n            <div class=\"col font-weight-bold\">\n              Add another driver\n            </div>\n\n            <div class=\"col-auto text-right\">\n              <button type=\"button\" class=\"lt-button px-3\" @click=\"addForm\">\n                +\n              </button>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">\n            {{ error }}\n          </div>\n        </div>\n\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default mob-2 px-4 btn-block btn-border-radius-lb\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">\n                  ELD Provider\n                </div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main mob-2 px-4 btn-block btn-border-radius-rb\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 text-white mob-2\">\n                  Owners\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport uuidv4 from 'uuid/v4';\nimport { API } from '../api.js';\n\nexport default {\n  name: 'AccountInfoDrivers',\n  components: {\n    AccountInfoDriversItem: () => import('./AccountInfoDriversItem.vue')\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      drivers: [],\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n  methods: {\n    addForm() {\n      this.drivers.push({ _uuid: uuidv4() });\n      this.error = null;\n    },\n    removeForm(index) {\n      this.drivers.splice(index, 1);\n\n      if (!this.drivers.length) {\n        this.error = 'Please add at least one driver';\n      }\n    },\n    updateHint(hint) {\n      this.$emit('update-hint', hint);\n    },\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { drivers } = data.data;\n\n          if (drivers && drivers.length) {\n            this.drivers = drivers.map(d => ({ ...d, _uuid: uuidv4() }));\n          } else {\n            this.addForm();\n          }\n        } else if (data.status === 'ERROR') {\n          this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    setDataFromForms() {\n      let drivers = [];\n\n      this.$refs.driverForm.forEach(formRef => {\n        let formData = formRef.getFormData();\n        drivers.push(formData);\n      });\n\n      this.drivers = drivers;\n    },\n    async updateCompany() {\n      this.setDataFromForms();\n\n      let driverForms = this.$refs.driverForm;\n      if (!driverForms.length) {\n        return;\n      }\n\n      let allFormAreValid = driverForms.every(formRef =>\n        formRef.validateForm()\n      );\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'drivers',\n          val: this.drivers.map(d => {\n            let driver = { ...d };\n            delete driver._uuid;\n            return driver;\n          })\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n"]}]}