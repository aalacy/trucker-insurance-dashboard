{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoCargoGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoCargoGroup.vue","mtime":1563454478699},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from \"vuex\";\nimport { validateField, validateForm, minLength } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\n\n\n\nexport default {\n  name: \"AccountInfoCargoGroup\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  mounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n      this.$store.dispatch('loadData',localStorage.getItem(\"uuid\"))\n     let a = this.$store.state.getData.data[3]\n    let b = JSON.parse(a.val).cargoGroup\n     let c =[];\n     for(var i=0;i<this.cargoGroups.length;i++){\n        c.push(this.cargoGroups[i].value)\n     }\n    let filteredKeywords = c.filter((word)=> b.includes(word));\n    console.log(\"filteredKeywords\",filteredKeywords);\n    for(var i=0;i<filteredKeywords.length;i++){\n    this.selectCargoGroup(filteredKeywords[i])\n    \n   }}else{\n     this.save = true  \n}\n },\n  components: {\n    modalLogin: ModalLogin\n  },\n \n  data() {\n    return {\n      showmodel: false,\n      save:true,\n      formData: {\n        cargoGroup: []\n      },\n      selectedCargoGroup:[],\n      rules: {\n        cargoGroup: [val => minLength(val, 1, \"Please select Cargo Group\")]\n      },\n      formErrors: {},\n      hints: {},\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    ...mapState(\"cargo\", [\"cargoGroups\"]),\n    cargoGroupMap() {\n      let map = {};\n      this.formData.cargoGroup.forEach(val => {\n        map[val] = true;\n        // console.log(\"val\",val)\n      });\n      // console.log(\"map\",map)\n      return map;\n    },\n    ...mapState([\n    'data'\n  ])\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    // this.loadCompany();\n  },\n   updated(){\n\n     if(localStorage.getItem(\"showModal\") == \"true\")\n     {\n       this.showmodel = true;\n     }\n     else{\n       this.showmodel = false;\n     }\n\n    \n },\n  \n  methods: {\n    selectCargoGroup(cargoGroupValue) {\n      // console.log(\"cargoGroupValue\",cargoGroupValue)\n      // this.formData.cargoGroup.push(cargoGroupValue)\n      // console.log(\"this.formData.cargoGroup\",this.formData.cargoGroup)\n      if (this.cargoGroupMap[cargoGroupValue]) {\n      \n        this.formData.cargoGroup = this.formData.cargoGroup.filter(\n          val => val !== cargoGroupValue\n        );\n        this.$emit(\"update-hint\", \"\");\n      } else {\n        this.formData.cargoGroup.push(cargoGroupValue);\n        this.$emit(\"update-hint\", this.hints[cargoGroupValue]);\n      }\n\n      this.formErrors = {};\n    },\n    goPrevForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n      \n      this.loading = true;\n      this.error = null;\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoGroup\",\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n         if (data.status === \"OK\") {\n           if(this.showmodel){\n          this.showmodel = false;\n        }else{\n          this.showmodel = true;\n        }\n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // this.showmodel = true;\n\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { cargoGroup } = data.data;\n          if (cargoGroup) {\n            this.formData = {\n              ...this.formData,\n              ...cargoGroup\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n          console.log(\"error\", data.status);\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoGroup\",\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n        console.log(\"this.formData\", this.formData);\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",null]}