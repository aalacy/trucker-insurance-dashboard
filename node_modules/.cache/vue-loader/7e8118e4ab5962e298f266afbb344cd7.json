{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoDrivers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoDrivers.vue","mtime":1563274419123},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport uuidv4 from \"uuid/v4\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\n\nexport default {\n  name: \"AccountInfoDrivers\",\n\n  components: {\n    AccountInfoDriversItem: () => import(\"./AccountInfoDriversItem.vue\"),\n    modelLogin: ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showmodel: false,\n      drivers: [],\n      loading: false,\n      error: null,\n      save:true\n    };\n  },\n mounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n   }else{\n     this.save = true\n   }\n },\n\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    async show() {\n      this.setDataFromForms();\n\n      let driverForms = this.$refs.driverForm;\n      if (!driverForms.length) {\n        return;\n      }\n\n      let allFormAreValid = driverForms.every(formRef =>\n        formRef.validateForm()\n      );\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"drivers\",\n          val: this.drivers.map(d => {\n            let driver = { ...d };\n            delete driver._uuid;\n            return driver;\n          }),\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === \"OK\") {\n          if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n        } else if (data.status === \"ERROR\") {\n          this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    addForm() {\n      this.drivers.push({ _uuid: uuidv4() });\n      this.error = null;\n    },\n    removeForm(index) {\n      this.drivers.splice(index, 1);\n\n      if (!this.drivers.length) {\n        this.error = \"Please add at least one driver\";\n      }\n    },\n    updateHint(hint) {\n      this.$emit(\"update-hint\", hint);\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { drivers } = data.data;\n\n          if (drivers && drivers.length) {\n            this.drivers = drivers.map(d => ({ ...d, _uuid: uuidv4() }));\n          } else {\n            this.addForm();\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    setDataFromForms() {\n      let drivers = [];\n\n      this.$refs.driverForm.forEach(formRef => {\n        let formData = formRef.getFormData();\n        drivers.push(formData);\n      });\n\n      this.drivers = drivers;\n    },\n    async updateCompany() {\n      this.setDataFromForms();\n\n      let driverForms = this.$refs.driverForm;\n      if (!driverForms.length) {\n        return;\n      }\n\n      let allFormAreValid = driverForms.every(formRef =>\n        formRef.validateForm()\n      );\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"drivers\",\n          val: this.drivers.map(d => {\n            let driver = { ...d };\n            delete driver._uuid;\n            return driver;\n          }),\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",null]}