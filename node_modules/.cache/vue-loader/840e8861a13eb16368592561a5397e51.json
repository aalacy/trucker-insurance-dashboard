{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoPersonalInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoPersonalInfo.vue","mtime":1563454288196},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validateField, validateForm, required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ChatBoat from \"./ChatBoat.vue\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"AccountInfoPersonalInfo\",\n\n  components: {\n    \"chat-boat\": ChatBoat,\n    modelLogin: ModalLogin\n  },\n  props: {\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  beforeMount() {\n    // console.log(\"beforeMount\");\n    localStorage.setItem(\"usdot\", \"\");\n  },\n  mounted() {\n    this.formData.USDOT = localStorage.getItem(\"usdot\");\n    this.formData.company = localStorage.getItem(\"company\");\n    this.formData.address = localStorage.getItem([\"Mailing address\"]);\n    // [this.formData.dobD, this.formData.dobM, this.formData.dobY] = b.dateOfBirth.split('/');\n    let x = localStorage.getItem(\"Mailing address\");\n    // this.formData.zip = x.split(',')\n    this.formData.address1 = localStorage.getItem([\"Physical address\"]);\n    this.formData.phone = localStorage.getItem(\"Phone\");\n\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      this.$store.dispatch(\"loadData\", this.uuid);\n       let a = this.$store.state.getData.data[2]\n      console.log(\"aaaa\",a);\n      let b = JSON.parse(a.val);\n      this.formData.address = b.address;\n      this.formData.city = b.city;\n      this.formData.zip = b.zip;\n      this.formData.USDOT = localStorage.getItem(\"usdot\");\n      this.formData.company = localStorage.getItem(\"company\");\n      this.formData.phone = localStorage.getItem(\"Phone\");\n      this.formData.state = b.state;\n      this.formData.address1 = b.address1;\n      this.formData.city1 = b.city1;\n      this.formData.zip1 = b.zip1;\n      this.formData.state1 = b.state1;\n    } else {\n      this.save = true;\n\n      console.log(\"not logged in\");\n    }\n  },\n  beforeMount() {},\n  computed: {\n    ...mapState([\"data\"])\n  },\n\n  data() {\n    return {\n      checked: true,\n      showmodel: false,\n      save: true,\n      uuid: \"\",\n      formData: {\n        // firstName: \"\",\n        // lastName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n        USDOT: \"\",\n        company: \"\",\n        phone: \"\",\n        address1: \"\",\n        city1: \"\",\n        state1: \"\",\n        zip1: \"\"\n      },\n      rules: {\n        // firstName: [required],\n        // lastName: [required],\n        address: [required],\n        city: [required],\n        state: [required],\n        zip: [required],\n        address1: [required],\n        city1: [required],\n        state1: [required],\n        zip1: [required]\n      },\n      formErrors: {},\n      hints: {\n        address: \"Another hint\"\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n    this.uuid = localStorage.getItem(\"uuid\");\n    // console.log(\"be\",this.uuid)\n    // console.log(\"mount api\",JSON.parse(this.data.data[0].val).businessType)\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          userId: localStorage.getItem(\"userId\"),\n          uuid: localStorage.getItem(\"uuid\")\n        });\n        console.log(\"this.formData per\", this.formData);\n        if (data.status === \"OK\") {\n          if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n        } else if (data.status === \"ERROR\") {\n          this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = false;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n        this.uuid = data.data.b;\n        localStorage.setItem(\"uuid\", data.data.b);\n        if (data.status === \"OK\") {\n          let { personalInfo } = data.data;\n          if (personalInfo) {\n            this.formData = {\n              ...this.formData,\n              ...personalInfo\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: \"Home\" });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          userId: localStorage.getItem(\"userId\"),\n          uuid: localStorage.getItem(\"uuid\")\n        });\n        // console.log(localStorage.getItem(\"userId\"))\n        // console.log(localStorage.getItem(\"uuid\"))\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          // console.log(\"data\",data)\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoPersonalInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"AccountInfoPersonalInfo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class>\n    <form class=\"custom_form\" @submit.prevent=\"updateCompany\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Business Information</h4>\n          <div class=\"row\">\n            <div class=\"col\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.address\"\n                  :class=\"{ 'has-error': formErrors.address }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Street Address*\"\n                  required\n                  @change=\"validateField('address')\"\n                  @focus=\"onFocus('address')\"\n                  @blur=\"onBlur\"\n                >\n                <div v-if=\"formErrors.address\" class=\"text-danger\">{{ formErrors.address }}</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.city\"\n                  :class=\"{ 'has-error': formErrors.city }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"City*\"\n                  required\n                  @change=\"validateField('city')\"\n                  @focus=\"onFocus('city')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.city\" class=\"text-danger\">{{ formErrors.city }}</div>\n              </div>\n            </div>\n\n            <div class=\"col-4\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.state\"\n                  :class=\"{ 'has-error': formErrors.state }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('state')\"\n                  @focus=\"onFocus('state')\"\n                  @blur=\"onBlur\"\n                >\n                  <option disabled value>State/Province</option>\n                  <option value=\"AL\">Alabama</option>\n                  <option value=\"AK\">Alaska</option>\n                  <option value=\"AZ\">Arizona</option>\n                  <option value=\"AR\">Arkansas</option>\n                  <option value=\"CA\">California</option>\n                  <option value=\"CO\">Colorado</option>\n                  <option value=\"CT\">Connecticut</option>\n                  <option value=\"DE\">Delaware</option>\n                  <option value=\"DC\">District Of Columbia</option>\n                  <option value=\"FL\">Florida</option>\n                  <option value=\"GA\">Georgia</option>\n                  <option value=\"HI\">Hawaii</option>\n                  <option value=\"ID\">Idaho</option>\n                  <option value=\"IL\">Illinois</option>\n                  <option value=\"IN\">Indiana</option>\n                  <option value=\"IA\">Iowa</option>\n                  <option value=\"KS\">Kansas</option>\n                  <option value=\"KY\">Kentucky</option>\n                  <option value=\"LA\">Louisiana</option>\n                  <option value=\"ME\">Maine</option>\n                  <option value=\"MD\">Maryland</option>\n                  <option value=\"MA\">Massachusetts</option>\n                  <option value=\"MI\">Michigan</option>\n                  <option value=\"MN\">Minnesota</option>\n                  <option value=\"MS\">Mississippi</option>\n                  <option value=\"MO\">Missouri</option>\n                  <option value=\"MT\">Montana</option>\n                  <option value=\"NE\">Nebraska</option>\n                  <option value=\"NV\">Nevada</option>\n                  <option value=\"NH\">New Hampshire</option>\n                  <option value=\"NJ\">New Jersey</option>\n                  <option value=\"NM\">New Mexico</option>\n                  <option value=\"NY\">New York</option>\n                  <option value=\"NC\">North Carolina</option>\n                  <option value=\"ND\">North Dakota</option>\n                  <option value=\"OH\">Ohio</option>\n                  <option value=\"OK\">Oklahoma</option>\n                  <option value=\"OR\">Oregon</option>\n                  <option value=\"PA\">Pennsylvania</option>\n                  <option value=\"RI\">Rhode Island</option>\n                  <option value=\"SC\">South Carolina</option>\n                  <option value=\"SD\">South Dakota</option>\n                  <option value=\"TN\">Tennessee</option>\n                  <option value=\"TX\">Texas</option>\n                  <option value=\"UT\">Utah</option>\n                  <option value=\"VT\">Vermont</option>\n                  <option value=\"VA\">Virginia</option>\n                  <option value=\"WA\">Washington</option>\n                  <option value=\"WV\">West Virginia</option>\n                  <option value=\"WI\">Wisconsin</option>\n                  <option value=\"WY\">Wyoming</option>\n                </select>\n\n                <div v-if=\"formErrors.state\" class=\"text-danger\">{{ formErrors.state }}</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.zip\"\n                  :class=\"{ 'has-error': formErrors.zip }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Zip Code*\"\n                  required\n                  @change=\"validateField('zip')\"\n                  @focus=\"onFocus('zip')\"\n                  @blur=\"onBlur\"\n                >\n                {{data}}\n                <div v-if=\"formErrors.zip\" class=\"text-danger\">{{ formErrors.zip }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.USDOT\"\n                  :class=\"{ 'has-error': formErrors.USDOT }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"USDOT\"\n                  @focus=\"onFocus('USDOT')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.USDOT\" class=\"text-danger\">{{ formErrors.USDOT }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.company\"\n                  :class=\"{ 'has-error': formErrors.company }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Company name\"\n                  @focus=\"onFocus('Company name')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.company\" class=\"text-danger\">{{ formErrors.company }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.phone\"\n                  :class=\"{ 'has-error': formErrors.phone }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Phone no\"\n                  @focus=\"onFocus('Phone number')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.phone\" class=\"text-danger\">{{ formErrors.phone }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-12 col-sm-6 col-lg-12\">\n            <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n            <label for=\"checkbox\" class=\"st-padding d-inline\">Is Garaging address the same location?</label>\n          </div>\n          <div>\n            <div class=\"row\">\n              <div class=\"col-md-6 col-lg-12 py-3\">\n                <h6 class=\"pt-2\">Garaging Address</h6>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col\">\n                <div class=\"form-group\">\n                  <input\n                    v-model=\"formData.address1\"\n                    :class=\"{ 'has-error': formErrors.address1 }\"\n                    type=\"text\"\n                    class=\"lt-input\"\n                    placeholder=\"Garaging Address*\"\n                    required\n                    @change=\"validateField('address1')\"\n                    @focus=\"onFocus('address1')\"\n                    @blur=\"onBlur\"\n                  >\n\n                  <div v-if=\"formErrors.address1\" class=\"text-danger\">{{ formErrors.address1 }}</div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-6\">\n                <div class=\"form-group\">\n                  <input\n                    v-model=\"formData.city1\"\n                    :class=\"{ 'has-error': formErrors.city1 }\"\n                    type=\"text\"\n                    class=\"lt-input\"\n                    placeholder=\"City*\"\n                    required\n                    @change=\"validateField('city1')\"\n                    @focus=\"onFocus('city1')\"\n                    @blur=\"onBlur\"\n                  >\n                  <div v-if=\"formErrors.city1\" class=\"text-danger\">{{ formErrors.city1 }}</div>\n                </div>\n              </div>\n\n              <div class=\"col-4\">\n                <div class=\"form-group\">\n                  <select\n                    v-model=\"formData.state1\"\n                    :class=\"{ 'has-error': formErrors.state1 }\"\n                    class=\"lt-input\"\n                    required\n                    @change=\"validateField('state1')\"\n                    @focus=\"onFocus('state1')\"\n                    @blur=\"onBlur\"\n                  >\n                    <option disabled value>State/Province</option>\n                    <option value=\"AL\">Alabama</option>\n                    <option value=\"AK\">Alaska</option>\n                    <option value=\"AZ\">Arizona</option>\n                    <option value=\"AR\">Arkansas</option>\n                    <option value=\"CA\">California</option>\n                    <option value=\"CO\">Colorado</option>\n                    <option value=\"CT\">Connecticut</option>\n                    <option value=\"DE\">Delaware</option>\n                    <option value=\"DC\">District Of Columbia</option>\n                    <option value=\"FL\">Florida</option>\n                    <option value=\"GA\">Georgia</option>\n                    <option value=\"HI\">Hawaii</option>\n                    <option value=\"ID\">Idaho</option>\n                    <option value=\"IL\">Illinois</option>\n                    <option value=\"IN\">Indiana</option>\n                    <option value=\"IA\">Iowa</option>\n                    <option value=\"KS\">Kansas</option>\n                    <option value=\"KY\">Kentucky</option>\n                    <option value=\"LA\">Louisiana</option>\n                    <option value=\"ME\">Maine</option>\n                    <option value=\"MD\">Maryland</option>\n                    <option value=\"MA\">Massachusetts</option>\n                    <option value=\"MI\">Michigan</option>\n                    <option value=\"MN\">Minnesota</option>\n                    <option value=\"MS\">Mississippi</option>\n                    <option value=\"MO\">Missouri</option>\n                    <option value=\"MT\">Montana</option>\n                    <option value=\"NE\">Nebraska</option>\n                    <option value=\"NV\">Nevada</option>\n                    <option value=\"NH\">New Hampshire</option>\n                    <option value=\"NJ\">New Jersey</option>\n                    <option value=\"NM\">New Mexico</option>\n                    <option value=\"NY\">New York</option>\n                    <option value=\"NC\">North Carolina</option>\n                    <option value=\"ND\">North Dakota</option>\n                    <option value=\"OH\">Ohio</option>\n                    <option value=\"OK\">Oklahoma</option>\n                    <option value=\"OR\">Oregon</option>\n                    <option value=\"PA\">Pennsylvania</option>\n                    <option value=\"RI\">Rhode Island</option>\n                    <option value=\"SC\">South Carolina</option>\n                    <option value=\"SD\">South Dakota</option>\n                    <option value=\"TN\">Tennessee</option>\n                    <option value=\"TX\">Texas</option>\n                    <option value=\"UT\">Utah</option>\n                    <option value=\"VT\">Vermont</option>\n                    <option value=\"VA\">Virginia</option>\n                    <option value=\"WA\">Washington</option>\n                    <option value=\"WV\">West Virginia</option>\n                    <option value=\"WI\">Wisconsin</option>\n                    <option value=\"WY\">Wyoming</option>\n                  </select>\n\n                  <div v-if=\"formErrors.state\" class=\"text-danger\">{{ formErrors.state1 }}</div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-6\">\n                <div class=\"form-group\">\n                  <input\n                    v-model=\"formData.zip1\"\n                    :class=\"{ 'has-error': formErrors.zip1 }\"\n                    type=\"text\"\n                    class=\"lt-input\"\n                    placeholder=\"Zip Code*\"\n                    required\n                    @change=\"validateField('zip1')\"\n                    @focus=\"onFocus('zip1')\"\n                    @blur=\"onBlur\"\n                  >\n\n                  <div v-if=\"formErrors.zip\" class=\"text-danger\">{{ formErrors.zip1 }}</div>\n                </div>\n              </div>\n            </div>\n            <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n          </div>\n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0 d-flex pl-4 align-items-center color-font\">\n              <font-awesome-icon icon=\"caret-left\" size=\"2x\" class=\"m-1\"></font-awesome-icon>Previous\n            </div>\n            <div class=\"col-6 p-0\">\n              <!-- <i class=\"fas fa-home\" aria-hidden=\"true\"></i>  -->\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main btn-block btn-border-radius-rb p-1\"\n              >\n                <!-- <font-awesome-icon icon=\"amazon-pay\" size=\"2x\" class=\"m-1\"></font-awesome-icon> -->\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline text-white\">\n                  Business Structure\n                  <font-awesome-icon icon=\"caret-right\" size=\"2x\" class=\"m-1\"></font-awesome-icon>\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n        <span class=\"save-hover\">Save & Continue</span>\n      </div>\n      <div v-if=\"showmodel\">\n        <modelLogin/>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { validateField, validateForm, required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ChatBoat from \"./ChatBoat.vue\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"AccountInfoPersonalInfo\",\n\n  components: {\n    \"chat-boat\": ChatBoat,\n    modelLogin: ModalLogin\n  },\n  props: {\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  beforeMount() {\n    // console.log(\"beforeMount\");\n    localStorage.setItem(\"usdot\", \"\");\n  },\n  mounted() {\n    this.formData.USDOT = localStorage.getItem(\"usdot\");\n    this.formData.company = localStorage.getItem(\"company\");\n    this.formData.address = localStorage.getItem([\"Mailing address\"]);\n    // [this.formData.dobD, this.formData.dobM, this.formData.dobY] = b.dateOfBirth.split('/');\n    let x = localStorage.getItem(\"Mailing address\");\n    // this.formData.zip = x.split(',')\n    this.formData.address1 = localStorage.getItem([\"Physical address\"]);\n    this.formData.phone = localStorage.getItem(\"Phone\");\n\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      this.$store.dispatch(\"loadData\", this.uuid);\n       let a = this.$store.state.getData.data[2]\n      console.log(\"aaaa\",a);\n      let b = JSON.parse(a.val);\n      this.formData.address = b.address;\n      this.formData.city = b.city;\n      this.formData.zip = b.zip;\n      this.formData.USDOT = localStorage.getItem(\"usdot\");\n      this.formData.company = localStorage.getItem(\"company\");\n      this.formData.phone = localStorage.getItem(\"Phone\");\n      this.formData.state = b.state;\n      this.formData.address1 = b.address1;\n      this.formData.city1 = b.city1;\n      this.formData.zip1 = b.zip1;\n      this.formData.state1 = b.state1;\n    } else {\n      this.save = true;\n\n      console.log(\"not logged in\");\n    }\n  },\n  beforeMount() {},\n  computed: {\n    ...mapState([\"data\"])\n  },\n\n  data() {\n    return {\n      checked: true,\n      showmodel: false,\n      save: true,\n      uuid: \"\",\n      formData: {\n        // firstName: \"\",\n        // lastName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n        USDOT: \"\",\n        company: \"\",\n        phone: \"\",\n        address1: \"\",\n        city1: \"\",\n        state1: \"\",\n        zip1: \"\"\n      },\n      rules: {\n        // firstName: [required],\n        // lastName: [required],\n        address: [required],\n        city: [required],\n        state: [required],\n        zip: [required],\n        address1: [required],\n        city1: [required],\n        state1: [required],\n        zip1: [required]\n      },\n      formErrors: {},\n      hints: {\n        address: \"Another hint\"\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n    this.uuid = localStorage.getItem(\"uuid\");\n    // console.log(\"be\",this.uuid)\n    // console.log(\"mount api\",JSON.parse(this.data.data[0].val).businessType)\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          userId: localStorage.getItem(\"userId\"),\n          uuid: localStorage.getItem(\"uuid\")\n        });\n        console.log(\"this.formData per\", this.formData);\n        if (data.status === \"OK\") {\n          if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n        } else if (data.status === \"ERROR\") {\n          this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = false;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n        this.uuid = data.data.b;\n        localStorage.setItem(\"uuid\", data.data.b);\n        if (data.status === \"OK\") {\n          let { personalInfo } = data.data;\n          if (personalInfo) {\n            this.formData = {\n              ...this.formData,\n              ...personalInfo\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: \"Home\" });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          userId: localStorage.getItem(\"userId\"),\n          uuid: localStorage.getItem(\"uuid\")\n        });\n        // console.log(localStorage.getItem(\"userId\"))\n        // console.log(localStorage.getItem(\"uuid\"))\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          // console.log(\"data\",data)\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.st-padding {\n  // color: black;\n  padding-left: 10px;\n  font-weight: bold;\n}\n</style>\n"]}]}