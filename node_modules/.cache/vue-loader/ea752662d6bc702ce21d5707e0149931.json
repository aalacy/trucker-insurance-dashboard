{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoUploadDocuments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoUploadDocuments.vue","mtime":1563011864417},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validateField, validateForm, required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport { isMobile } from \"mobile-device-detect\";\nimport ModalLogin from \"./ModalLogin.vue\";\nexport default {\n  name: \"AccountInfoUploadDocuments\",\n  mobile: \"phone\",\n  props: {\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin\n  },\n mounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n   }else{\n     this.save = true\n   }\n },\n  data() {\n    return {\n      msg: isMobile\n        ? \"Welcome to Your Vue.js mobile App!\"\n        : \"Welcome to Your Vue.js App\",\n      showmodel: false,\n      save:true,\n      formData: {\n        imageIdFront: null,\n        imageIdBack: null,\n        imageDOT: null,\n        imageRegistration: null\n      },\n      // rules: {},\n      formErrors: {},\n      preview: {\n        imageIdFront: null,\n        imageIdBack: null,\n        imageDOT: null,\n        imageRegistration: null\n      },\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    submitBtnText() {\n      if (this.loading) {\n        return \"Loading...\";\n      }\n\n      let {\n        imageIdFront,\n        imageIdBack,\n        imageDOT,\n        imageRegistration\n      } = this.formData;\n      let anyImageSelected =\n        imageIdFront || imageIdBack || imageDOT || imageRegistration;\n      if (anyImageSelected) {\n        return \"Upload\";\n      }\n\n      return \"Skip\";\n    }\n  },\n \n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    // this.uploadDocuments()\n  },\n  methods: {\n    // validateField(fieldName) {\n    //   validateField(fieldName, this.formData, this.rules, this.formErrors);\n    // },\n    // validateForm() {\n    //   this.formErrors = {};\n    //   return validateForm(this.formData, this.rules, this.formErrors);\n    // },\n    setImage(event, fieldName) {\n      let { files } = event.target;\n\n      let image = files[0] || null;\n\n      this.formData[fieldName] = image;\n      this.previewFile(image, fieldName);\n\n      // this.validateField(fieldName);\n    },\n    show() {\n      if (this.showmodel) {\n        this.showmodel = false;\n      } else {\n        this.showmodel = true;\n      }\n    },\n    previewFile(file, fieldName) {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.preview[fieldName] = reader.result;\n      };\n\n      if (file) {\n        reader.readAsDataURL(file);\n      } else {\n        this.preview[fieldName] = null;\n      }\n    },\n    async uploadDocuments() {\n      // let formIsValid = this.validateForm();\n      // if (!formIsValid) {\n      //   return;\n      // }\n\n      try {\n        let data = await API.formData(\"company/upload\", this.formData);\n\n        // console.log(data);\n\n        if (data.status === \"OK\") {\n          console.log(\"this.nextForm\", this.nextForm);\n          this.$router.push({ name: this.nextForm });\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoUploadDocuments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"AccountInfoUploadDocuments.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"upload-documents container py-2\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <h3 class=\"title\">Upload documents</h3>\n\n        <p>\n          Please upload the following documents: drivers license, registration,\n          and picture of the side of your vehicle to make the process go\n          faster.\n          <br>Donâ€™t have these documents? No worries, just press skip.\n        </p>\n\n        <form @submit.prevent=\"uploadDocuments\">\n          <div class=\"row\">\n            <div class=\"col-12 col-lg-6\">\n              <div class=\"form-group\">\n                <label\n                  :class=\"{ 'has-error': formErrors.imageIdFront }\"\n                  for=\"imageIdFront\"\n                  class=\"lt-input\"\n                >Select Image ID Front</label>\n\n                <input\n                  id=\"imageIdFront\"\n                  :class=\"{ 'has-error': formErrors.imageIdFront }\"\n                  type=\"file\"\n                  accept=\"image/*;capture=camera\"\n                  class=\"lt-input\"\n                  hidden\n                  @change=\"setImage($event, 'imageIdFront')\"\n                >\n\n                <div\n                  v-if=\"formErrors.imageIdFront\"\n                  class=\"text-danger\"\n                >{{ formErrors.imageIdFront }}</div>\n\n                <div v-if=\"preview.imageIdFront\" class=\"preview\">\n                  <img :src=\"preview.imageIdFront\" alt class=\"preview-image\">\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-12 col-lg-6\">\n              <div class=\"form-group\">\n                <label\n                  :class=\"{ 'has-error': formErrors.imageIdBack }\"\n                  for=\"imageIdBack\"\n                  class=\"lt-input\"\n                >Select Image ID Back</label>\n\n                <input\n                  id=\"imageIdBack\"\n                  :class=\"{ 'has-error': formErrors.imageIdBack }\"\n                  type=\"file\"\n                  class=\"lt-input\"\n                  accept=\"image/*;capture=camera\"\n                  hidden\n                  @change=\"setImage($event, 'imageIdBack')\"\n                >\n\n                <div v-if=\"formErrors.imageIdBack\" class=\"text-danger\">{{ formErrors.imageIdBack }}</div>\n\n                <div v-if=\"preview.imageIdBack\" class=\"preview\">\n                  <img :src=\"preview.imageIdBack\" alt class=\"preview-image\">\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-12 col-lg-6\">\n              <div class=\"form-group\">\n                <label\n                  :class=\"{ 'has-error': formErrors.imageDOT }\"\n                  for=\"imageDOT\"\n                  class=\"lt-input\"\n                >Select Image DOT</label>\n\n                <input\n                  id=\"imageDOT\"\n                  :class=\"{ 'has-error': formErrors.imageDOT }\"\n                  type=\"file\"\n                  class=\"lt-input\"\n                  accept=\"image/*;capture=camera\"\n                  hidden\n                  @change=\"setImage($event, 'imageDOT')\"\n                >\n\n                <div v-if=\"formErrors.imageDOT\" class=\"text-danger\">{{ formErrors.imageDOT }}</div>\n\n                <div v-if=\"preview.imageDOT\" class=\"preview\">\n                  <img :src=\"preview.imageDOT\" alt class=\"preview-image\">\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-12 col-lg-6\">\n              <div class=\"form-group\">\n                <label\n                  :class=\"{ 'has-error': formErrors.imageRegistration }\"\n                  for=\"imageRegistration\"\n                  class=\"lt-input\"\n                >Select Image Registration</label>\n\n                <input\n                  id=\"imageRegistration\"\n                  :class=\"{ 'has-error': formErrors.imageRegistration }\"\n                  type=\"file\"\n                  accept=\"image/*;capture=camera\"\n                  class=\"lt-input\"\n                  hidden\n                  @change=\"setImage($event, 'imageRegistration')\"\n                >\n\n                <div\n                  v-if=\"formErrors.imageRegistration\"\n                  class=\"text-danger\"\n                >{{ formErrors.imageRegistration }}</div>\n\n                <div v-if=\"preview.imageRegistration\" class=\"preview\">\n                  <img :src=\"preview.imageRegistration\" alt class=\"preview-image\">\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n\n          <div class=\"text-right\">\n            <button\n              :disabled=\"loading\"\n              type=\"submit\"\n              class=\"lt-button btn-md lt-button-main\"\n            >{{ submitBtnText }}</button>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n      <span class=\"save-hover\">Save & Continue</span>\n    </div>\n    <div class v-if=\"showmodel\">\n      <modelLogin/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { validateField, validateForm, required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport { isMobile } from \"mobile-device-detect\";\nimport ModalLogin from \"./ModalLogin.vue\";\nexport default {\n  name: \"AccountInfoUploadDocuments\",\n  mobile: \"phone\",\n  props: {\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin\n  },\n mounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n   }else{\n     this.save = true\n   }\n },\n  data() {\n    return {\n      msg: isMobile\n        ? \"Welcome to Your Vue.js mobile App!\"\n        : \"Welcome to Your Vue.js App\",\n      showmodel: false,\n      save:true,\n      formData: {\n        imageIdFront: null,\n        imageIdBack: null,\n        imageDOT: null,\n        imageRegistration: null\n      },\n      // rules: {},\n      formErrors: {},\n      preview: {\n        imageIdFront: null,\n        imageIdBack: null,\n        imageDOT: null,\n        imageRegistration: null\n      },\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    submitBtnText() {\n      if (this.loading) {\n        return \"Loading...\";\n      }\n\n      let {\n        imageIdFront,\n        imageIdBack,\n        imageDOT,\n        imageRegistration\n      } = this.formData;\n      let anyImageSelected =\n        imageIdFront || imageIdBack || imageDOT || imageRegistration;\n      if (anyImageSelected) {\n        return \"Upload\";\n      }\n\n      return \"Skip\";\n    }\n  },\n \n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    // this.uploadDocuments()\n  },\n  methods: {\n    // validateField(fieldName) {\n    //   validateField(fieldName, this.formData, this.rules, this.formErrors);\n    // },\n    // validateForm() {\n    //   this.formErrors = {};\n    //   return validateForm(this.formData, this.rules, this.formErrors);\n    // },\n    setImage(event, fieldName) {\n      let { files } = event.target;\n\n      let image = files[0] || null;\n\n      this.formData[fieldName] = image;\n      this.previewFile(image, fieldName);\n\n      // this.validateField(fieldName);\n    },\n    show() {\n      if (this.showmodel) {\n        this.showmodel = false;\n      } else {\n        this.showmodel = true;\n      }\n    },\n    previewFile(file, fieldName) {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.preview[fieldName] = reader.result;\n      };\n\n      if (file) {\n        reader.readAsDataURL(file);\n      } else {\n        this.preview[fieldName] = null;\n      }\n    },\n    async uploadDocuments() {\n      // let formIsValid = this.validateForm();\n      // if (!formIsValid) {\n      //   return;\n      // }\n\n      try {\n        let data = await API.formData(\"company/upload\", this.formData);\n\n        // console.log(data);\n\n        if (data.status === \"OK\") {\n          console.log(\"this.nextForm\", this.nextForm);\n          this.$router.push({ name: this.nextForm });\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.upload-documents {\n  .preview {\n    height: 200px;\n    text-align: center;\n\n    .preview-image {\n      max-height: 100%;\n    }\n  }\n}\n</style>\n"]}]}