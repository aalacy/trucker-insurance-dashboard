{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoOwnersItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoOwnersItem.vue","mtime":1563375518544},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validateField, validateForm, required } from '../validators.js';\nimport {mapState} from \"vuex\"\nexport default {\n  name: 'AccountInfoOwnersItem',\n  props: {\n    index: {\n      type: Number,\n      required: true\n    },\n    owner: {\n      type: Object,\n      required: false,\n      default() {\n        return {};\n      }\n    },\n    drivers:{\n       type:Array,\n      required:false\n    },\n    id:{\n      type:Boolean,\n      required:false\n    }\n  },\n    mounted(){\n      console.log(\"this.drivers\",this.drivers)\n      // console.log(this.id)\n     if(this.id){\n      this.formData.firstName = this.drivers[0].firstName;\n      this.formData.lastName = this.drivers[0].lastName;\n      [this.formData.dobD, this.formData.dobM, this.formData.dobY] =  this.drivers[0].dateOfBirth.split('/');     \n      this.formData.address = this.drivers[0].address;\n      this.formData.state = this.drivers[0].state;\n    }else{\n      console.log(\"no driver is ownr\")\n      this.formData.firstName = \"\";\n      this.formData.lastName = \"\";\n      this.formData.dobD=\"\";\n      this.formData.dobY =  \"\";\n      this.formData.dobM = \"\";\n      this.formData.address = \"\";\n      this.formData.state = \"\";\n    }\n     \n\n    if(localStorage.getItem(\"token\")){\n    this.$store.dispatch('loadData',localStorage.getItem(\"uuid\"))\n     let a = this.$store.state.getData.data[8]\n     let b = JSON.parse(a.val).owners[0]\n     console.log(\"b\",b)\n      this.formData.firstName = b.firstName;\n     this.formData.lastName = b.lastName;\n     [this.formData.dobD, this.formData.dobM, this.formData.dobY] = b.dateOfBirth.split('/');\n     this.formData.address = b.address\n     this.formData.state = b.state\n  }else{\n    \n  }\n  },\n  data() {\n    return {\n      formData: {\n        firstName: '',\n        lastName: '',\n        dobM: '',\n        dobD: '',\n        dobY: '',\n        address: '',\n        state: ''\n      },\n      rules: {\n        firstName: [required],\n        lastName: [required],\n        dobM: [required],\n        dobD: [required],\n        dobY: [required],\n        address: [required],\n        state: [required]\n      },\n      formErrors: {},\n      hints: {},\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    dateOfBirth() {\n      let { dobM: m, dobD: d, dobY: y } = this.formData;\n\n      if (m.length < 2) {\n        m = `0${m}`;\n      }\n\n      if (d.length < 2) {\n        d = `0${d}`;\n      }\n\n      return `${m}/${d}/${y}`;\n    },\n\n    ...mapState([\n    'data'\n  ])\n  },\n\n  created() {\n    let dobM = '',\n      dobD = '',\n      dobY = '';\n\n    if (this.owner.dateOfBirth) {\n      [dobM, dobD, dobY] = this.owner.dateOfBirth.split('/');\n    }\n\n    this.formData = {\n      ...this.formData,\n      ...this.owner,\n      dobM,\n      dobD,\n      dobY\n    };\n  },\n  methods: {\n    getFormData() {\n      let formData = {\n        ...this.formData,\n        dateOfBirth: this.dateOfBirth\n      };\n\n      delete formData.dobM;\n      delete formData.dobD;\n      delete formData.dobY;\n\n      return formData;\n    },\n    removeForm(index) {\n      this.$emit('remove-form', index);\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    }\n  }\n};\n",null]}