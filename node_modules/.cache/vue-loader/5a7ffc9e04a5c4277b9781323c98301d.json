{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoEldProvider.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoEldProvider.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport { validateField, validateForm, minLength } from '../validators.js';\nimport { API } from '../api.js';\n\nexport default {\n  name: 'AccountInfoEldProvider',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      formData: {\n        eldProvider: []\n      },\n      rules: {\n        eldProvider: [val => minLength(val, 1, 'Please select ELD Provider')]\n      },\n      formErrors: {},\n      hints: {},\n      userProviders: [],\n      userProviderName: '',\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    ...mapState('eld', ['eldProviders']),\n    allProviders() {\n      return this.eldProviders.concat(this.userProviders);\n    },\n    eldProviderMap() {\n      let map = {};\n      this.formData.eldProvider.forEach(val => (map[val] = true));\n      return map;\n    }\n  },\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n  methods: {\n    addProvider() {\n      if (\n        !this.userProviderName ||\n        this.eldProviderMap[this.userProviderName]\n      ) {\n        return;\n      }\n\n      this.userProviders.push({ value: this.userProviderName });\n      this.userProviderName = '';\n    },\n    selectProvider(providerValue) {\n      if (this.eldProviderMap[providerValue]) {\n        this.formData.eldProvider = this.formData.eldProvider.filter(\n          val => val !== providerValue\n        );\n        this.$emit('update-hint', '');\n      } else {\n        this.formData.eldProvider.push(providerValue);\n        this.$emit('update-hint', this.hints[providerValue]);\n      }\n\n      this.formErrors = {};\n    },\n    goPrevForm() {\n      this.$emit('update-hint', '');\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('update-hint', '');\n      this.$emit('go-to-form', this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { eldProvider: eldProviderTab } = data.data;\n          if (eldProviderTab) {\n            this.formData = {\n              ...this.formData,\n              ...eldProviderTab\n            };\n\n            let { eldProvider } = eldProviderTab;\n            this.addUserProviders(eldProvider);\n          }\n        } else if (data.status === 'ERROR') {\n          this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    addUserProviders(eldProvider) {\n      eldProvider.forEach(providerName => {\n        let providersIndex = this.eldProviders.findIndex(\n          p => p.value === providerName\n        );\n        if (providersIndex === -1) {\n          this.userProviders.push({ value: providerName });\n        }\n      });\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'eldProvider',\n          val: this.formData\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",null]}