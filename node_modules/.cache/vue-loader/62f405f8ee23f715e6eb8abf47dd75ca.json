{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoBusinessStructure.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoBusinessStructure.vue","mtime":1563188976168},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ModalLogin from \"./ModalLogin.vue\"\nimport {\n  validateField,\n  validateForm,\n  required,\n   minLength\n} from '../validators.js';\nimport { API } from '../api.js';\nimport {mapState} from \"vuex\"\nimport { constants } from 'fs';\n\nexport default {\n  name: 'AccountInfoBusinessStructure',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components:{\n    \"modelLogin\":ModalLogin\n  },\n  data() {\n    return {\n      showmodel:false,\n      save:true,\n      formData: {\n        businessStructure: '',\n        businessClassification: '',\n        MC: '',\n        businessType: ''\n      },\n      rules: {\n        businessStructure: [required],\n        businessClassification: [required],\n        businessType: [required]\n      },\n      formErrors: {},\n      hints: {\n        businessStructure: 'Some hint',\n        MC: 'Another hint'\n      },\n      businessStructures: [\n        'Sole Proprietorship',\n        'Partnership',\n        'Corporation',\n        'Limited Liability Company'\n      ],\n      \n      businessClassifications: [\n       'Private(Proerty)'\n       \n        // { name: 'Private (Property)', value: 'Private(Property)' }\n        // 'Private (Property)',\n      ],\n      businessTypes: [\n        'Trucker - General Freight',\n        'Dirt, Sand & Gravel (DSG) Hauler',\n        'Excavating, Landscaping or Building Contractor',\n        'Trucker - Refrigerated Goods',\n        'For-Hire Trucking – Additional Specialty Classes',\n        'Agricultural Hauling',\n        'Livestock Hauling',\n        'Farmer',\n        'Auto Hauler',\n        'Towing',\n        'Courier',\n        'Expediter',\n        'For-Hire Livery – Taxi, Black Car, Limousine, Sightseeing/Guided Tours',\n        'Not-For-Hire Livery – Social Services, Courtesy (Hotel) Shuttle, Religious Organization, Child/Adult Daycare'\n      ],\n      loading: false,\n      error: null\n    };\n  },\n \nmounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n     this.$store.dispatch('loadData',localStorage.getItem(\"uuid\"))\n    let a = this.$store.state.getData.data[0]\n    let b = JSON.parse(a.val)\n    console.log(\"ba\",b)\n    this.formData.businessStructure =  b.businessStructure;\n    this.formData.businessClassification = b.businessClassification;  \n    this.formData.businessType = b.businessType\n    this.formData.MC = b.MC\n    console.log(\"b.businessStructure\",b.businessStructure)\n    console.log(\"b.\",b)\n    console.log(\"b.businessClassification\",b);\n   }else{\n     this.save = true\n   }\n },\n computed:{\n...mapState([\n    'data'\n  ])\n} ,\n updated(){\nif(localStorage.getItem(\"showModal\") == \"true\")\n     {\n       this.showmodel = true;\n     }\n     else{\n       this.showmodel = false;\n     }\n },\n  created() {\n    this.$emit('update-progress', this.progress);\n    // this.loadCompany();\n  },\n  methods: {    \n     async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n      \n      this.loading = true;\n      this.error = null;\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoGroup\",\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n        if (data.status === \"OK\") {\n           if(this.showmodel){\n          this.showmodel = false;\n          \n        }else{\n          this.showmodel = true;\n        }\n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // this.showmodel = true;\n\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { businessStructure } = data.data;\n          if (businessStructure) {\n            this.formData = {\n              ...this.formData,\n              ...businessStructure\n            };\n          }\n        } else if (data.status === 'ERROR') {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'businessStructure',\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoBusinessStructure.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"AccountInfoBusinessStructure.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"business-structure-form container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Business Structure</h4>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.businessStructure\"\n                  :class=\"{ 'has-error': formErrors.businessStructure }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessStructure')\"\n                  @focus=\"onFocus('businessStructure')\"\n                  @blur=\"onBlur\"\n                >\n                  <option disabled value=\"\">Business Structure*</option>\n                  <option\n                    v-for=\"item in businessStructures\"\n                    :key=\"item\"\n                    :value=\"item\"\n                  >\n                    {{ item }}\n                  </option>\n                </select>\n\n                <div v-if=\"formErrors.businessStructure\" class=\"text-danger\">\n                  {{ formErrors.businessStructure }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.businessClassification\"\n                  :class=\"{ 'has-error': formErrors.businessClassification }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessClassification')\"\n                  @focus=\"onFocus('businessClassification')\"\n                  @blur=\"onBlur\"\n                >\n\n                  <option disabled value=\"\">Business Classification*</option>\n                  <option\n                    v-for=\"item in businessClassifications\"\n                    :key=\"item\"\n                    :value=\"item\"\n                  >\n                    {{ item }}\n                  </option>\n                </select>\n\n                <div\n                  v-if=\"formErrors.businessClassification\"\n                  class=\"text-danger\"\n                >\n                  {{ formErrors.businessClassification }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-9\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.MC\"\n                  :class=\"{ 'has-error': formErrors.MC }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"MC# (Optional)\"\n                  @focus=\"onFocus('MC')\"\n                  @blur=\"onBlur\"\n                />\n\n                <div v-if=\"formErrors.MC\" class=\"text-danger\">\n                  {{ formErrors.MC }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n\n          <h4 class=\"card-title form-sub-title\">Business Type</h4>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.businessType\"\n                  :class=\"{ 'has-error': formErrors.businessType }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessType')\"\n                  @focus=\"onFocus('businessType')\"\n                  @blur=\"onBlur\"\n                >\n                  <option disabled value=\"\">Business Type*</option>\n                  <option\n                    v-for=\"item in businessTypes\"\n                    :key=\"item\"\n                    :value=\"item\"\n                  >\n                    {{ item }}\n                  </option>\n                </select>\n\n                <div v-if=\"formErrors.businessType\" class=\"text-danger\">\n                  {{ formErrors.businessType }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">\n            {{ error }}\n          </div>  \n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default px-4 btn-block btn-border-radius-lb\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3\">\n                  Business Info\n                </div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main btn-block btn-border-radius-rb\"\n                @click=\"goNextForm\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 text-white\">\n                  Cargo Group\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n    <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n      <span class=\"save-hover\">Save & Continue</span>\n    </div>\n    <div class=\" \" v-if=\"showmodel\">\n      <modelLogin/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ModalLogin from \"./ModalLogin.vue\"\nimport {\n  validateField,\n  validateForm,\n  required,\n   minLength\n} from '../validators.js';\nimport { API } from '../api.js';\nimport {mapState} from \"vuex\"\nimport { constants } from 'fs';\n\nexport default {\n  name: 'AccountInfoBusinessStructure',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components:{\n    \"modelLogin\":ModalLogin\n  },\n  data() {\n    return {\n      showmodel:false,\n      save:true,\n      formData: {\n        businessStructure: '',\n        businessClassification: '',\n        MC: '',\n        businessType: ''\n      },\n      rules: {\n        businessStructure: [required],\n        businessClassification: [required],\n        businessType: [required]\n      },\n      formErrors: {},\n      hints: {\n        businessStructure: 'Some hint',\n        MC: 'Another hint'\n      },\n      businessStructures: [\n        'Sole Proprietorship',\n        'Partnership',\n        'Corporation',\n        'Limited Liability Company'\n      ],\n      \n      businessClassifications: [\n       'Private(Proerty)'\n       \n        // { name: 'Private (Property)', value: 'Private(Property)' }\n        // 'Private (Property)',\n      ],\n      businessTypes: [\n        'Trucker - General Freight',\n        'Dirt, Sand & Gravel (DSG) Hauler',\n        'Excavating, Landscaping or Building Contractor',\n        'Trucker - Refrigerated Goods',\n        'For-Hire Trucking – Additional Specialty Classes',\n        'Agricultural Hauling',\n        'Livestock Hauling',\n        'Farmer',\n        'Auto Hauler',\n        'Towing',\n        'Courier',\n        'Expediter',\n        'For-Hire Livery – Taxi, Black Car, Limousine, Sightseeing/Guided Tours',\n        'Not-For-Hire Livery – Social Services, Courtesy (Hotel) Shuttle, Religious Organization, Child/Adult Daycare'\n      ],\n      loading: false,\n      error: null\n    };\n  },\n \nmounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n     this.$store.dispatch('loadData',localStorage.getItem(\"uuid\"))\n    let a = this.$store.state.getData.data[0]\n    let b = JSON.parse(a.val)\n    console.log(\"ba\",b)\n    this.formData.businessStructure =  b.businessStructure;\n    this.formData.businessClassification = b.businessClassification;  \n    this.formData.businessType = b.businessType\n    this.formData.MC = b.MC\n    console.log(\"b.businessStructure\",b.businessStructure)\n    console.log(\"b.\",b)\n    console.log(\"b.businessClassification\",b);\n   }else{\n     this.save = true\n   }\n },\n computed:{\n...mapState([\n    'data'\n  ])\n} ,\n updated(){\nif(localStorage.getItem(\"showModal\") == \"true\")\n     {\n       this.showmodel = true;\n     }\n     else{\n       this.showmodel = false;\n     }\n },\n  created() {\n    this.$emit('update-progress', this.progress);\n    // this.loadCompany();\n  },\n  methods: {    \n     async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n      \n      this.loading = true;\n      this.error = null;\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoGroup\",\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n        if (data.status === \"OK\") {\n           if(this.showmodel){\n          this.showmodel = false;\n          \n        }else{\n          this.showmodel = true;\n        }\n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // this.showmodel = true;\n\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { businessStructure } = data.data;\n          if (businessStructure) {\n            this.formData = {\n              ...this.formData,\n              ...businessStructure\n            };\n          }\n        } else if (data.status === 'ERROR') {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'businessStructure',\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n"]}]}