{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoVehiclesAndTrailersItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoVehiclesAndTrailersItem.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  validateField,\n  validateForm,\n  required,\n  requiredWith\n} from '../validators.js';\nimport { API } from '../api.js';\n\nexport default {\n  name: 'AccountInfoVehiclesAndTrailersItem',\n  props: {\n    index: {\n      type: Number,\n      required: true\n    },\n    vehicle: {\n      type: Object,\n      required: false,\n      default() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      formData: {\n        VIN: '',\n        year: '',\n        make: '',\n        model: '',\n        vehicleType: '',\n        zipCode: '',\n        radiusOfTravel: 50,\n        coverage: false,\n        currentValue: '',\n        deductible: ''\n      },\n      vehicleImage:{\n        img1:\"\",\n        img2:\"\",\n        img3:\"\",\n        img4:\"\",\n        img5:''\n      },\n      rules: {\n        VIN: [required],\n        year: [required],\n        make: [required],\n        model: [required],\n        vehicleType: [required],\n        zipCode: [required],\n        currentValue: [val => requiredWith(val, this.formData.coverage)],\n        deductible: [val => requiredWith(val, this.formData.coverage)]\n      },\n      formErrors: {},\n      hints: {\n        VIN: 'Some asshint'\n      },\n      deductibles: [\n        { name: '$ 500', value: '500' },\n        { name: '$ 1000', value: '1000' },\n        { name: '$ 2500', value: '2500' },\n        { name: '$ 5000', value: '5000' }\n      ],\n      vehicleTypes: [\n        'Auto Hauler',\n        'Bottom Dump Trailer',\n        'Bulk Commodity Trailer',\n        'Concession Trailer',\n        'Dry Freight Trailer',\n        'Dump Body Trailer / Transfer Box',\n        'Flatbed Trailer',\n        'Gooseneck Trailer',\n        'Horse Trailer',\n        'Livestock Trailer',\n        'Logging Trailer',\n        'Low-Boy Trailer',\n        'Pole Trailer',\n        'Refrigerated Dry Freight Trailer',\n        'Tank Trailer',\n        'Tilt Trailer',\n        'Travel Trailer',\n        'Utility Trailer',\n        'Bus',\n        'Car',\n        'Cargo Van',\n        'Hearse',\n        'Limousine',\n        'Mini Van',\n        'Motor Home',\n        'Passenger Van',\n        'Pickup Truck',\n        'Sport Utility Vehicle',\n        'Truck',\n        'Emergency Vehicle',\n        'Military Vehicle'\n      ],\n      radiuses: [0, 100, 200, 300, 500, 1000, 'Unlimited'],\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    currentValueOfTransport: {\n      get() {\n        return `$ ${this.formData.currentValue}`;\n      },\n      set(val) {\n        let price = val\n          // replace dollars and spaces to empty string\n          .replace(/[$\\s]/g, '')\n          // replace all commas to dots\n          .replace(/,/g, '.');\n        this.formData.currentValue = price;\n      }\n    },\n    radiusOfTravel: {\n      get() {\n        let index = this.radiuses.findIndex(\n          radius => radius == this.formData.radiusOfTravel\n        );\n\n        return index > -1 ? index : 1;\n      },\n      set(index) {\n        this.formData.radiusOfTravel = this.radiuses[index];\n      }\n    }\n  },\n  watch: {\n    'formData.coverage'(val) {\n      if (!val) {\n        this.formData.currentValue = '';\n        this.formData.deductible = '';\n      }\n    }\n  },\n  created() {\n    this.formData = {\n      ...this.formData,\n      ...this.vehicle\n    };\n\n    if (!this.formData.VIN) {\n      this.formData.VIN = process.env.VUE_APP_TEST_VIN || '';\n    }\n  },\n  methods: {\n    getFormData() {\n      return this.formData;\n    },\n    removeForm(index) {\n      this.$emit('remove-form', index);\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async getVinData() {\n      if (!this.formData.VIN) {\n        return;\n      }\n\n      this.loading = true;\n\n      try {\n        let data = await API.get('company/vin', {\n          vin: this.formData.VIN\n        });\n\n        this.formData = {\n          ...this.formData,\n          ...data.data\n        };\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",null]}