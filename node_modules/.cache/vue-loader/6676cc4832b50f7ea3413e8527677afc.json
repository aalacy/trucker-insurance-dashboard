{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoDriversItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoDriversItem.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validateField, validateForm, required } from '../validators.js';\n\nexport default {\n  name: 'AccountInfoDriversItem',\n  props: {\n    index: {\n      type: Number,\n      required: true\n    },\n    driver: {\n      type: Object,\n      required: false,\n      default() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      formData: {\n        firstName: '',\n        lastName: '',\n        dobM: '',\n        dobD: '',\n        dobY: '',\n        licenseNumber: '',\n        state: '',\n        dohM: '',\n        dohD: '',\n        dohY: '',\n        yearsOfExperience: '',\n        CDL:''\n      },\n      rules: {\n        firstName: [required],\n        lastName: [required],\n        dobM: [required],\n        dobD: [required],\n        dobY: [required],\n        licenseNumber: [required],\n        state: [required],\n        dohM: [required],\n        dohD: [required],\n        dohY: [required],\n        yearsOfExperience: [required]\n      },\n      formErrors: {},\n      hints: {},\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    dateOfBirth() {\n      let { dobM: m, dobD: d, dobY: y } = this.formData;\n\n      if (m.length < 2) {\n        m = `0${m}`;\n      }\n\n      if (d.length < 2) {\n        d = `0${d}`;\n      }\n\n      return `${m}/${d}/${y}`;\n    },\n    dateOfHire() {\n      let { dohM: m, dohD: d, dohY: y } = this.formData;\n\n      if (m.length < 2) {\n        m = `0${m}`;\n      }\n\n      if (d.length < 2) {\n        d = `0${d}`;\n      }\n\n      return `${m}/${d}/${y}`;\n    }\n  },\n  created() {\n    let dobM = '',\n      dobD = '',\n      dobY = '';\n    let dohM = '',\n      dohD = '',\n      dohY = '';\n\n    if (this.driver.dateOfBirth) {\n      [dobM, dobD, dobY] = this.driver.dateOfBirth.split('/');\n    }\n\n    if (this.driver.dateOfHire) {\n      [dohM, dohD, dohY] = this.driver.dateOfHire.split('/');\n    }\n\n    this.formData = {\n      ...this.formData,\n      ...this.driver,\n      dobM,\n      dobD,\n      dobY,\n      dohM,\n      dohD,\n      dohY\n    };\n  },\n  methods: {\n    getFormData() {\n      let formData = {\n        ...this.formData,\n        dateOfBirth: this.dateOfBirth,\n        dateOfHire: this.dateOfHire\n      };\n\n      delete formData.dobM;\n      delete formData.dobD;\n      delete formData.dobY;\n      delete formData.dohM;\n      delete formData.dohD;\n      delete formData.dohY;\n\n      return formData;\n    },\n    removeForm(index) {\n      this.$emit('remove-form', index);\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    }\n  }\n};\n",null]}