{"remainingRequest":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoPersonalInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoPersonalInfo.vue","mtime":1571770663139},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validateField, validateForm, required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ChatBoat from \"./ChatBoat.vue\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState, mutations } from \"vuex\";\nimport { isMobile } from \"mobile-device-detect\";\nimport axios from \"axios\";\nimport { setTimeout } from \"timers\";\n\nexport default {\n  name: \"AccountInfoPersonalInfo\",\n\n  components: {\n    \"chat-boat\": ChatBoat,\n    modelLogin: ModalLogin,\n    \n  },\n  props: {\n    nextForm: {\n      type: String,\n      required: true\n    },\n    prevForm:{\n      type:String,\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  mounted() {\n    this.mobile = isMobile ? true : false;\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios\n        .get(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n            localStorage.getItem(\"userId\")\n        )\n        .then(coins => {\n          this.userData = coins.data.uuid;\n          localStorage.setItem(\"uuid\",coins.data.uuid);\n          \n        });\n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.userData).then(res => {\n          let len = this.$store.state.getData.data;\n          for (let k = 0; k <= len.length; k++) {\n            if (this.$store.state.getData.data[k].key == \"personalInfo\") {\n              let a = this.$store.state.getData.data[k];\n              let b = JSON.parse(a.val);\n              this.formData.address = b.address;\n              this.formData.city = b.city;\n              this.formData.zip = b.zip;\n              this.formData.USDOT = b.USDOT;\n              this.formData.company = b.company;\n              this.formData.phone = b.phone;\n              this.formData.state = b.state;\n              this.formData.address1 = b.address1;\n              this.formData.city1 = b.city1;\n              this.formData.zip1 = b.zip1;\n              this.formData.state1 = b.state1;\n            }\n          }\n        });\n\n        \n      }, 1000);\n      this.formData.USDOT = localStorage.getItem(\"usdot\");\n      this.formData.company = localStorage.getItem(\"company\");\n      this.formData.phone = localStorage.getItem(\"Phone\");\n      let fullAddress = localStorage.getItem([\"Mailing address\"]);\n\n      let MailingAddress = this.formatAddress(\n        localStorage.getItem([\"Mailing address\"])\n      );\n      let PhysicalAddress = this.formatAddress(\n        localStorage.getItem([\"Physical address\"])\n      );\n      this.formData.address = MailingAddress[3].trim().replace(\",\", \"\");\n      this.formData.city = MailingAddress[1].trim().replace(\",\", \"\");\n      this.formData.state = MailingAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip = MailingAddress[0].trim().replace(\",\", \"\");\n\n      this.formData.address1 = PhysicalAddress[3].trim().replace(\",\", \"\");\n      this.formData.city1 = PhysicalAddress[1].trim().replace(\",\", \"\");\n      this.formData.state1 = PhysicalAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip1 = PhysicalAddress[0].trim().replace(\",\", \"\");\n    } else {\n      this.save = true;\n      \n      this.formData.USDOT = localStorage.getItem(\"usdot\");\n      this.formData.company = localStorage.getItem(\"company\");\n      this.formData.phone = localStorage.getItem(\"Phone\");\n      let fullAddress = localStorage.getItem([\"Mailing address\"]);\n      \n\n\n      let MailingAddress = this.formatAddress(\n        localStorage.getItem([\"Mailing address\"])\n      );\n      this.formData.address = MailingAddress[3].trim().replace(\",\", \"\");\n      this.formData.state = MailingAddress[1].trim().replace(\",\", \"\");\n      this.formData.city = MailingAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip = MailingAddress[0].trim().replace(\",\", \"\");\n      let PhysicalAddress = this.formatAddress(\n        localStorage.getItem([\"Physical address\"])\n      );\n      this.formData.address1 = PhysicalAddress[3].trim().replace(\",\", \"\");\n      this.formData.state1 = PhysicalAddress[1].trim().replace(\",\", \"\");\n      this.formData.city1 = PhysicalAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip1 = PhysicalAddress[0].trim().replace(\",\", \"\");\n\n\n      setTimeout(() => {\n        this.$store\n          .dispatch(\"loadData\", this.uuid)\n          .then(res => {\n            let len = this.$store.state.getData.data;\n            for (let i = 0; i <= len.length; i++) {\n              if (this.$store.state.getData.data[i].key == \"personalInfo\") {\n                let a = this.$store.state.getData.data[i];\n                let b = JSON.parse(a.val);\n                this.formData.address = b.address;\n                this.formData.city = b.city;\n                this.formData.zip = b.zip;\n                this.formData.USDOT = b.USDOT;\n                this.formData.company = b.company;\n                this.formData.phone = b.phone;\n                this.formData.state = b.state;\n                this.formData.address1 = b.address1;\n                this.formData.city1 = b.city1;\n                this.formData.zip1 = b.zip1;\n                this.formData.state1 = b.state1;\n              }\n            }\n          })\n          .catch(() => {});\n      }, 1000);\n    }\n    \n  },\n  beforeMount() {\n    // localStorage.setItem(\"uuid\", null);\n  },\n  computed: {\n    ...mapState([\"data\"])\n  },\n\n  data() {\n    return {\n      checked: true,\n      showmodel: false,\n      final_uuid:\"\",\n      save: true,\n      mobile:false,\n      uuid: \"\",\n      // newQuote: false,\n      userData: \"\",\n      formData: {\n        // firstName: \"\",\n        // lastName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n        USDOT: \"\",\n        company: \"\",\n        phone: \"\",\n        address1: \"\",\n        city1: \"\",\n        state1: \"\",\n        zip1: \"\"\n      },\n      rules: {\n        // firstName: [required],\n        // lastName: [required],\n        address: [required],\n        city: [required],\n        state: [required],\n        zip: [required],\n        address1: [required],\n        city1: [required],\n        state1: [required],\n        zip1: [required]\n      },\n      formErrors: {},\n      hints: {\n        address: \"Please enter Mailing Address\",\n        state: \"Please enter State of Mailing Address\",\n        city: \"Please enter State of Mailing Address\",\n        zip: \"Please enter Zipcode of Mailing Address\",\n        address1: \"Please enter Garaging Address\",\n        city1: \"Please enter State of Garaging Address\",\n        state1: \"Please enter State of Garaging Address\",\n        zip1: \"Please enter Zipcode of Garaging Address\"\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    // localStorage.setItem(\"uuid\", null);\n\n    this.loadCompany();\n  },\n  updated() {\n    // if (localStorage.getItem(\"showModal\") == \"true\") {\n    //   this.showmodel = true;\n    // } else {\n    //   this.showmodel = false;\n    // }\n  },\n  methods: {\n    \n    changeData() {\n      if (this.checked) {\n        this.formData.address1 = this.formData.address;\n        this.formData.city1 = this.formData.city;\n        this.formData.state1 = this.formData.state;\n        this.formData.zip1 = this.formData.zip;\n      } else {\n        this.formData.address1 = \"\";\n        this.formData.city1 = \"\";\n        this.formData.state1 = \"\";\n        this.formData.zip1 = \"\";\n      }\n    },\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n  \n        this.show();\n        if (willDelete) {\n          \n          this.$router.push({ name: \"AccountInfoPersonalInfo\" });\n          \n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n    var temp_uuid;\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n  \n      } else {\n        temp_uuid = this.uuid;\n  \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n  \n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n            if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n           }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = false;\n      this.error = null;\n      try {\n        let data = await API.get(\"company/current\");\n        this.uuid = data.data.b;\n  \n        if (data.status === \"OK\") {\n          // localStorage.setItem(\"uuid\",data.data.b)\n          let { personalInfo } = data.data;\n          if (personalInfo) {\n            this.formData = {\n              ...this.formData,\n              ...personalInfo\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: \"Home\" });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n\n        // }, 5000);\n      }\n    },\n    formatAddress(fullAddress) {\n      let splitAddress = fullAddress.split(\" \");\n      splitAddress.reverse();\n      let cnt = 0,\n        val = [],\n        index = 0;\n      while (cnt != 4 && splitAddress.length > index) {\n        if (splitAddress[index].trim() != \"\") {\n          if (cnt < 2) {\n            val[cnt++] = splitAddress[index];\n          } else {\n            val[cnt] = \"\";\n            do {\n              val[cnt] = splitAddress[index] + \" \" + val[cnt];\n            } while (\n              splitAddress[index++].trim() != \"\" &&\n              splitAddress.length > index\n            );\n            cnt++;\n          }\n        }\n        index++;\n      }\n      return val;\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if(localStorage.getItem('token')){\n        \n          this.final_uuid = this.userData;\n    \n      }else{\n        this.final_uuid = this.uuid;\n  \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid\n        });\n  \n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          \n          this.error = data.messages[0] || data.data;\n        }\n\n        // second API\n        // axios.post\n        axios\n          .post(\n            \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\" +\n              this.uuid +\n              \"&user_id=\" +\n              localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n      \n          });\n        // .catch(err => this.$swal(\"Opps!\",err, \"error\"))\n        // .finally(() \n      } catch (err) {\n        // console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoPersonalInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AccountInfoPersonalInfo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class>\n    <form class=\"custom_form\" @submit.prevent=\"updateCompany\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Business Information</h4>\n          <div class=\"col-md-6 col-lg-12 py-3 row\">\n              <h6 class=\"pt-2\">Mailing Address</h6>\n            </div>\n          <div class=\"row\">\n            \n            <div class=\"col\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.address\"\n                  :class=\"{ 'has-error': formErrors.address }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Street Address*\"\n                  required\n                  @change=\"validateField('address')\"\n                  @focus=\"onFocus('address')\"\n                  @blur=\"onBlur\"\n                >\n                <div v-if=\"formErrors.address\" class=\"text-danger\">{{ formErrors.address }}</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-12 col-md-6 col-lg-6 \">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.city\"\n                  :class=\"{ 'has-error': formErrors.city }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"City*\"\n                  required\n                  @change=\"validateField('city')\"\n                  @focus=\"onFocus('city')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.city\" class=\"text-danger\">{{ formErrors.city }}</div>\n              </div>\n            </div>\n\n            <div class=\"col-12 col-md-6 col-lg-6 \">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.state\"\n                  :class=\"{ 'has-error': formErrors.state }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"State*\"\n                  required\n                  @change=\"validateField('state')\"\n                  @focus=\"onFocus('state')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.state\" class=\"text-danger\">{{ formErrors.state }}</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-12 col-md-6 col-lg-6 \">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.zip\"\n                  :class=\"{ 'has-error': formErrors.zip }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Zip Code*\"\n                  required\n                  minlength=\"5\"\n                  @change=\"validateField('zip')\"\n                  @focus=\"onFocus('zip')\"\n                  @blur=\"onBlur\"\n                >\n                {{data}}\n                <div v-if=\"formErrors.zip\" class=\"text-danger\">{{ formErrors.zip }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-12 col-md-6 col-lg-6 \">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.USDOT\"\n                  :class=\"{ 'has-error': formErrors.USDOT }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"USDOT\"\n                  @focus=\"onFocus('USDOT')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.USDOT\" class=\"text-danger\">{{ formErrors.USDOT }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.company\"\n                  :class=\"{ 'has-error': formErrors.company }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Company name\"\n                  @focus=\"onFocus('Company name')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.company\" class=\"text-danger\">{{ formErrors.company }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-12 col-md-6 col-lg-6 \">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.phone\"\n                  :class=\"{ 'has-error': formErrors.phone }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"Phone no\"\n                  @focus=\"onFocus('Phone number')\"\n                  @blur=\"onBlur\"\n                >\n\n                <div v-if=\"formErrors.phone\" class=\"text-danger\">{{ formErrors.phone }}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-12 col-sm-6 col-lg-12\">\n            <input type=\"checkbox\" id=\"checkbox\" class = \"mt-1\" v-model=\"checked\" v-on:change=\"changeData()\">\n            <label for=\"checkbox\" class=\"st-padding d-inline\">Is Garaging address the same location?</label>\n          </div>\n          <div>\n            <div class=\"row\">\n              <div class=\"col-md-6 col-lg-12 py-3\">\n                <h6 class=\"pt-2\">Garaging Address</h6>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col\">\n                <div class=\"form-group\">\n                  <input\n                    v-model=\"formData.address1\"\n                    :class=\"{ 'has-error': formErrors.address1 }\"\n                    type=\"text\"\n                    class=\"lt-input\"\n                    placeholder=\"Garaging Address*\"\n                    required\n                    @change=\"validateField('address1')\"\n                    @focus=\"onFocus('address1')\"\n                    @blur=\"onBlur\"\n                  >\n\n                  <div v-if=\"formErrors.address1\" class=\"text-danger\">{{ formErrors.address1 }}</div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-12 col-md-6 col-lg-6 \">\n                <div class=\"form-group\">\n                  <input\n                    v-model=\"formData.city1\"\n                    :class=\"{ 'has-error': formErrors.city1 }\"\n                    type=\"text\"\n                    class=\"lt-input\"\n                    placeholder=\"City*\"\n                    required\n                    @change=\"validateField('city1')\"\n                    @focus=\"onFocus('city1')\"\n                    @blur=\"onBlur\"\n                  >\n                  <div v-if=\"formErrors.city1\" class=\"text-danger\">{{ formErrors.city1 }}</div>\n                </div>\n              </div>\n\n              <div class=\"col-12 col-md-6 col-lg-6 \">\n                <div class=\"form-group\">\n                  <input\n                    v-model=\"formData.state1\"\n                    :class=\"{ 'has-error': formErrors.state1 }\"\n                    type=\"text\"\n                    class=\"lt-input\"\n                    placeholder=\"State*\"\n                    required\n                    @change=\"validateField('state1')\"\n                    @focus=\"onFocus('state1')\"\n                    @blur=\"onBlur\"\n                  >\n                  <div v-if=\"formErrors.city1\" class=\"text-danger\">{{ formErrors.state1 }}</div>\n                </div>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-12 col-md-6 col-lg-6 \">\n                <div class=\"form-group\">\n                  <input\n                    v-model=\"formData.zip1\"\n                    :class=\"{ 'has-error': formErrors.zip1 }\"\n                    type=\"text\"\n                    class=\"lt-input\"\n                    placeholder=\"Zip Code*\"\n                    required\n                    minlength=\"5\"\n                    @change=\"validateField('zip1')\"\n                    @focus=\"onFocus('zip1')\"\n                    @blur=\"onBlur\"\n                  >\n\n                  <div v-if=\"formErrors.zip\" class=\"text-danger\">{{ formErrors.zip1 }}</div>\n                </div>\n              </div>\n            </div>\n            <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n          </div>\n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div v-if=\"mobile\" class=\"col-6 p-0\">\n            \n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button px-4 text-center lt-button-default btn-block btn-border-radius-lb  d-flex align-itmes-center justify-content-center h-100\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title  px-4 text-center d-inline pl-2 mob-2 button-icon color-bg\">Upload Documents</div>\n              </button>\n            \n            </div>\n              <div v-else class=\"w-100\">\n            <div class=\"lt-button px-4 text-center lt-button-default btn-block btn-border-radius-lb \">\n              <!-- <font-awesome-icon icon=\"caret-left\" size=\"2x\" class=\"m-1\"></font-awesome-icon> -->\n              Previous\n              \n            </div>\n            </div>\n            <div class=\"col-6 p-0\">\n              \n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main btn-block btn-border-radius-rb p-1 button-icon d-flex align-itmes-center justify-content-center h-100\"\n              >\n              \n                <span class=\"arrow-button \">{{ loading ? 'Loading...' : 'Next' }}</span>Business Structure\n                <!-- <font-awesome-icon icon=\"caret-right\" size=\"2x\" class=\"m-1 fill-white\"></font-awesome-icon> -->\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n        <span class=\"save-hover\">Save & Continue</span>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"newQuoteReq\" v-else>\n        <span class=\"save-hover\">Save Changes</span>\n      </div>\n\n      <div v-if=\"showmodel\">\n        <modelLogin/>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { validateField, validateForm, required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ChatBoat from \"./ChatBoat.vue\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState, mutations } from \"vuex\";\nimport { isMobile } from \"mobile-device-detect\";\nimport axios from \"axios\";\nimport { setTimeout } from \"timers\";\n\nexport default {\n  name: \"AccountInfoPersonalInfo\",\n\n  components: {\n    \"chat-boat\": ChatBoat,\n    modelLogin: ModalLogin,\n    \n  },\n  props: {\n    nextForm: {\n      type: String,\n      required: true\n    },\n    prevForm:{\n      type:String,\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  mounted() {\n    this.mobile = isMobile ? true : false;\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios\n        .get(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n            localStorage.getItem(\"userId\")\n        )\n        .then(coins => {\n          this.userData = coins.data.uuid;\n          localStorage.setItem(\"uuid\",coins.data.uuid);\n          \n        });\n      setTimeout(() => {\n        this.$store.dispatch(\"loadData\", this.userData).then(res => {\n          let len = this.$store.state.getData.data;\n          for (let k = 0; k <= len.length; k++) {\n            if (this.$store.state.getData.data[k].key == \"personalInfo\") {\n              let a = this.$store.state.getData.data[k];\n              let b = JSON.parse(a.val);\n              this.formData.address = b.address;\n              this.formData.city = b.city;\n              this.formData.zip = b.zip;\n              this.formData.USDOT = b.USDOT;\n              this.formData.company = b.company;\n              this.formData.phone = b.phone;\n              this.formData.state = b.state;\n              this.formData.address1 = b.address1;\n              this.formData.city1 = b.city1;\n              this.formData.zip1 = b.zip1;\n              this.formData.state1 = b.state1;\n            }\n          }\n        });\n\n        \n      }, 1000);\n      this.formData.USDOT = localStorage.getItem(\"usdot\");\n      this.formData.company = localStorage.getItem(\"company\");\n      this.formData.phone = localStorage.getItem(\"Phone\");\n      let fullAddress = localStorage.getItem([\"Mailing address\"]);\n\n      let MailingAddress = this.formatAddress(\n        localStorage.getItem([\"Mailing address\"])\n      );\n      let PhysicalAddress = this.formatAddress(\n        localStorage.getItem([\"Physical address\"])\n      );\n      this.formData.address = MailingAddress[3].trim().replace(\",\", \"\");\n      this.formData.city = MailingAddress[1].trim().replace(\",\", \"\");\n      this.formData.state = MailingAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip = MailingAddress[0].trim().replace(\",\", \"\");\n\n      this.formData.address1 = PhysicalAddress[3].trim().replace(\",\", \"\");\n      this.formData.city1 = PhysicalAddress[1].trim().replace(\",\", \"\");\n      this.formData.state1 = PhysicalAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip1 = PhysicalAddress[0].trim().replace(\",\", \"\");\n    } else {\n      this.save = true;\n      \n      this.formData.USDOT = localStorage.getItem(\"usdot\");\n      this.formData.company = localStorage.getItem(\"company\");\n      this.formData.phone = localStorage.getItem(\"Phone\");\n      let fullAddress = localStorage.getItem([\"Mailing address\"]);\n      \n\n\n      let MailingAddress = this.formatAddress(\n        localStorage.getItem([\"Mailing address\"])\n      );\n      this.formData.address = MailingAddress[3].trim().replace(\",\", \"\");\n      this.formData.state = MailingAddress[1].trim().replace(\",\", \"\");\n      this.formData.city = MailingAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip = MailingAddress[0].trim().replace(\",\", \"\");\n      let PhysicalAddress = this.formatAddress(\n        localStorage.getItem([\"Physical address\"])\n      );\n      this.formData.address1 = PhysicalAddress[3].trim().replace(\",\", \"\");\n      this.formData.state1 = PhysicalAddress[1].trim().replace(\",\", \"\");\n      this.formData.city1 = PhysicalAddress[2].trim().replace(\",\", \"\");\n      this.formData.zip1 = PhysicalAddress[0].trim().replace(\",\", \"\");\n\n\n      setTimeout(() => {\n        this.$store\n          .dispatch(\"loadData\", this.uuid)\n          .then(res => {\n            let len = this.$store.state.getData.data;\n            for (let i = 0; i <= len.length; i++) {\n              if (this.$store.state.getData.data[i].key == \"personalInfo\") {\n                let a = this.$store.state.getData.data[i];\n                let b = JSON.parse(a.val);\n                this.formData.address = b.address;\n                this.formData.city = b.city;\n                this.formData.zip = b.zip;\n                this.formData.USDOT = b.USDOT;\n                this.formData.company = b.company;\n                this.formData.phone = b.phone;\n                this.formData.state = b.state;\n                this.formData.address1 = b.address1;\n                this.formData.city1 = b.city1;\n                this.formData.zip1 = b.zip1;\n                this.formData.state1 = b.state1;\n              }\n            }\n          })\n          .catch(() => {});\n      }, 1000);\n    }\n    \n  },\n  beforeMount() {\n    // localStorage.setItem(\"uuid\", null);\n  },\n  computed: {\n    ...mapState([\"data\"])\n  },\n\n  data() {\n    return {\n      checked: true,\n      showmodel: false,\n      final_uuid:\"\",\n      save: true,\n      mobile:false,\n      uuid: \"\",\n      // newQuote: false,\n      userData: \"\",\n      formData: {\n        // firstName: \"\",\n        // lastName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n        USDOT: \"\",\n        company: \"\",\n        phone: \"\",\n        address1: \"\",\n        city1: \"\",\n        state1: \"\",\n        zip1: \"\"\n      },\n      rules: {\n        // firstName: [required],\n        // lastName: [required],\n        address: [required],\n        city: [required],\n        state: [required],\n        zip: [required],\n        address1: [required],\n        city1: [required],\n        state1: [required],\n        zip1: [required]\n      },\n      formErrors: {},\n      hints: {\n        address: \"Please enter Mailing Address\",\n        state: \"Please enter State of Mailing Address\",\n        city: \"Please enter State of Mailing Address\",\n        zip: \"Please enter Zipcode of Mailing Address\",\n        address1: \"Please enter Garaging Address\",\n        city1: \"Please enter State of Garaging Address\",\n        state1: \"Please enter State of Garaging Address\",\n        zip1: \"Please enter Zipcode of Garaging Address\"\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    // localStorage.setItem(\"uuid\", null);\n\n    this.loadCompany();\n  },\n  updated() {\n    // if (localStorage.getItem(\"showModal\") == \"true\") {\n    //   this.showmodel = true;\n    // } else {\n    //   this.showmodel = false;\n    // }\n  },\n  methods: {\n    \n    changeData() {\n      if (this.checked) {\n        this.formData.address1 = this.formData.address;\n        this.formData.city1 = this.formData.city;\n        this.formData.state1 = this.formData.state;\n        this.formData.zip1 = this.formData.zip;\n      } else {\n        this.formData.address1 = \"\";\n        this.formData.city1 = \"\";\n        this.formData.state1 = \"\";\n        this.formData.zip1 = \"\";\n      }\n    },\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n  \n        this.show();\n        if (willDelete) {\n          \n          this.$router.push({ name: \"AccountInfoPersonalInfo\" });\n          \n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n    var temp_uuid;\n      this.loading = true;\n      this.error = null;\n      if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n  \n      } else {\n        temp_uuid = this.uuid;\n  \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n  \n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n            if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n           }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = false;\n      this.error = null;\n      try {\n        let data = await API.get(\"company/current\");\n        this.uuid = data.data.b;\n  \n        if (data.status === \"OK\") {\n          // localStorage.setItem(\"uuid\",data.data.b)\n          let { personalInfo } = data.data;\n          if (personalInfo) {\n            this.formData = {\n              ...this.formData,\n              ...personalInfo\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: \"Home\" });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n\n        // }, 5000);\n      }\n    },\n    formatAddress(fullAddress) {\n      let splitAddress = fullAddress.split(\" \");\n      splitAddress.reverse();\n      let cnt = 0,\n        val = [],\n        index = 0;\n      while (cnt != 4 && splitAddress.length > index) {\n        if (splitAddress[index].trim() != \"\") {\n          if (cnt < 2) {\n            val[cnt++] = splitAddress[index];\n          } else {\n            val[cnt] = \"\";\n            do {\n              val[cnt] = splitAddress[index] + \" \" + val[cnt];\n            } while (\n              splitAddress[index++].trim() != \"\" &&\n              splitAddress.length > index\n            );\n            cnt++;\n          }\n        }\n        index++;\n      }\n      return val;\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n      if(localStorage.getItem('token')){\n        \n          this.final_uuid = this.userData;\n    \n      }else{\n        this.final_uuid = this.uuid;\n  \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"personalInfo\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid\n        });\n  \n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          \n          this.error = data.messages[0] || data.data;\n        }\n\n        // second API\n        // axios.post\n        axios\n          .post(\n            \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\" +\n              this.uuid +\n              \"&user_id=\" +\n              localStorage.getItem(\"userId\")\n          )\n          .then(res => {\n      \n          });\n        // .catch(err => this.$swal(\"Opps!\",err, \"error\"))\n        // .finally(() \n      } catch (err) {\n        // console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.color-bg{\n  color:#6f6f6f\n}\n.st-padding {\n  // color: black;\n  padding-left: 10px;\n  font-weight: bold;\n}\n</style>\n"]}]}