{"remainingRequest":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoQuestions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoQuestions.vue","mtime":1571770663139},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\nimport axios from \"axios\";\nimport { setTimeout } from 'timers';\n\nexport default {\n  name: \"AccountInfoQuestions\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin,\n\n  },\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios\n      .get(\n        \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n          localStorage.getItem(\"userId\")\n      )\n      .then(coins => {\n        this.userData = coins.data.uuid;\n      });\n      setTimeout(()=>{\n this.$store\n        .dispatch(\"loadData\", this.userData)\n        .then(() => {\n          let len = this.$store.state.getData.data;\n          for(let i=0;i<=len.length;i++){\n            if(this.$store.state.getData.data[i].key==\"questions\"){\n          let a = this.$store.state.getData.data[i];\n          let b = JSON.parse(a.val);\n                   \n\n          this.formData.question1 = b.question1;\n            }\n          }\n          \n          //  this.formData.question2 = b.question2;\n        });\n      },1000)\n  \n     \n    } else {\n      this.save = true;\n      setTimeout(()=>{\n         this.$store\n        .dispatch(\"loadData\",this.uuid)\n        .then(() => {\n          let len = this.$store.state.getData.data;\n          for(let i=0;i<=len.length;i++){\n            if(this.$store.state.getData.data[i].key==\"questions\"){\n          let a = this.$store.state.getData.data[i];\n          let b = JSON.parse(a.val);\n                   \n\n          this.formData.question1 = b.question1;\n            }\n          }\n          \n          //  this.formData.question2 = b.question2;\n        });\n    \n      },1000)\n    } \n     \n  },\n  computed: {\n    ...mapState([\"data\"])\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      save: true,\n      final_uuid:\"\",\n      userData:\"\",\n      questions: [\n        { key: \"question1\", text: \"\", required: true }\n        // { key: \"question2\", text: \"Question 2\", required: true }\n      ],\n      formData: {\n        question1: \"\"\n        // question2: \"\"\n      },\n      rules: {\n        question1: [required]\n        // question2: [required]\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n       \n        this.show();\n        if (willDelete) {\n          \n          this.$router.push({ name: \"AccountInfoQuestions\" });\n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      this.loading = true;\n      this.error = null;\n      var temp_uuid;\n       if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n       \n      } else {\n        temp_uuid = this.uuid;\n       \n      }\n      \n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"questions\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n\n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n              if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // this.showmodel = true;\n\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { questions } = data.data;\n          this.uuid = data.data.b;\n          if (questions) {\n            this.formData = {\n              ...this.formData,\n              ...questions\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      this.loading = true;\n      this.error = null;\n          if(localStorage.getItem('token')){\n        \n          this.final_uuid = this.userData;\n         \n      }else{\n        this.final_uuid = this.uuid;\n       \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"questions\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid,\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n             axios.post(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\"+ this.final_uuid+\"&user_id=\"+localStorage.getItem(\"userId\")\n        )\n        .then(res => {\n         \n        })\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["AccountInfoQuestions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AccountInfoQuestions.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"account-info-questions-form container-fluid mob-2\">\n            \n\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card mb-5\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Additional Comments</h4>\n\n          <div v-for=\"{ text, key } in questions\" :key=\"key\" class=\"mb-2\">\n            <div>{{ text }}</div>\n               <div class=\"m-1 pb-2\">\n           <span>If you have any additional comments or concerns regarding your quotation, please list them here. \n</span>\n           </div>\n\n            <div>\n              <textarea v-model=\"formData[key]\" class=\"answer\"></textarea>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default px-4 btn-block btn-border-radius-lb mob-2\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">Owners</div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main px-4 mob-2 btn-block btn-border-radius-rb\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 mob-2 text-white\">Document Upload</div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n        <span class=\"save-hover\">Save & Continue</span>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"newQuoteReq\" v-else>\n        <span class=\"save-hover\">Save Changes</span>\n      </div>\n      <div v-if=\"showmodel\">\n        <modelLogin/>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\nimport axios from \"axios\";\nimport { setTimeout } from 'timers';\n\nexport default {\n  name: \"AccountInfoQuestions\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin,\n\n  },\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios\n      .get(\n        \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n          localStorage.getItem(\"userId\")\n      )\n      .then(coins => {\n        this.userData = coins.data.uuid;\n      });\n      setTimeout(()=>{\n this.$store\n        .dispatch(\"loadData\", this.userData)\n        .then(() => {\n          let len = this.$store.state.getData.data;\n          for(let i=0;i<=len.length;i++){\n            if(this.$store.state.getData.data[i].key==\"questions\"){\n          let a = this.$store.state.getData.data[i];\n          let b = JSON.parse(a.val);\n                   \n\n          this.formData.question1 = b.question1;\n            }\n          }\n          \n          //  this.formData.question2 = b.question2;\n        });\n      },1000)\n  \n     \n    } else {\n      this.save = true;\n      setTimeout(()=>{\n         this.$store\n        .dispatch(\"loadData\",this.uuid)\n        .then(() => {\n          let len = this.$store.state.getData.data;\n          for(let i=0;i<=len.length;i++){\n            if(this.$store.state.getData.data[i].key==\"questions\"){\n          let a = this.$store.state.getData.data[i];\n          let b = JSON.parse(a.val);\n                   \n\n          this.formData.question1 = b.question1;\n            }\n          }\n          \n          //  this.formData.question2 = b.question2;\n        });\n    \n      },1000)\n    } \n     \n  },\n  computed: {\n    ...mapState([\"data\"])\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      save: true,\n      final_uuid:\"\",\n      userData:\"\",\n      questions: [\n        { key: \"question1\", text: \"\", required: true }\n        // { key: \"question2\", text: \"Question 2\", required: true }\n      ],\n      formData: {\n        question1: \"\"\n        // question2: \"\"\n      },\n      rules: {\n        question1: [required]\n        // question2: [required]\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n       \n        this.show();\n        if (willDelete) {\n          \n          this.$router.push({ name: \"AccountInfoQuestions\" });\n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      this.loading = true;\n      this.error = null;\n      var temp_uuid;\n       if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n       \n      } else {\n        temp_uuid = this.uuid;\n       \n      }\n      \n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"questions\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n\n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n              if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // this.showmodel = true;\n\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { questions } = data.data;\n          this.uuid = data.data.b;\n          if (questions) {\n            this.formData = {\n              ...this.formData,\n              ...questions\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      this.loading = true;\n      this.error = null;\n          if(localStorage.getItem('token')){\n        \n          this.final_uuid = this.userData;\n         \n      }else{\n        this.final_uuid = this.uuid;\n       \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"questions\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid,\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n             axios.post(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\"+ this.final_uuid+\"&user_id=\"+localStorage.getItem(\"userId\")\n        )\n        .then(res => {\n         \n        })\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.account-info-questions-form {\n  .answer {\n    border: 1px solid #b3aaaa;\n    width: 100%;\n    height: 80px;\n    border-radius: 10px;\n    margin-top: 10px;\n  }\n}\n</style>\n"]}]}