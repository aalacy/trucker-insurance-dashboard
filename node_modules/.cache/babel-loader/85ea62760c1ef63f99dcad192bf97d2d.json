{"remainingRequest":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/babel-loader/lib/index.js!/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Downloads/LuckyTruck_UI-master/src/components/AccountInfoQuestions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/src/components/AccountInfoQuestions.vue","mtime":1560863775591},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/admin/Downloads/LuckyTruck_UI-master/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required } from '../validators.js';\nimport { API } from '../api.js';\nexport default {\n  name: 'AccountInfoQuestions',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      questions: [{\n        key: 'question1',\n        text: 'Question 1',\n        required: true\n      }, {\n        key: 'question2',\n        text: 'Question 2',\n        required: true\n      }],\n      formData: {\n        question1: '',\n        question2: ''\n      },\n      rules: {\n        question1: [required],\n        question2: [required]\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created: function created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n  methods: {\n    goPrevForm: function goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm: function goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    loadCompany: function () {\n      var _loadCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var data, questions;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n                _context.prev = 2;\n                _context.next = 5;\n                return API.get('company/current');\n\n              case 5:\n                data = _context.sent;\n\n                if (data.status === 'OK') {\n                  questions = data.data.questions;\n\n                  if (questions) {\n                    this.formData = _objectSpread({}, this.formData, questions);\n                  }\n                } else if (data.status === 'ERROR') {\n                  this.$router.replace({\n                    name: 'Home'\n                  });\n                }\n\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                console.error(_context.t0);\n                this.error = _context.t0.message;\n\n              case 13:\n                _context.prev = 13;\n                this.loading = false;\n                return _context.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9, 13, 16]]);\n      }));\n\n      function loadCompany() {\n        return _loadCompany.apply(this, arguments);\n      }\n\n      return loadCompany;\n    }(),\n    updateCompany: function () {\n      var _updateCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return API.post('company/save', {\n                  key: 'questions',\n                  val: this.formData\n                });\n\n              case 5:\n                data = _context2.sent;\n\n                if (data.status === 'OK') {\n                  this.goNextForm();\n                } else if (data.status === 'ERROR') {\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                console.error(_context2.t0);\n                this.error = _context2.t0.message;\n\n              case 13:\n                _context2.prev = 13;\n                this.loading = false;\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 9, 13, 16]]);\n      }));\n\n      function updateCompany() {\n        return _updateCompany.apply(this, arguments);\n      }\n\n      return updateCompany;\n    }()\n  }\n};",{"version":3,"sources":["AccountInfoQuestions.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"account-info-questions-form container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card mb-5\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">\n            Additional Underwriting Questions\n          </h4>\n\n          <div\n            v-for=\"{ text, key, required } in questions\"\n            :key=\"key\"\n            class=\"mb-2\"\n          >\n            <div>{{ text }}</div>\n\n            <div>\n              <textarea\n                v-model=\"formData[key]\"\n                class=\"answer\"\n                :required=\"required\"\n              ></textarea>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">\n            {{ error }}\n          </div>\n        </div>\n\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default px-4 btn-block btn-border-radius-lb mob-2\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">\n                  Owners\n                </div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main px-4 mob-2 btn-block btn-border-radius-rb\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 mob-2 text-white\">\n                  Document Upload\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { required } from '../validators.js';\nimport { API } from '../api.js';\n\nexport default {\n  name: 'AccountInfoQuestions',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      questions: [\n        { key: 'question1', text: 'Question 1', required: true },\n        { key: 'question2', text: 'Question 2', required: true }\n      ],\n      formData: {\n        question1: '',\n        question2: ''\n      },\n      rules: {\n        question1: [required],\n        question2: [required]\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n  methods: {\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { questions } = data.data;\n\n          if (questions) {\n            this.formData = {\n              ...this.formData,\n              ...questions\n            };\n          }\n        } else if (data.status === 'ERROR') {\n          this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'questions',\n          val: this.formData\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.account-info-questions-form {\n  .answer {\n    border: 1px solid #b3aaaa;\n    width: 100%;\n    height: 80px;\n    border-radius: 10px;\n    margin-top: 10px;\n\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}