{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoDrivers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoDrivers.vue","mtime":1563274419123},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport uuidv4 from \"uuid/v4\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nexport default {\n  name: \"AccountInfoDrivers\",\n  components: {\n    AccountInfoDriversItem: () => import(\"./AccountInfoDriversItem.vue\"),\n    modelLogin: ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      drivers: [],\n      loading: false,\n      error: null,\n      save: true\n    };\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n    } else {\n      this.save = true;\n    }\n  },\n\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n\n  methods: {\n    show() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.setDataFromForms();\n\n        let driverForms = _this.$refs.driverForm;\n\n        if (!driverForms.length) {\n          return;\n        }\n\n        let allFormAreValid = driverForms.every(formRef => formRef.validateForm());\n\n        if (!allFormAreValid) {\n          return;\n        }\n\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"drivers\",\n            val: _this.drivers.map(d => {\n              let driver = _objectSpread({}, d);\n\n              delete driver._uuid;\n              return driver;\n            }),\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            if (_this.showmodel) {\n              _this.showmodel = false;\n            } else {\n              _this.showmodel = true;\n            }\n          } else if (data.status === \"ERROR\") {\n            _this.showmodel = true;\n            _this.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err); // this.showmodel = true;\n\n          _this.error = err.message;\n        } finally {\n          // this.showmodel = true;\n          _this.loading = false;\n        }\n      })();\n    },\n\n    addForm() {\n      this.drivers.push({\n        _uuid: uuidv4()\n      });\n      this.error = null;\n    },\n\n    removeForm(index) {\n      this.drivers.splice(index, 1);\n\n      if (!this.drivers.length) {\n        this.error = \"Please add at least one driver\";\n      }\n    },\n\n    updateHint(hint) {\n      this.$emit(\"update-hint\", hint);\n    },\n\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n\n    loadCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.get(\"company/current\");\n\n          if (data.status === \"OK\") {\n            let drivers = data.data.drivers;\n\n            if (drivers && drivers.length) {\n              _this2.drivers = drivers.map(d => _objectSpread({}, d, {\n                _uuid: uuidv4()\n              }));\n            } else {\n              _this2.addForm();\n            }\n          } else if (data.status === \"ERROR\") {// this.$router.replace({ name: 'Home' });\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    },\n\n    setDataFromForms() {\n      let drivers = [];\n      this.$refs.driverForm.forEach(formRef => {\n        let formData = formRef.getFormData();\n        drivers.push(formData);\n      });\n      this.drivers = drivers;\n    },\n\n    updateCompany() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        _this3.setDataFromForms();\n\n        let driverForms = _this3.$refs.driverForm;\n\n        if (!driverForms.length) {\n          return;\n        }\n\n        let allFormAreValid = driverForms.every(formRef => formRef.validateForm());\n\n        if (!allFormAreValid) {\n          return;\n        }\n\n        _this3.loading = true;\n        _this3.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"drivers\",\n            val: _this3.drivers.map(d => {\n              let driver = _objectSpread({}, d);\n\n              delete driver._uuid;\n              return driver;\n            }),\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            _this3.goNextForm();\n          } else if (data.status === \"ERROR\") {\n            _this3.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this3.error = err.message;\n        } finally {\n          _this3.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}