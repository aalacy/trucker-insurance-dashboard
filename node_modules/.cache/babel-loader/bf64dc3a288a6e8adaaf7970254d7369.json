{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/src/api.js","dependencies":[{"path":"/home/ubuntu/luckytruck/src/api.js","mtime":1561725709690},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306}],"contextDependencies":[],"result":["import _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\n\nclass APIService {\n  get(url, params, options) {\n    console.log(\"Stuti\", url, null, params, options);\n    return this.request('GET', url, null, params, options);\n  }\n\n  post(url, data, params, options) {\n    console.log(\"Stuti post\", url, null, params, options);\n    return this.request('POST', url, data, params, options);\n  }\n\n  formData(url, data, params, options) {\n    console.log(\"Stuti formdata\", url, null, params, options);\n\n    let formData = this._getFormData(data);\n\n    return this.request('POST', url, formData, params, options);\n  }\n\n  put(url, data, params, options) {\n    return this.request('PUT', url, data, params, options);\n  }\n\n  delete(url, data, params, options) {\n    return this.request('DELETE', url, data, params, options);\n  }\n\n  _getFormData(dataObj) {\n    let formData = new FormData();\n\n    for (let field in dataObj) {\n      let value = dataObj[field];\n      formData.set(field, value);\n    }\n\n    return formData;\n  }\n\n  request(method, url, data, params) {\n    var _arguments = arguments;\n    return _asyncToGenerator(function* () {\n      let options = _arguments.length > 4 && _arguments[4] !== undefined ? _arguments[4] : {};\n\n      let config = _objectSpread({\n        method,\n        url: \"\".concat(process.env.VUE_APP_BACKEND_URL, \"/\").concat(url),\n        data,\n        params,\n        withCredentials: true,\n        crossdomain: true\n      }, options);\n\n      try {\n        const res = yield axios(config);\n        return res.data;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n\n}\n\nexport const API = new APIService();",null]}