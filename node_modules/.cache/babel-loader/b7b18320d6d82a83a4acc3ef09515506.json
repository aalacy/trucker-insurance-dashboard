{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoOwners.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoOwners.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.map\";\nimport _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport uuidv4 from 'uuid/v4';\nimport { API } from '../api.js';\nexport default {\n  name: 'AccountInfoOwners',\n  components: {\n    AccountInfoOwnersItem: function AccountInfoOwnersItem() {\n      return import('./AccountInfoOwnersItem.vue');\n    }\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      formData: {\n        driverIsOwner: false,\n        driverOwnerIndex: -1,\n        owners: []\n      },\n      drivers: [],\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    noOwners: function noOwners() {\n      return this.formData.driverOwnerIndex === -1 && !this.formData.owners.length;\n    }\n  },\n  watch: {\n    'formData.driverIsOwner': function formDataDriverIsOwner(driverIsOwner) {\n      if (!driverIsOwner) {\n        this.formData.driverOwnerIndex = -1;\n      }\n    },\n    noOwners: function noOwners(_noOwners) {\n      this.error = _noOwners ? 'Please add at least one owner' : null;\n    }\n  },\n  created: function created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n  methods: {\n    addForm: function addForm() {\n      this.formData.owners.push({\n        _uuid: uuidv4()\n      });\n      this.error = null;\n    },\n    removeForm: function removeForm(index) {\n      this.formData.owners.splice(index, 1);\n    },\n    updateHint: function updateHint(hint) {\n      this.$emit('update-hint', hint);\n    },\n    goPrevForm: function goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm: function goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    loadCompany: function () {\n      var _loadCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var data, _data$data, drivers, ownersTab, owners;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n                _context.prev = 2;\n                _context.next = 5;\n                return API.get('company/current');\n\n              case 5:\n                data = _context.sent;\n\n                if (data.status === 'OK') {\n                  _data$data = data.data, drivers = _data$data.drivers, ownersTab = _data$data.owners;\n\n                  if (drivers) {\n                    this.drivers = drivers;\n                  }\n\n                  if (ownersTab) {\n                    owners = ownersTab.owners;\n                    this.formData = _objectSpread({}, this.formData, ownersTab, {\n                      owners: owners.map(function (o) {\n                        return _objectSpread({}, o, {\n                          _uuid: uuidv4()\n                        });\n                      })\n                    });\n                  } else {\n                    this.addForm();\n                  }\n                } else if (data.status === 'ERROR') {\n                  this.$router.replace({\n                    name: 'Home'\n                  });\n                }\n\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                console.error(_context.t0);\n                this.error = _context.t0.message;\n\n              case 13:\n                _context.prev = 13;\n                this.loading = false;\n                return _context.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9, 13, 16]]);\n      }));\n\n      function loadCompany() {\n        return _loadCompany.apply(this, arguments);\n      }\n\n      return loadCompany;\n    }(),\n    setDataFromForms: function setDataFromForms() {\n      var owners = [];\n\n      if (this.$refs.ownerForm) {\n        this.$refs.ownerForm.forEach(function (formRef) {\n          var formData = formRef.getFormData();\n          owners.push(formData);\n        });\n      }\n\n      this.formData.owners = owners;\n    },\n    updateCompany: function () {\n      var _updateCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var allFormAreValid, data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.formData.driverIsOwner && this.formData.driverOwnerIndex === -1) {\n                  this.formData.driverIsOwner = false;\n                }\n\n                this.setDataFromForms();\n\n                if (!this.noOwners) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                allFormAreValid = this.$refs.ownerForm ? this.$refs.ownerForm.every(function (formRef) {\n                  return formRef.validateForm();\n                }) : true;\n\n                if (allFormAreValid) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                this.loading = true;\n                this.error = null;\n                _context2.prev = 9;\n                _context2.next = 12;\n                return API.post('company/save', {\n                  key: 'owners',\n                  val: _objectSpread({}, this.formData, {\n                    owners: this.formData.owners.map(function (o) {\n                      var owner = _objectSpread({}, o);\n\n                      delete owner._uuid;\n                      return owner;\n                    })\n                  })\n                });\n\n              case 12:\n                data = _context2.sent;\n\n                if (data.status === 'OK') {\n                  this.goNextForm();\n                } else if (data.status === 'ERROR') {\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context2.next = 20;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](9);\n                console.error(_context2.t0);\n                this.error = _context2.t0.message;\n\n              case 20:\n                _context2.prev = 20;\n                this.loading = false;\n                return _context2.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[9, 16, 20, 23]]);\n      }));\n\n      function updateCompany() {\n        return _updateCompany.apply(this, arguments);\n      }\n\n      return updateCompany;\n    }()\n  }\n};",null]}