{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoOwners.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoOwners.vue","mtime":1563371354400},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport uuidv4 from 'uuid/v4';\nimport { API } from '../api.js';\nimport ModalLogin from \"./ModalLogin.vue\";\nexport default {\n  name: 'AccountInfoOwners',\n  components: {\n    AccountInfoOwnersItem: () => import('./AccountInfoOwnersItem.vue'),\n    \"modelLogin\": ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      save: true,\n      formData: {\n        driverIsOwner: false,\n        driverOwnerIndex: -1,\n        owners: []\n      },\n      drivers: [],\n      loading: false,\n      error: null\n    };\n  },\n\n  computed: {\n    noOwners() {\n      return this.formData.driverOwnerIndex === -1 && !this.formData.owners.length;\n    }\n\n  },\n  watch: {\n    'formData.driverIsOwner'(driverIsOwner) {\n      if (!driverIsOwner) {\n        this.formData.driverOwnerIndex = -1;\n      }\n    },\n\n    noOwners(noOwners) {\n      this.error = noOwners ? 'Please add at least one owner' : null;\n    }\n\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n    } else {\n      this.save = true;\n    }\n  },\n\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n\n  methods: {\n    show() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this.formData.driverIsOwner && _this.formData.driverOwnerIndex === -1) {\n          _this.formData.driverIsOwner = false;\n        }\n\n        _this.setDataFromForms();\n\n        if (_this.noOwners) {\n          return;\n        }\n\n        let allFormAreValid = _this.$refs.ownerForm ? _this.$refs.ownerForm.every(formRef => formRef.validateForm()) : true;\n\n        if (!allFormAreValid) {\n          return;\n        }\n\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.post('company/save', {\n            key: 'owners',\n            val: _objectSpread({}, _this.formData, {\n              owners: _this.formData.owners.map(o => {\n                let owner = _objectSpread({}, o);\n\n                delete owner._uuid;\n                return owner;\n              })\n            }),\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            if (_this.showmodel) {\n              _this.showmodel = false;\n            } else {\n              _this.showmodel = true;\n            }\n          } else if (data.status === \"ERROR\") {\n            _this.showmodel = true;\n            _this.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err); // this.showmodel = true;\n\n          _this.error = err.message;\n        } finally {\n          // this.showmodel = true;\n          _this.loading = false;\n        }\n      })();\n    },\n\n    addForm() {\n      // console.log(\" _uuid: uuidv4()\", uuidv4())\n      this.formData.owners.push({\n        _uuid: uuidv4()\n      });\n      this.error = null;\n    },\n\n    removeForm(index) {\n      this.formData.owners.splice(index, 1);\n    },\n\n    updateHint(hint) {\n      this.$emit('update-hint', hint);\n    },\n\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n\n    loadCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.get('company/current');\n\n          if (data.status === 'OK') {\n            let _data$data$a = data.data.a,\n                drivers = _data$data$a.drivers,\n                ownersTab = _data$data$a.owners;\n            console.log(\"sssss\", data.data.a);\n\n            if (drivers) {\n              _this2.drivers = drivers;\n            }\n\n            if (ownersTab) {\n              let owners = ownersTab.owners;\n              _this2.formData = _objectSpread({}, _this2.formData, ownersTab, {\n                owners: owners.map(o => _objectSpread({}, o, {\n                  _uuid: uuidv4()\n                }))\n              });\n            } else {\n              _this2.addForm();\n            }\n          } else if (data.status === 'ERROR') {// this.$router.replace({ name: 'Home' });\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    },\n\n    setDataFromForms() {\n      let owners = [];\n\n      if (this.$refs.ownerForm) {\n        this.$refs.ownerForm.forEach(formRef => {\n          let formData = formRef.getFormData();\n          owners.push(formData);\n        });\n      }\n\n      this.formData.owners = owners;\n    },\n\n    updateCompany() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this3.formData.driverIsOwner && _this3.formData.driverOwnerIndex === -1) {\n          _this3.formData.driverIsOwner = false;\n        }\n\n        _this3.setDataFromForms();\n\n        if (_this3.noOwners) {\n          return;\n        }\n\n        let allFormAreValid = _this3.$refs.ownerForm ? _this3.$refs.ownerForm.every(formRef => formRef.validateForm()) : true;\n\n        if (!allFormAreValid) {\n          return;\n        }\n\n        _this3.loading = true;\n        _this3.error = null;\n\n        try {\n          let data = yield API.post('company/save', {\n            key: 'owners',\n            val: _objectSpread({}, _this3.formData, {\n              owners: _this3.formData.owners.map(o => {\n                let owner = _objectSpread({}, o);\n\n                delete owner._uuid;\n                return owner;\n              })\n            }),\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === 'OK') {\n            _this3.goNextForm();\n          } else if (data.status === 'ERROR') {\n            _this3.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this3.error = err.message;\n        } finally {\n          _this3.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}