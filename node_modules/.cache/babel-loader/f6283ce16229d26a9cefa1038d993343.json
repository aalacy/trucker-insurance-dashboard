{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoEldProvider.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoEldProvider.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { validateField as _validateField, validateForm as _validateForm, minLength } from '../validators.js';\nimport { API } from '../api.js';\nexport default {\n  name: 'AccountInfoEldProvider',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      formData: {\n        eldProvider: []\n      },\n      rules: {\n        eldProvider: [function (val) {\n          return minLength(val, 1, 'Please select ELD Provider');\n        }]\n      },\n      formErrors: {},\n      hints: {},\n      userProviders: [],\n      userProviderName: '',\n      loading: false,\n      error: null\n    };\n  },\n  computed: _objectSpread({}, mapState('eld', ['eldProviders']), {\n    allProviders: function allProviders() {\n      return this.eldProviders.concat(this.userProviders);\n    },\n    eldProviderMap: function eldProviderMap() {\n      var map = {};\n      this.formData.eldProvider.forEach(function (val) {\n        return map[val] = true;\n      });\n      return map;\n    }\n  }),\n  created: function created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n  methods: {\n    addProvider: function addProvider() {\n      if (!this.userProviderName || this.eldProviderMap[this.userProviderName]) {\n        return;\n      }\n\n      this.userProviders.push({\n        value: this.userProviderName\n      });\n      this.userProviderName = '';\n    },\n    selectProvider: function selectProvider(providerValue) {\n      if (this.eldProviderMap[providerValue]) {\n        this.formData.eldProvider = this.formData.eldProvider.filter(function (val) {\n          return val !== providerValue;\n        });\n        this.$emit('update-hint', '');\n      } else {\n        this.formData.eldProvider.push(providerValue);\n        this.$emit('update-hint', this.hints[providerValue]);\n      }\n\n      this.formErrors = {};\n    },\n    goPrevForm: function goPrevForm() {\n      this.$emit('update-hint', '');\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm: function goNextForm() {\n      this.$emit('update-hint', '');\n      this.$emit('go-to-form', this.nextForm);\n    },\n    validateField: function validateField(fieldName) {\n      _validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm: function validateForm() {\n      this.formErrors = {};\n      return _validateForm(this.formData, this.rules, this.formErrors);\n    },\n    loadCompany: function () {\n      var _loadCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var data, eldProviderTab, eldProvider;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n                _context.prev = 2;\n                _context.next = 5;\n                return API.get('company/current');\n\n              case 5:\n                data = _context.sent;\n\n                if (data.status === 'OK') {\n                  eldProviderTab = data.data.eldProvider;\n\n                  if (eldProviderTab) {\n                    this.formData = _objectSpread({}, this.formData, eldProviderTab);\n                    eldProvider = eldProviderTab.eldProvider;\n                    this.addUserProviders(eldProvider);\n                  }\n                } else if (data.status === 'ERROR') {\n                  this.$router.replace({\n                    name: 'Home'\n                  });\n                }\n\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                console.error(_context.t0);\n                this.error = _context.t0.message;\n\n              case 13:\n                _context.prev = 13;\n                this.loading = false;\n                return _context.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9, 13, 16]]);\n      }));\n\n      function loadCompany() {\n        return _loadCompany.apply(this, arguments);\n      }\n\n      return loadCompany;\n    }(),\n    addUserProviders: function addUserProviders(eldProvider) {\n      var _this = this;\n\n      eldProvider.forEach(function (providerName) {\n        var providersIndex = _this.eldProviders.findIndex(function (p) {\n          return p.value === providerName;\n        });\n\n        if (providersIndex === -1) {\n          _this.userProviders.push({\n            value: providerName\n          });\n        }\n      });\n    },\n    updateCompany: function () {\n      var _updateCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var formIsValid, data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                formIsValid = this.validateForm();\n\n                if (formIsValid) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                this.loading = true;\n                this.error = null;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return API.post('company/save', {\n                  key: 'eldProvider',\n                  val: this.formData\n                });\n\n              case 8:\n                data = _context2.sent;\n\n                if (data.status === 'OK') {\n                  this.goNextForm();\n                } else if (data.status === 'ERROR') {\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context2.next = 16;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](5);\n                console.error(_context2.t0);\n                this.error = _context2.t0.message;\n\n              case 16:\n                _context2.prev = 16;\n                this.loading = false;\n                return _context2.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 12, 16, 19]]);\n      }));\n\n      function updateCompany() {\n        return _updateCompany.apply(this, arguments);\n      }\n\n      return updateCompany;\n    }()\n  }\n};",null]}