{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoDrivers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoDrivers.vue","mtime":1563274419123},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.for-each\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport uuidv4 from \"uuid/v4\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nexport default {\n  name: \"AccountInfoDrivers\",\n  components: {\n    AccountInfoDriversItem: function AccountInfoDriversItem() {\n      return import(\"./AccountInfoDriversItem.vue\");\n    },\n    modelLogin: ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      showmodel: false,\n      drivers: [],\n      loading: false,\n      error: null,\n      save: true\n    };\n  },\n  mounted: function mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n    } else {\n      this.save = true;\n    }\n  },\n  created: function created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated: function updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    show: function () {\n      var _show = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var driverForms, allFormAreValid, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setDataFromForms();\n                driverForms = this.$refs.driverForm;\n\n                if (driverForms.length) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                allFormAreValid = driverForms.every(function (formRef) {\n                  return formRef.validateForm();\n                });\n\n                if (allFormAreValid) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 7:\n                this.loading = true;\n                this.error = null;\n                _context.prev = 9;\n                _context.next = 12;\n                return API.post(\"company/save\", {\n                  key: \"drivers\",\n                  val: this.drivers.map(function (d) {\n                    var driver = _objectSpread({}, d);\n\n                    delete driver._uuid;\n                    return driver;\n                  }),\n                  userId: localStorage.getItem(\"userId\"),\n                  uuid: localStorage.getItem(\"uuid\")\n                });\n\n              case 12:\n                data = _context.sent;\n\n                if (data.status === \"OK\") {\n                  if (this.showmodel) {\n                    this.showmodel = false;\n                  } else {\n                    this.showmodel = true;\n                  }\n                } else if (data.status === \"ERROR\") {\n                  this.showmodel = true;\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context.next = 20;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](9);\n                console.error(_context.t0); // this.showmodel = true;\n\n                this.error = _context.t0.message;\n\n              case 20:\n                _context.prev = 20;\n                // this.showmodel = true;\n                this.loading = false;\n                return _context.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[9, 16, 20, 23]]);\n      }));\n\n      function show() {\n        return _show.apply(this, arguments);\n      }\n\n      return show;\n    }(),\n    addForm: function addForm() {\n      this.drivers.push({\n        _uuid: uuidv4()\n      });\n      this.error = null;\n    },\n    removeForm: function removeForm(index) {\n      this.drivers.splice(index, 1);\n\n      if (!this.drivers.length) {\n        this.error = \"Please add at least one driver\";\n      }\n    },\n    updateHint: function updateHint(hint) {\n      this.$emit(\"update-hint\", hint);\n    },\n    goPrevForm: function goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm: function goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    loadCompany: function () {\n      var _loadCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var data, drivers;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return API.get(\"company/current\");\n\n              case 5:\n                data = _context2.sent;\n\n                if (data.status === \"OK\") {\n                  drivers = data.data.drivers;\n\n                  if (drivers && drivers.length) {\n                    this.drivers = drivers.map(function (d) {\n                      return _objectSpread({}, d, {\n                        _uuid: uuidv4()\n                      });\n                    });\n                  } else {\n                    this.addForm();\n                  }\n                } else if (data.status === \"ERROR\") {// this.$router.replace({ name: 'Home' });\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                console.error(_context2.t0);\n                this.error = _context2.t0.message;\n\n              case 13:\n                _context2.prev = 13;\n                this.loading = false;\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 9, 13, 16]]);\n      }));\n\n      function loadCompany() {\n        return _loadCompany.apply(this, arguments);\n      }\n\n      return loadCompany;\n    }(),\n    setDataFromForms: function setDataFromForms() {\n      var drivers = [];\n      this.$refs.driverForm.forEach(function (formRef) {\n        var formData = formRef.getFormData();\n        drivers.push(formData);\n      });\n      this.drivers = drivers;\n    },\n    updateCompany: function () {\n      var _updateCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var driverForms, allFormAreValid, data;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setDataFromForms();\n                driverForms = this.$refs.driverForm;\n\n                if (driverForms.length) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 4:\n                allFormAreValid = driverForms.every(function (formRef) {\n                  return formRef.validateForm();\n                });\n\n                if (allFormAreValid) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                this.loading = true;\n                this.error = null;\n                _context3.prev = 9;\n                _context3.next = 12;\n                return API.post(\"company/save\", {\n                  key: \"drivers\",\n                  val: this.drivers.map(function (d) {\n                    var driver = _objectSpread({}, d);\n\n                    delete driver._uuid;\n                    return driver;\n                  }),\n                  userId: localStorage.getItem(\"userId\"),\n                  uuid: localStorage.getItem(\"uuid\")\n                });\n\n              case 12:\n                data = _context3.sent;\n\n                if (data.status === \"OK\") {\n                  this.goNextForm();\n                } else if (data.status === \"ERROR\") {\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context3.next = 20;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](9);\n                console.error(_context3.t0);\n                this.error = _context3.t0.message;\n\n              case 20:\n                _context3.prev = 20;\n                this.loading = false;\n                return _context3.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[9, 16, 20, 23]]);\n      }));\n\n      function updateCompany() {\n        return _updateCompany.apply(this, arguments);\n      }\n\n      return updateCompany;\n    }()\n  }\n};",{"version":3,"sources":["AccountInfoDrivers.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"drivers-form container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card mb-5\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Drivers</h4>\n\n          <account-info-drivers-item\n            v-for=\"(item, index) in drivers\"\n            ref=\"driverForm\"\n            :key=\"item._uuid\"\n            :index=\"index\"\n            :driver=\"item\"\n            class=\"mb-5\"\n            @update-hint=\"updateHint\"\n            @remove-form=\"removeForm\"\n          />\n\n          <hr>\n\n          <div class=\"row align-items-center mb-3\">\n            <div class=\"col font-weight-bold\">Add another driver</div>\n\n            <div class=\"col-auto text-right\">\n              <button type=\"button\" class=\"lt-button px-3\" @click=\"addForm\">+</button>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n        </div>\n\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default mob-2 px-4 btn-block btn-border-radius-lb\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">ELD Provider</div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main mob-2 px-4 btn-block btn-border-radius-rb\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 text-white mob-2\">Owners</div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n        <span class=\"save-hover\">Save & Continue</span>\n      </div>\n      <div v-if=\"showmodel\">\n        <modelLogin/>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport uuidv4 from \"uuid/v4\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\n\nexport default {\n  name: \"AccountInfoDrivers\",\n\n  components: {\n    AccountInfoDriversItem: () => import(\"./AccountInfoDriversItem.vue\"),\n    modelLogin: ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showmodel: false,\n      drivers: [],\n      loading: false,\n      error: null,\n      save:true\n    };\n  },\n mounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n   }else{\n     this.save = true\n   }\n },\n\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    async show() {\n      this.setDataFromForms();\n\n      let driverForms = this.$refs.driverForm;\n      if (!driverForms.length) {\n        return;\n      }\n\n      let allFormAreValid = driverForms.every(formRef =>\n        formRef.validateForm()\n      );\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"drivers\",\n          val: this.drivers.map(d => {\n            let driver = { ...d };\n            delete driver._uuid;\n            return driver;\n          }),\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === \"OK\") {\n          if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n        } else if (data.status === \"ERROR\") {\n          this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        // this.showmodel = true;\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    addForm() {\n      this.drivers.push({ _uuid: uuidv4() });\n      this.error = null;\n    },\n    removeForm(index) {\n      this.drivers.splice(index, 1);\n\n      if (!this.drivers.length) {\n        this.error = \"Please add at least one driver\";\n      }\n    },\n    updateHint(hint) {\n      this.$emit(\"update-hint\", hint);\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { drivers } = data.data;\n\n          if (drivers && drivers.length) {\n            this.drivers = drivers.map(d => ({ ...d, _uuid: uuidv4() }));\n          } else {\n            this.addForm();\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    setDataFromForms() {\n      let drivers = [];\n\n      this.$refs.driverForm.forEach(formRef => {\n        let formData = formRef.getFormData();\n        drivers.push(formData);\n      });\n\n      this.drivers = drivers;\n    },\n    async updateCompany() {\n      this.setDataFromForms();\n\n      let driverForms = this.$refs.driverForm;\n      if (!driverForms.length) {\n        return;\n      }\n\n      let allFormAreValid = driverForms.every(formRef =>\n        formRef.validateForm()\n      );\n\n      if (!allFormAreValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"drivers\",\n          val: this.drivers.map(d => {\n            let driver = { ...d };\n            delete driver._uuid;\n            return driver;\n          }),\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"sourceRoot":"src/components"}]}