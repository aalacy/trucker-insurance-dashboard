{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoBusinessStructure.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoBusinessStructure.vue","mtime":1563188976168},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { validateField, validateForm, required, minLength } from '../validators.js';\nimport { API } from '../api.js';\nimport { mapState } from \"vuex\";\nimport { constants } from 'fs';\nexport default {\n  name: 'AccountInfoBusinessStructure',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    \"modelLogin\": ModalLogin\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      save: true,\n      formData: {\n        businessStructure: '',\n        businessClassification: '',\n        MC: '',\n        businessType: ''\n      },\n      rules: {\n        businessStructure: [required],\n        businessClassification: [required],\n        businessType: [required]\n      },\n      formErrors: {},\n      hints: {\n        businessStructure: 'Some hint',\n        MC: 'Another hint'\n      },\n      businessStructures: ['Sole Proprietorship', 'Partnership', 'Corporation', 'Limited Liability Company'],\n      businessClassifications: ['Private(Proerty)' // { name: 'Private (Property)', value: 'Private(Property)' }\n      // 'Private (Property)',\n      ],\n      businessTypes: ['Trucker - General Freight', 'Dirt, Sand & Gravel (DSG) Hauler', 'Excavating, Landscaping or Building Contractor', 'Trucker - Refrigerated Goods', 'For-Hire Trucking – Additional Specialty Classes', 'Agricultural Hauling', 'Livestock Hauling', 'Farmer', 'Auto Hauler', 'Towing', 'Courier', 'Expediter', 'For-Hire Livery – Taxi, Black Car, Limousine, Sightseeing/Guided Tours', 'Not-For-Hire Livery – Social Services, Courtesy (Hotel) Shuttle, Religious Organization, Child/Adult Daycare'],\n      loading: false,\n      error: null\n    };\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      this.$store.dispatch('loadData', localStorage.getItem(\"uuid\"));\n      let a = this.$store.state.getData.data[0];\n      let b = JSON.parse(a.val);\n      console.log(\"ba\", b);\n      this.formData.businessStructure = b.businessStructure;\n      this.formData.businessClassification = b.businessClassification;\n      this.formData.businessType = b.businessType;\n      this.formData.MC = b.MC;\n      console.log(\"b.businessStructure\", b.businessStructure);\n      console.log(\"b.\", b);\n      console.log(\"b.businessClassification\", b);\n    } else {\n      this.save = true;\n    }\n  },\n\n  computed: _objectSpread({}, mapState(['data'])),\n\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n\n  created() {\n    this.$emit('update-progress', this.progress); // this.loadCompany();\n  },\n\n  methods: {\n    show() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let formIsValid = _this.validateForm();\n\n        if (!formIsValid) {\n          return;\n        }\n\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"cargoGroup\",\n            val: _this.formData,\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            if (_this.showmodel) {\n              _this.showmodel = false;\n            } else {\n              _this.showmodel = true;\n            }\n          } else if (data.status === \"ERROR\") {\n            // this.showmodel = true;\n            _this.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          // this.showmodel = true;\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          // this.showmodel = true;\n          _this.loading = false;\n        }\n      })();\n    },\n\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n\n    loadCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.get('company/current');\n\n          if (data.status === 'OK') {\n            let businessStructure = data.data.businessStructure;\n\n            if (businessStructure) {\n              _this2.formData = _objectSpread({}, _this2.formData, businessStructure);\n            }\n          } else if (data.status === 'ERROR') {// this.$router.replace({ name: 'Home' });\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    },\n\n    updateCompany() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        let formIsValid = _this3.validateForm();\n\n        if (!formIsValid) {\n          return;\n        }\n\n        _this3.loading = true;\n        _this3.error = null;\n\n        try {\n          let data = yield API.post('company/save', {\n            key: 'businessStructure',\n            val: _this3.formData,\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === 'OK') {\n            _this3.goNextForm();\n          } else if (data.status === 'ERROR') {\n            _this3.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this3.error = err.message;\n        } finally {\n          _this3.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}