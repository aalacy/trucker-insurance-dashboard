{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoSignComplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoSignComplete.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["import _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validateField, validateForm, required } from '../validators.js';\nexport default {\n  name: \"AccountInfoSignComplete\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      formData: {\n        dobM: '',\n        dobD: '',\n        dobY: '',\n        imageIdFront: null\n      },\n      preview: {\n        imageIdFront: null\n      },\n      rules: {\n        dobM: [required],\n        dobD: [required],\n        dobY: [required] // sign: [required]\n\n      },\n      formErrors: {},\n      hints: {},\n      loading: false,\n      error: null\n    };\n  },\n\n  created() {\n    let dobM = '',\n        imageSign = '',\n        dobD = '',\n        dobY = ''; // this.$emit(\"update-progress\", this.progress);\n    // if (this.driver.dateOfSign) {\n    //       [dobM, dobD, dobY] = this.driver.dateOfSign.split('/');\n    //     }\n\n    this.formData = _objectSpread({}, this.formData, {\n      //   ...this.driver,\n      dobM,\n      dobD,\n      dobY\n    });\n  },\n\n  methods: {\n    setImage(event, fieldName) {\n      let files = event.target.files;\n      let image = files[0] || null;\n      this.formData[fieldName] = image;\n      this.previewFile(image, fieldName); // this.validateField(fieldName);\n    },\n\n    previewFile(file, fieldName) {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.preview[fieldName] = reader.result;\n      };\n\n      if (file) {\n        reader.readAsDataURL(file);\n      } else {\n        this.preview[fieldName] = null;\n      }\n    },\n\n    clearFiles() {\n      this.$refs['file-input'].reset();\n    },\n\n    updateCompany() {\n      return _asyncToGenerator(function* () {})();\n    },\n\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    }\n\n  },\n  computed: {\n    dateOfSign() {\n      let _this$formData = this.formData,\n          m = _this$formData.dobM,\n          d = _this$formData.dobD,\n          y = _this$formData.dobY;\n\n      if (m.length < 2) {\n        m = \"0\".concat(m);\n      }\n\n      if (d.length < 2) {\n        d = \"0\".concat(d);\n      }\n\n      return \"\".concat(m, \"/\").concat(d, \"/\").concat(y);\n    }\n\n  }\n};",null]}