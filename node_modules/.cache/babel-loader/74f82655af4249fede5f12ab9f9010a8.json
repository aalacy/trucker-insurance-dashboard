{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoVehiclesAndTrailersItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoVehiclesAndTrailersItem.vue","mtime":1563367747191},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validateField, validateForm, required, requiredWith } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"AccountInfoVehiclesAndTrailersItem\",\n  props: {\n    vehicleOrTrailer: {\n      type: String,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    },\n    vehicle: {\n      type: Object,\n      required: false,\n\n      default() {\n        return {};\n      }\n\n    }\n  },\n\n  beforeMount() {\n    console.log(\"this.vehicle\", this.vehicleOrTrailer);\n\n    if (this.vehicleOrTrailer == \"Vehicle\") {\n      this.vehicle = true;\n    } else {\n      this.vehicle = false;\n    }\n  },\n\n  mounted() {\n    console.log(\"this.vehicle\", this.vehicleOrTrailer);\n\n    if (localStorage.getItem(\"token\")) {\n      this.$store.dispatch('loadData', localStorage.getItem(\"uuid\"));\n      let a = this.$store.state.getData.data[5];\n      let b = JSON.parse(a.val)[0];\n      console.log(\"bbb\", b); //  for(var i=0;i<b.length;i++){\n      // this.formData.VIN = b[i].VIN;\n      // this.formData.make=b[i].make;\n      // this.formData.year=b[i].year;\n      // this.formData.zipCode=b[i].zipCode;\n      // this.formData.model=b[i].model;\n      // this.formData.vehicleImage=b[i].vehicleImage;\n      // this.formData.vehicleType=b[i].vehicleType;\n      // this.formData.radiusOfTravel=b[i].radiusOfTravel;\n      //  }\n\n      this.formData.VIN = b.VIN;\n      this.formData.make = b.make;\n      this.formData.year = b.year;\n      this.formData.zipCode = b.zipCode;\n      this.formData.model = b.model;\n      this.formData.vehicleImage = b.vehicleImage;\n      this.formData.vehicleType = b.vehicleType;\n      this.formData.radiusOfTravel = b.radiusOfTravel; // console.log(\"ba\",b)\n    } else {}\n  },\n\n  data() {\n    return {\n      formData: {\n        VIN: \"\",\n        year: \"\",\n        make: \"\",\n        model: \"\",\n        vehicleType: \"\",\n        vehicleImage: \"\",\n        zipCode: \"\",\n        radiusOfTravel: 50,\n        coverage: false,\n        currentValue: \"\",\n        deductible: \"\"\n      },\n      vehicle: false,\n      rules: {\n        VIN: [required],\n        year: [required],\n        make: [required],\n        model: [required],\n        vehicleType: [required],\n        zipCode: [required],\n        currentValue: [val => requiredWith(val, this.formData.coverage)],\n        deductible: [val => requiredWith(val, this.formData.coverage)]\n      },\n      formErrors: {},\n      hints: {\n        VIN: \"Some hint\"\n      },\n      deductibles: [{\n        name: \"$ 500\",\n        value: \"500\"\n      }, {\n        name: \"$ 1000\",\n        value: \"1000\"\n      }, {\n        name: \"$ 2500\",\n        value: \"2500\"\n      }, {\n        name: \"$ 5000\",\n        value: \"5000\"\n      }],\n      vehicleTypes: [\"Auto Hauler\", \"Bottom Dump Trailer\", \"Bulk Commodity Trailer\", \"Concession Trailer\", \"Dry Freight Trailer\", \"Dump Body Trailer / Transfer Box\", \"Flatbed Trailer\", \"Gooseneck Trailer\", \"Horse Trailer\", \"Livestock Trailer\", \"Logging Trailer\", \"Low-Boy Trailer\", \"Pole Trailer\", \"Refrigerated Dry Freight Trailer\", \"Tank Trailer\", \"Tilt Trailer\", \"Travel Trailer\", \"Utility Trailer\", \"Bus\", \"Car\", \"Cargo Van\", \"Hearse\", \"Limousine\", \"Mini Van\", \"Motor Home\", \"PASSENGER CAR\", \"Sport Utility Vehicle\", \"Emergency Vehicle\", \"Military Vehicle\"],\n      radiuses: [0, 100, 200, 300, 500, 1000, \"Unlimited\"],\n      loading: false,\n      error: null\n    };\n  },\n\n  computed: {\n    currentValueOfTransport: _objectSpread({\n      get() {\n        return \"$ \".concat(this.formData.currentValue);\n      },\n\n      set(val) {\n        let price = val // replace dollars and spaces to empty string\n        .replace(/[$\\s]/g, \"\") // replace all commas to dots\n        .replace(/,/g, \".\");\n        this.formData.currentValue = price;\n      }\n\n    }, mapState(['data'])),\n    radiusOfTravel: {\n      get() {\n        let index = this.radiuses.findIndex(radius => radius == this.formData.radiusOfTravel);\n        return index > -1 ? index : 1;\n      },\n\n      set(index) {\n        this.formData.radiusOfTravel = this.radiuses[index];\n      }\n\n    }\n  },\n  watch: {\n    \"formData.coverage\"(val) {\n      if (!val) {\n        this.formData.currentValue = \"\";\n        this.formData.deductible = \"\";\n      }\n    }\n\n  },\n\n  created() {\n    this.formData = _objectSpread({}, this.formData, this.vehicle);\n\n    if (!this.formData.VIN) {\n      this.formData.VIN = process.env.VUE_APP_TEST_VIN || \"\";\n    }\n  },\n\n  updated() {\n    console.log(\"oo\", this.formData.vehicleImage);\n  },\n\n  methods: {\n    getFormData() {\n      return this.formData;\n    },\n\n    removeForm(index) {\n      this.$emit(\"remove-form\", index);\n    },\n\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n\n    getVinData() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this.formData.VIN) {\n          console.log(\"VIN EMPTY\");\n          return;\n        }\n\n        _this.loading = true;\n\n        try {\n          let data = yield API.get(\"company/vin\", {\n            vin: _this.formData.VIN\n          });\n          _this.formData = _objectSpread({}, _this.formData, data.data);\n          console.log(\"data vin\", data.data);\n          _this.formData.year = data.data.year;\n          _this.formData.make = data.data.make;\n          _this.formData.model = data.data.model;\n          _this.formData.vehicleType = data.data.vehicleType;\n          console.log(\"this.formData.vehicleType\", _this.formData.vehicleType); // console.log(\"this.v\",this.vehicleTypes)\n          // console.log(\"data.data.vehicleType\",data.data.vehicleType)\n          // var type = this.vehicleTypes.filter(v => v == data.data.vehicleType)\n          // console.log(\"type\",type)\n        } catch (err) {\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          _this.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}