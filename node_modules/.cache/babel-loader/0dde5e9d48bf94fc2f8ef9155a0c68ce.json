{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoQuestions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoQuestions.vue","mtime":1563369189172},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"AccountInfoQuestions\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.$store.dispatch('loadData', localStorage.getItem(\"uuid\"));\n      let a = this.$store.state.getData.data[9];\n      let b = JSON.parse(a.val);\n      this.formData.question1 = b.question1;\n      this.formData.question2 = b.question2;\n      console.log(\"b\", b);\n      this.save = false;\n    } else {\n      this.save = true;\n    }\n  },\n\n  computed: _objectSpread({}, mapState(['data'])),\n\n  data() {\n    return {\n      showmodel: false,\n      save: true,\n      questions: [{\n        key: \"question1\",\n        text: \"Question 1\",\n        required: true\n      }, {\n        key: \"question2\",\n        text: \"Question 2\",\n        required: true\n      }],\n      formData: {\n        question1: \"\",\n        question2: \"\"\n      },\n      rules: {\n        question1: [required],\n        question2: [required]\n      },\n      loading: false,\n      error: null\n    };\n  },\n\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n\n  methods: {\n    show() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"questions\",\n            val: _this.formData,\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            if (_this.showmodel) {\n              _this.showmodel = false;\n            } else {\n              _this.showmodel = true;\n            }\n          } else if (data.status === \"ERROR\") {\n            // this.showmodel = true;\n            _this.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          // this.showmodel = true;\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          // this.showmodel = true;\n          _this.loading = false;\n        }\n      })();\n    },\n\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n\n    loadCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.get(\"company/current\");\n\n          if (data.status === \"OK\") {\n            let questions = data.data.questions;\n\n            if (questions) {\n              _this2.formData = _objectSpread({}, _this2.formData, questions);\n            }\n          } else if (data.status === \"ERROR\") {// this.$router.replace({ name: 'Home' });\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    },\n\n    updateCompany() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        _this3.loading = true;\n        _this3.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"questions\",\n            val: _this3.formData,\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            _this3.goNextForm();\n          } else if (data.status === \"ERROR\") {\n            _this3.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this3.error = err.message;\n        } finally {\n          _this3.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}