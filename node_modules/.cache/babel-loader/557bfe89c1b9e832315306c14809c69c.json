{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/src/validators.js","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/validators.js","mtime":1558084536000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _Array$isArray from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport _getIterator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport Vue from 'vue';\nexport var validateField = function validateField() {\n  var fieldName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var formData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var formErrors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var fieldRules = rules[fieldName] || [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(fieldRules), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var ruleFunc = _step.value;\n      var error = ruleFunc(formData[fieldName]);\n      var fieldIsValid = typeof error !== 'string';\n\n      if (fieldIsValid) {\n        Vue.delete(formErrors, fieldName);\n      } else {\n        Vue.set(formErrors, fieldName, error);\n      }\n\n      if (!fieldIsValid) {\n        break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\nexport var validateForm = function validateForm() {\n  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var formErrors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  for (var fieldName in rules) {\n    validateField(fieldName, formData, rules, formErrors);\n  }\n\n  var formIsValid = _Object$keys(formErrors).length === 0;\n  return formIsValid;\n};\n/* RULES */\n\nexport var required = function required(val, errorMessage) {\n  return !!val || errorMessage || 'Field is required';\n};\nexport var requiredWith = function requiredWith(val, some, errorMessage) {\n  return some ? required(val, errorMessage) : true;\n};\nexport var minLength = function minLength(val, min, errorMessage) {\n  var isValidValue = false;\n\n  if (_Array$isArray(val) || typeof val === 'string') {\n    isValidValue = val.length >= min;\n  } else if (_typeof(val) === 'object' && val !== null) {\n    isValidValue = _Object$keys(val).length >= min;\n  }\n\n  return isValidValue || errorMessage || 'Field is required';\n};",{"version":3,"sources":["/Users/admin/Desktop/luckytruck/src/validators.js"],"names":["Vue","validateField","fieldName","formData","rules","formErrors","fieldRules","ruleFunc","error","fieldIsValid","delete","set","validateForm","formIsValid","length","required","val","errorMessage","requiredWith","some","minLength","min","isValidValue"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAKxB;AAAA,MAJHC,SAIG,uEAJS,EAIT;AAAA,MAHHC,QAGG,uEAHQ,EAGR;AAAA,MAFHC,KAEG,uEAFK,EAEL;AAAA,MADHC,UACG,uEADU,EACV;AACH,MAAIC,UAAU,GAAGF,KAAK,CAACF,SAAD,CAAL,IAAoB,EAArC;AADG;AAAA;AAAA;;AAAA;AAGH,sCAAqBI,UAArB,4GAAiC;AAAA,UAAxBC,QAAwB;AAC/B,UAAIC,KAAK,GAAGD,QAAQ,CAACJ,QAAQ,CAACD,SAAD,CAAT,CAApB;AACA,UAAIO,YAAY,GAAG,OAAOD,KAAP,KAAiB,QAApC;;AAEA,UAAIC,YAAJ,EAAkB;AAChBT,QAAAA,GAAG,CAACU,MAAJ,CAAWL,UAAX,EAAuBH,SAAvB;AACD,OAFD,MAEO;AACLF,QAAAA,GAAG,CAACW,GAAJ,CAAQN,UAAR,EAAoBH,SAApB,EAA+BM,KAA/B;AACD;;AAED,UAAI,CAACC,YAAL,EAAmB;AACjB;AACD;AACF;AAhBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBJ,CAtBM;AAwBP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,GAAgD;AAAA,MAA/CT,QAA+C,uEAApC,EAAoC;AAAA,MAAhCC,KAAgC,uEAAxB,EAAwB;AAAA,MAApBC,UAAoB,uEAAP,EAAO;;AAC1E,OAAK,IAAIH,SAAT,IAAsBE,KAAtB,EAA6B;AAC3BH,IAAAA,aAAa,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,UAA7B,CAAb;AACD;;AAED,MAAIQ,WAAW,GAAG,aAAYR,UAAZ,EAAwBS,MAAxB,KAAmC,CAArD;AACA,SAAOD,WAAP;AACD,CAPM;AASP;;AAEA,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,YAAN;AAAA,SACtB,CAAC,CAACD,GAAF,IAASC,YAAT,IAAyB,mBADH;AAAA,CAAjB;AAGP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACF,GAAD,EAAMG,IAAN,EAAYF,YAAZ;AAAA,SAC1BE,IAAI,GAAGJ,QAAQ,CAACC,GAAD,EAAMC,YAAN,CAAX,GAAiC,IADX;AAAA,CAArB;AAGP,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACJ,GAAD,EAAMK,GAAN,EAAWJ,YAAX,EAA4B;AACnD,MAAIK,YAAY,GAAG,KAAnB;;AAEA,MAAI,eAAcN,GAAd,KAAsB,OAAOA,GAAP,KAAe,QAAzC,EAAmD;AACjDM,IAAAA,YAAY,GAAGN,GAAG,CAACF,MAAJ,IAAcO,GAA7B;AACD,GAFD,MAEO,IAAI,QAAOL,GAAP,MAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;AAClDM,IAAAA,YAAY,GAAG,aAAYN,GAAZ,EAAiBF,MAAjB,IAA2BO,GAA1C;AACD;;AAED,SAAOC,YAAY,IAAIL,YAAhB,IAAgC,mBAAvC;AACD,CAVM","sourcesContent":["import Vue from 'vue';\n\nexport const validateField = (\n  fieldName = '',\n  formData = {},\n  rules = {},\n  formErrors = {}\n) => {\n  let fieldRules = rules[fieldName] || [];\n\n  for (let ruleFunc of fieldRules) {\n    let error = ruleFunc(formData[fieldName]);\n    let fieldIsValid = typeof error !== 'string';\n\n    if (fieldIsValid) {\n      Vue.delete(formErrors, fieldName);\n    } else {\n      Vue.set(formErrors, fieldName, error);\n    }\n\n    if (!fieldIsValid) {\n      break;\n    }\n  }\n};\n\nexport const validateForm = (formData = {}, rules = {}, formErrors = {}) => {\n  for (let fieldName in rules) {\n    validateField(fieldName, formData, rules, formErrors);\n  }\n\n  let formIsValid = Object.keys(formErrors).length === 0;\n  return formIsValid;\n};\n\n/* RULES */\n\nexport const required = (val, errorMessage) =>\n  !!val || errorMessage || 'Field is required';\n\nexport const requiredWith = (val, some, errorMessage) =>\n  some ? required(val, errorMessage) : true;\n\nexport const minLength = (val, min, errorMessage) => {\n  let isValidValue = false;\n\n  if (Array.isArray(val) || typeof val === 'string') {\n    isValidValue = val.length >= min;\n  } else if (typeof val === 'object' && val !== null) {\n    isValidValue = Object.keys(val).length >= min;\n  }\n\n  return isValidValue || errorMessage || 'Field is required';\n};\n"]}]}