{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoBusinessStructure.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoBusinessStructure.vue","mtime":1563188976168},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { validateField as _validateField, validateForm as _validateForm, required, minLength } from '../validators.js';\nimport { API } from '../api.js';\nimport { mapState } from \"vuex\";\nimport { constants } from 'fs';\nexport default {\n  name: 'AccountInfoBusinessStructure',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    \"modelLogin\": ModalLogin\n  },\n  data: function data() {\n    return {\n      showmodel: false,\n      save: true,\n      formData: {\n        businessStructure: '',\n        businessClassification: '',\n        MC: '',\n        businessType: ''\n      },\n      rules: {\n        businessStructure: [required],\n        businessClassification: [required],\n        businessType: [required]\n      },\n      formErrors: {},\n      hints: {\n        businessStructure: 'Some hint',\n        MC: 'Another hint'\n      },\n      businessStructures: ['Sole Proprietorship', 'Partnership', 'Corporation', 'Limited Liability Company'],\n      businessClassifications: ['Private(Proerty)' // { name: 'Private (Property)', value: 'Private(Property)' }\n      // 'Private (Property)',\n      ],\n      businessTypes: ['Trucker - General Freight', 'Dirt, Sand & Gravel (DSG) Hauler', 'Excavating, Landscaping or Building Contractor', 'Trucker - Refrigerated Goods', 'For-Hire Trucking – Additional Specialty Classes', 'Agricultural Hauling', 'Livestock Hauling', 'Farmer', 'Auto Hauler', 'Towing', 'Courier', 'Expediter', 'For-Hire Livery – Taxi, Black Car, Limousine, Sightseeing/Guided Tours', 'Not-For-Hire Livery – Social Services, Courtesy (Hotel) Shuttle, Religious Organization, Child/Adult Daycare'],\n      loading: false,\n      error: null\n    };\n  },\n  mounted: function mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      this.$store.dispatch('loadData', localStorage.getItem(\"uuid\"));\n      var a = this.$store.state.getData.data[0];\n      var b = JSON.parse(a.val);\n      console.log(\"ba\", b);\n      this.formData.businessStructure = b.businessStructure;\n      this.formData.businessClassification = b.businessClassification;\n      this.formData.businessType = b.businessType;\n      this.formData.MC = b.MC;\n      console.log(\"b.businessStructure\", b.businessStructure);\n      console.log(\"b.\", b);\n      console.log(\"b.businessClassification\", b);\n    } else {\n      this.save = true;\n    }\n  },\n  computed: _objectSpread({}, mapState(['data'])),\n  updated: function updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  created: function created() {\n    this.$emit('update-progress', this.progress); // this.loadCompany();\n  },\n  methods: {\n    show: function () {\n      var _show = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var formIsValid, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                formIsValid = this.validateForm();\n\n                if (formIsValid) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                this.loading = true;\n                this.error = null;\n                _context.prev = 5;\n                _context.next = 8;\n                return API.post(\"company/save\", {\n                  key: \"cargoGroup\",\n                  val: this.formData,\n                  userId: localStorage.getItem(\"userId\"),\n                  uuid: localStorage.getItem(\"uuid\")\n                });\n\n              case 8:\n                data = _context.sent;\n\n                if (data.status === \"OK\") {\n                  if (this.showmodel) {\n                    this.showmodel = false;\n                  } else {\n                    this.showmodel = true;\n                  }\n                } else if (data.status === \"ERROR\") {\n                  // this.showmodel = true;\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context.next = 16;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](5);\n                // this.showmodel = true;\n                console.error(_context.t0);\n                this.error = _context.t0.message;\n\n              case 16:\n                _context.prev = 16;\n                // this.showmodel = true;\n                this.loading = false;\n                return _context.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 12, 16, 19]]);\n      }));\n\n      function show() {\n        return _show.apply(this, arguments);\n      }\n\n      return show;\n    }(),\n    onFocus: function onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur: function onBlur() {\n      this.$emit('update-hint', '');\n    },\n    goPrevForm: function goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm: function goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    validateField: function validateField(fieldName) {\n      _validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm: function validateForm() {\n      this.formErrors = {};\n      return _validateForm(this.formData, this.rules, this.formErrors);\n    },\n    loadCompany: function () {\n      var _loadCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var data, businessStructure;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return API.get('company/current');\n\n              case 5:\n                data = _context2.sent;\n\n                if (data.status === 'OK') {\n                  businessStructure = data.data.businessStructure;\n\n                  if (businessStructure) {\n                    this.formData = _objectSpread({}, this.formData, businessStructure);\n                  }\n                } else if (data.status === 'ERROR') {// this.$router.replace({ name: 'Home' });\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                console.error(_context2.t0);\n                this.error = _context2.t0.message;\n\n              case 13:\n                _context2.prev = 13;\n                this.loading = false;\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 9, 13, 16]]);\n      }));\n\n      function loadCompany() {\n        return _loadCompany.apply(this, arguments);\n      }\n\n      return loadCompany;\n    }(),\n    updateCompany: function () {\n      var _updateCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var formIsValid, data;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                formIsValid = this.validateForm();\n\n                if (formIsValid) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                this.loading = true;\n                this.error = null;\n                _context3.prev = 5;\n                _context3.next = 8;\n                return API.post('company/save', {\n                  key: 'businessStructure',\n                  val: this.formData,\n                  userId: localStorage.getItem(\"userId\"),\n                  uuid: localStorage.getItem(\"uuid\")\n                });\n\n              case 8:\n                data = _context3.sent;\n\n                if (data.status === 'OK') {\n                  this.goNextForm();\n                } else if (data.status === 'ERROR') {\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context3.next = 16;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](5);\n                console.error(_context3.t0);\n                this.error = _context3.t0.message;\n\n              case 16:\n                _context3.prev = 16;\n                this.loading = false;\n                return _context3.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 12, 16, 19]]);\n      }));\n\n      function updateCompany() {\n        return _updateCompany.apply(this, arguments);\n      }\n\n      return updateCompany;\n    }()\n  }\n};",{"version":3,"sources":["AccountInfoBusinessStructure.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"business-structure-form container-fluid mob-2\">\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Business Structure</h4>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.businessStructure\"\n                  :class=\"{ 'has-error': formErrors.businessStructure }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessStructure')\"\n                  @focus=\"onFocus('businessStructure')\"\n                  @blur=\"onBlur\"\n                >\n                  <option disabled value=\"\">Business Structure*</option>\n                  <option\n                    v-for=\"item in businessStructures\"\n                    :key=\"item\"\n                    :value=\"item\"\n                  >\n                    {{ item }}\n                  </option>\n                </select>\n\n                <div v-if=\"formErrors.businessStructure\" class=\"text-danger\">\n                  {{ formErrors.businessStructure }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.businessClassification\"\n                  :class=\"{ 'has-error': formErrors.businessClassification }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessClassification')\"\n                  @focus=\"onFocus('businessClassification')\"\n                  @blur=\"onBlur\"\n                >\n\n                  <option disabled value=\"\">Business Classification*</option>\n                  <option\n                    v-for=\"item in businessClassifications\"\n                    :key=\"item\"\n                    :value=\"item\"\n                  >\n                    {{ item }}\n                  </option>\n                </select>\n\n                <div\n                  v-if=\"formErrors.businessClassification\"\n                  class=\"text-danger\"\n                >\n                  {{ formErrors.businessClassification }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-9\">\n              <div class=\"form-group\">\n                <input\n                  v-model=\"formData.MC\"\n                  :class=\"{ 'has-error': formErrors.MC }\"\n                  type=\"text\"\n                  class=\"lt-input\"\n                  placeholder=\"MC# (Optional)\"\n                  @focus=\"onFocus('MC')\"\n                  @blur=\"onBlur\"\n                />\n\n                <div v-if=\"formErrors.MC\" class=\"text-danger\">\n                  {{ formErrors.MC }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n\n          <h4 class=\"card-title form-sub-title\">Business Type</h4>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <select\n                  v-model=\"formData.businessType\"\n                  :class=\"{ 'has-error': formErrors.businessType }\"\n                  class=\"lt-input\"\n                  required\n                  @change=\"validateField('businessType')\"\n                  @focus=\"onFocus('businessType')\"\n                  @blur=\"onBlur\"\n                >\n                  <option disabled value=\"\">Business Type*</option>\n                  <option\n                    v-for=\"item in businessTypes\"\n                    :key=\"item\"\n                    :value=\"item\"\n                  >\n                    {{ item }}\n                  </option>\n                </select>\n\n                <div v-if=\"formErrors.businessType\" class=\"text-danger\">\n                  {{ formErrors.businessType }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">\n            {{ error }}\n          </div>  \n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default px-4 btn-block btn-border-radius-lb\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3\">\n                  Business Info\n                </div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main btn-block btn-border-radius-rb\"\n                @click=\"goNextForm\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 text-white\">\n                  Cargo Group\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n    <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n      <span class=\"save-hover\">Save & Continue</span>\n    </div>\n    <div class=\" \" v-if=\"showmodel\">\n      <modelLogin/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ModalLogin from \"./ModalLogin.vue\"\nimport {\n  validateField,\n  validateForm,\n  required,\n   minLength\n} from '../validators.js';\nimport { API } from '../api.js';\nimport {mapState} from \"vuex\"\nimport { constants } from 'fs';\n\nexport default {\n  name: 'AccountInfoBusinessStructure',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components:{\n    \"modelLogin\":ModalLogin\n  },\n  data() {\n    return {\n      showmodel:false,\n      save:true,\n      formData: {\n        businessStructure: '',\n        businessClassification: '',\n        MC: '',\n        businessType: ''\n      },\n      rules: {\n        businessStructure: [required],\n        businessClassification: [required],\n        businessType: [required]\n      },\n      formErrors: {},\n      hints: {\n        businessStructure: 'Some hint',\n        MC: 'Another hint'\n      },\n      businessStructures: [\n        'Sole Proprietorship',\n        'Partnership',\n        'Corporation',\n        'Limited Liability Company'\n      ],\n      \n      businessClassifications: [\n       'Private(Proerty)'\n       \n        // { name: 'Private (Property)', value: 'Private(Property)' }\n        // 'Private (Property)',\n      ],\n      businessTypes: [\n        'Trucker - General Freight',\n        'Dirt, Sand & Gravel (DSG) Hauler',\n        'Excavating, Landscaping or Building Contractor',\n        'Trucker - Refrigerated Goods',\n        'For-Hire Trucking – Additional Specialty Classes',\n        'Agricultural Hauling',\n        'Livestock Hauling',\n        'Farmer',\n        'Auto Hauler',\n        'Towing',\n        'Courier',\n        'Expediter',\n        'For-Hire Livery – Taxi, Black Car, Limousine, Sightseeing/Guided Tours',\n        'Not-For-Hire Livery – Social Services, Courtesy (Hotel) Shuttle, Religious Organization, Child/Adult Daycare'\n      ],\n      loading: false,\n      error: null\n    };\n  },\n \nmounted(){\n    if(localStorage.getItem(\"token\")){\n     this.save = false\n     this.$store.dispatch('loadData',localStorage.getItem(\"uuid\"))\n    let a = this.$store.state.getData.data[0]\n    let b = JSON.parse(a.val)\n    console.log(\"ba\",b)\n    this.formData.businessStructure =  b.businessStructure;\n    this.formData.businessClassification = b.businessClassification;  \n    this.formData.businessType = b.businessType\n    this.formData.MC = b.MC\n    console.log(\"b.businessStructure\",b.businessStructure)\n    console.log(\"b.\",b)\n    console.log(\"b.businessClassification\",b);\n   }else{\n     this.save = true\n   }\n },\n computed:{\n...mapState([\n    'data'\n  ])\n} ,\n updated(){\nif(localStorage.getItem(\"showModal\") == \"true\")\n     {\n       this.showmodel = true;\n     }\n     else{\n       this.showmodel = false;\n     }\n },\n  created() {\n    this.$emit('update-progress', this.progress);\n    // this.loadCompany();\n  },\n  methods: {    \n     async show() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n      \n      this.loading = true;\n      this.error = null;\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"cargoGroup\",\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n        if (data.status === \"OK\") {\n           if(this.showmodel){\n          this.showmodel = false;\n          \n        }else{\n          this.showmodel = true;\n        }\n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // this.showmodel = true;\n\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get('company/current');\n\n        if (data.status === 'OK') {\n          let { businessStructure } = data.data;\n          if (businessStructure) {\n            this.formData = {\n              ...this.formData,\n              ...businessStructure\n            };\n          }\n        } else if (data.status === 'ERROR') {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      let formIsValid = this.validateForm();\n      if (!formIsValid) {\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.post('company/save', {\n          key: 'businessStructure',\n          val: this.formData,\n          userId:localStorage.getItem(\"userId\"),\n          uuid:localStorage.getItem(\"uuid\")\n        });\n\n        if (data.status === 'OK') {\n          this.goNextForm();\n        } else if (data.status === 'ERROR') {\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n"],"sourceRoot":"src/components"}]}