{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoVehiclesAndTrailers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoVehiclesAndTrailers.vue","mtime":1563263991686},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validateField, validateForm, required, minLength } from '../validators.js';\nimport uuidv4 from \"uuid/v4\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"AccountInfoVehiclesAndTrailers\",\n  components: {\n    AccountInfoVehiclesAndTrailersItem: () => import(\n    /* webpackChunkName: \"AccountInfoVehiclesAndTrailersItem\" */\n    \"./AccountInfoVehiclesAndTrailersItem.vue\"),\n    modelLogin: ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      save: true,\n      vehiclesTrailers: [],\n      loading: false,\n      error: null,\n      vehicleOrTrailer: '',\n      formErrors: [],\n      type: ['Vehicle', 'Trailer']\n    };\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n    } else {\n      this.$store.dispatch('loadData', localStorage.getItem(\"uuid\"));\n      let a = this.$store.state.getData.data; //  let b = JSON.parse(a.val)\n\n      console.log(\"ba\", a);\n      this.save = true;\n    }\n  },\n\n  computed: _objectSpread({}, mapState(['data'])),\n\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n\n  created() {\n    this.$emit(\"update-progress\", this.progress); // this.loadCompany();\n  },\n\n  methods: {\n    addForm() {\n      this.vehiclesTrailers.push({\n        _uuid: uuidv4()\n      });\n      this.error = null;\n    },\n\n    removeForm(index) {\n      this.vehiclesTrailers.splice(index, 1);\n\n      if (!this.vehiclesTrailers.length) {\n        this.error = \"Please add at least one vehicle / trailer\";\n      }\n    },\n\n    updateHint(hint) {\n      this.$emit(\"update-hint\", hint);\n    },\n\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.vehicleOrTrailer, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.vehicleOrTrailer, this.rules, this.formErrors);\n    },\n\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n\n    show() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.setDataFromForms();\n\n        let vehicleForms = _this.$refs.vehicleForm;\n\n        if (!vehicleForms.length) {\n          return;\n        }\n\n        let allFormAreValid = vehicleForms.every(formRef => formRef.validateForm());\n\n        if (!allFormAreValid) {\n          return;\n        }\n\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"vehiclesTrailers\",\n            val: _this.vehiclesTrailers.map(v => {\n              let vehicle = _objectSpread({}, v);\n\n              delete vehicle._uuid;\n              return vehicle;\n            }),\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            if (_this.showmodel) {\n              _this.showmodel = false;\n            } else {\n              _this.showmodel = true;\n            }\n          } else if (data.status === \"ERROR\") {\n            _this.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          _this.loading = false;\n        }\n      })();\n    },\n\n    loadCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.get(\"company/current\");\n\n          if (data.status === \"OK\") {\n            let vehiclesTrailers = data.data.vehiclesTrailers;\n\n            if (vehiclesTrailers) {\n              // console.log(\"vehiclesTrailers\", uuidv4());\n              console.log(\"vehiclesTrailers\", vehiclesTrailers);\n              _this2.vehiclesTrailers = vehiclesTrailers.map(v => _objectSpread({}, v, {\n                _uuid: uuidv4()\n              }));\n            } else {\n              _this2.addForm();\n            }\n          } else if (data.status === \"ERROR\") {// this.$router.replace({ name: 'Home' });\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    },\n\n    setDataFromForms() {\n      let vehiclesTrailers = [];\n      this.$refs.vehicleForm.forEach(formRef => {\n        let formData = formRef.getFormData();\n        vehiclesTrailers.push(formData);\n      });\n      this.vehiclesTrailers = vehiclesTrailers;\n    },\n\n    updateCompany() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        _this3.setDataFromForms();\n\n        let vehicleForms = _this3.$refs.vehicleForm;\n\n        if (!vehicleForms.length) {\n          return;\n        }\n\n        let allFormAreValid = vehicleForms.every(formRef => formRef.validateForm());\n\n        if (!allFormAreValid) {\n          return;\n        }\n\n        _this3.loading = true;\n        _this3.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"vehiclesTrailers\",\n            val: _this3.vehiclesTrailers.map(v => {\n              let vehicle = _objectSpread({}, v);\n\n              delete vehicle._uuid;\n              return vehicle;\n            }),\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            _this3.goNextForm();\n          } else if (data.status === \"ERROR\") {\n            _this3.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this3.error = err.message;\n        } finally {\n          _this3.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}