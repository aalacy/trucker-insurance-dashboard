{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoVehiclesAndTrailers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoVehiclesAndTrailers.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport uuidv4 from 'uuid/v4';\nimport { API } from '../api.js';\nexport default {\n  name: 'AccountInfoVehiclesAndTrailers',\n  components: {\n    AccountInfoVehiclesAndTrailersItem: () => import(\n    /* webpackChunkName: \"AccountInfoVehiclesAndTrailersItem\" */\n    './AccountInfoVehiclesAndTrailersItem.vue')\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      vehiclesTrailers: [],\n      loading: false,\n      error: null\n    };\n  },\n\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n\n  methods: {\n    addForm() {\n      this.vehiclesTrailers.push({\n        _uuid: uuidv4()\n      });\n      this.error = null;\n    },\n\n    removeForm(index) {\n      this.vehiclesTrailers.splice(index, 1);\n\n      if (!this.vehiclesTrailers.length) {\n        this.error = 'Please add at least one vehicle / trailer';\n      }\n    },\n\n    updateHint(hint) {\n      this.$emit('update-hint', hint);\n    },\n\n    goPrevForm() {\n      this.$emit('go-to-form', this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit('go-to-form', this.nextForm);\n    },\n\n    loadCompany() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.get('company/current');\n\n          if (data.status === 'OK') {\n            let vehiclesTrailers = data.data.vehiclesTrailers;\n\n            if (vehiclesTrailers) {\n              _this.vehiclesTrailers = vehiclesTrailers.map(v => _objectSpread({}, v, {\n                _uuid: uuidv4()\n              }));\n            }\n          } else if (data.status === 'ERROR') {\n            _this.$router.replace({\n              name: 'Home'\n            });\n          }\n        } catch (err) {\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          _this.loading = false;\n        }\n      })();\n    },\n\n    setDataFromForms() {\n      let vehiclesTrailers = [];\n      this.$refs.vehicleForm.forEach(formRef => {\n        let formData = formRef.getFormData();\n        vehiclesTrailers.push(formData);\n      });\n      this.vehiclesTrailers = vehiclesTrailers;\n    },\n\n    updateCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.setDataFromForms();\n\n        let vehicleForms = _this2.$refs.vehicleForm;\n\n        if (!vehicleForms.length) {\n          return;\n        }\n\n        let allFormAreValid = vehicleForms.every(formRef => formRef.validateForm());\n\n        if (!allFormAreValid) {\n          return;\n        }\n\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.post('company/save', {\n            key: 'vehiclesTrailers',\n            val: _this2.vehiclesTrailers.map(v => {\n              let vehicle = _objectSpread({}, v);\n\n              delete vehicle._uuid;\n              return vehicle;\n            })\n          });\n\n          if (data.status === 'OK') {\n            _this2.goNextForm();\n          } else if (data.status === 'ERROR') {\n            _this2.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}