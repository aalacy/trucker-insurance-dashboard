{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/src/validators.js","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/validators.js","mtime":1558084536000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _Array$isArray from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport _getIterator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport Vue from 'vue';\nexport var validateField = function validateField() {\n  var fieldName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var formData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var formErrors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var fieldRules = rules[fieldName] || [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(fieldRules), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var ruleFunc = _step.value;\n      var error = ruleFunc(formData[fieldName]);\n      var fieldIsValid = typeof error !== 'string';\n\n      if (fieldIsValid) {\n        Vue.delete(formErrors, fieldName);\n      } else {\n        Vue.set(formErrors, fieldName, error);\n      }\n\n      if (!fieldIsValid) {\n        break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\nexport var validateForm = function validateForm() {\n  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var formErrors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  for (var fieldName in rules) {\n    validateField(fieldName, formData, rules, formErrors);\n  }\n\n  var formIsValid = _Object$keys(formErrors).length === 0;\n  return formIsValid;\n};\n/* RULES */\n\nexport var required = function required(val, errorMessage) {\n  return !!val || errorMessage || 'Field is required';\n};\nexport var requiredWith = function requiredWith(val, some, errorMessage) {\n  return some ? required(val, errorMessage) : true;\n};\nexport var minLength = function minLength(val, min, errorMessage) {\n  var isValidValue = false;\n\n  if (_Array$isArray(val) || typeof val === 'string') {\n    isValidValue = val.length >= min;\n  } else if (_typeof(val) === 'object' && val !== null) {\n    isValidValue = _Object$keys(val).length >= min;\n  }\n\n  return isValidValue || errorMessage || 'Field is required';\n};",null]}