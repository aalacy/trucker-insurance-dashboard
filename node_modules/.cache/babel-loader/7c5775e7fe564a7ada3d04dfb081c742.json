{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoVehiclesAndTrailersItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoVehiclesAndTrailersItem.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["import _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validateField, validateForm, required, requiredWith } from '../validators.js';\nimport { API } from '../api.js';\nexport default {\n  name: 'AccountInfoVehiclesAndTrailersItem',\n  props: {\n    index: {\n      type: Number,\n      required: true\n    },\n    vehicle: {\n      type: Object,\n      required: false,\n\n      default() {\n        return {};\n      }\n\n    }\n  },\n\n  data() {\n    return {\n      formData: {\n        VIN: '',\n        year: '',\n        make: '',\n        model: '',\n        vehicleType: '',\n        zipCode: '',\n        radiusOfTravel: 50,\n        coverage: false,\n        currentValue: '',\n        deductible: ''\n      },\n      vehicleImage: {\n        img1: \"\",\n        img2: \"\",\n        img3: \"\",\n        img4: \"\",\n        img5: ''\n      },\n      rules: {\n        VIN: [required],\n        year: [required],\n        make: [required],\n        model: [required],\n        vehicleType: [required],\n        zipCode: [required],\n        currentValue: [val => requiredWith(val, this.formData.coverage)],\n        deductible: [val => requiredWith(val, this.formData.coverage)]\n      },\n      formErrors: {},\n      hints: {\n        VIN: 'Some asshint'\n      },\n      deductibles: [{\n        name: '$ 500',\n        value: '500'\n      }, {\n        name: '$ 1000',\n        value: '1000'\n      }, {\n        name: '$ 2500',\n        value: '2500'\n      }, {\n        name: '$ 5000',\n        value: '5000'\n      }],\n      vehicleTypes: ['Auto Hauler', 'Bottom Dump Trailer', 'Bulk Commodity Trailer', 'Concession Trailer', 'Dry Freight Trailer', 'Dump Body Trailer / Transfer Box', 'Flatbed Trailer', 'Gooseneck Trailer', 'Horse Trailer', 'Livestock Trailer', 'Logging Trailer', 'Low-Boy Trailer', 'Pole Trailer', 'Refrigerated Dry Freight Trailer', 'Tank Trailer', 'Tilt Trailer', 'Travel Trailer', 'Utility Trailer', 'Bus', 'Car', 'Cargo Van', 'Hearse', 'Limousine', 'Mini Van', 'Motor Home', 'Passenger Van', 'Pickup Truck', 'Sport Utility Vehicle', 'Truck', 'Emergency Vehicle', 'Military Vehicle'],\n      radiuses: [0, 100, 200, 300, 500, 1000, 'Unlimited'],\n      loading: false,\n      error: null\n    };\n  },\n\n  computed: {\n    currentValueOfTransport: {\n      get() {\n        return \"$ \".concat(this.formData.currentValue);\n      },\n\n      set(val) {\n        let price = val // replace dollars and spaces to empty string\n        .replace(/[$\\s]/g, '') // replace all commas to dots\n        .replace(/,/g, '.');\n        this.formData.currentValue = price;\n      }\n\n    },\n    radiusOfTravel: {\n      get() {\n        let index = this.radiuses.findIndex(radius => radius == this.formData.radiusOfTravel);\n        return index > -1 ? index : 1;\n      },\n\n      set(index) {\n        this.formData.radiusOfTravel = this.radiuses[index];\n      }\n\n    }\n  },\n  watch: {\n    'formData.coverage'(val) {\n      if (!val) {\n        this.formData.currentValue = '';\n        this.formData.deductible = '';\n      }\n    }\n\n  },\n\n  created() {\n    this.formData = _objectSpread({}, this.formData, this.vehicle);\n\n    if (!this.formData.VIN) {\n      this.formData.VIN = process.env.VUE_APP_TEST_VIN || '';\n    }\n  },\n\n  methods: {\n    getFormData() {\n      return this.formData;\n    },\n\n    removeForm(index) {\n      this.$emit('remove-form', index);\n    },\n\n    onFocus(fieldName) {\n      this.$emit('update-hint', this.hints[fieldName]);\n    },\n\n    onBlur() {\n      this.$emit('update-hint', '');\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n\n    getVinData() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this.formData.VIN) {\n          return;\n        }\n\n        _this.loading = true;\n\n        try {\n          let data = yield API.get('company/vin', {\n            vin: _this.formData.VIN\n          });\n          _this.formData = _objectSpread({}, _this.formData, data.data);\n        } catch (err) {\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          _this.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}