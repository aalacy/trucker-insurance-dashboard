{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoCargoHauled.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoCargoHauled.vue","mtime":1561976097267},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from \"vuex\";\nimport { validateField, validateForm, minLength } from \"../validators.js\";\nimport { API } from \"../api.js\";\nexport default {\n  name: \"AccountInfoCargoHauled\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      cargoGroup: [],\n      formData: {\n        haulType: {}\n      },\n      rules: {\n        haulType: [val => minLength(val, 1, \"Please select Haul Type\")]\n      },\n      formErrors: {},\n      loading: false,\n      error: null\n    };\n  },\n\n  computed: _objectSpread({}, mapState(\"cargo\", [\"cargoGroups\"]), {\n    selectedCargoGroups() {\n      return this.cargoGroups.filter(group => this.cargoGroup.indexOf(group.value) > -1);\n    },\n\n    cargoHauledMap() {\n      let map = {};\n\n      for (let cargoGroupValue in this.formData.haulType) {\n        map[cargoGroupValue] = {};\n        let haulTypes = this.formData.haulType[cargoGroupValue];\n        haulTypes.forEach(haulType => {\n          map[cargoGroupValue][haulType] = true;\n        });\n      }\n\n      return map;\n    }\n\n  }),\n\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n\n  methods: {\n    selectHaulType(cargoGroupValue, haulTypeValue) {\n      if (!this.formData.haulType[cargoGroupValue]) {\n        this.$set(this.formData.haulType, cargoGroupValue, []);\n      }\n\n      let haulTypeIndex = this.formData.haulType[cargoGroupValue].indexOf(haulTypeValue);\n\n      if (haulTypeIndex > -1) {\n        this.formData.haulType[cargoGroupValue].splice(haulTypeIndex, 1);\n\n        if (!this.formData.haulType[cargoGroupValue].length) {\n          this.$delete(this.formData.haulType, cargoGroupValue);\n        }\n      } else {\n        this.formData.haulType[cargoGroupValue].push(haulTypeValue);\n      }\n\n      this.formErrors = {};\n    },\n\n    goPrevForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit(\"update-hint\", \"\");\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n\n    loadCompany() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.get(\"company/current\");\n\n          if (data.status === \"OK\") {\n            let _data$data = data.data,\n                cargoGroupTab = _data$data.cargoGroup,\n                cargoHauled = _data$data.cargoHauled;\n            let cargoGroup = cargoGroupTab.cargoGroup;\n            let groupData = data.data.cargoGroup; // console.log(\"groupData\",groupData.cargoGroup)\n\n            _this.cargoGroup = groupData.cargoGroup;\n\n            if (cargoHauled) {\n              _this.formData = _objectSpread({}, _this.formData, cargoHauled);\n            }\n          } else if (data.status === \"ERROR\") {\n            _this.$router.replace({\n              name: \"Home\"\n            });\n          }\n        } catch (err) {\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          _this.loading = false;\n        }\n      })();\n    },\n\n    updateCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        let formIsValid = _this2.validateForm();\n\n        if (!formIsValid) {\n          return;\n        }\n\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"cargoHauled\",\n            val: _this2.formData\n          });\n\n          if (data.status === \"OK\") {\n            _this2.goNextForm();\n          } else if (data.status === \"ERROR\") {\n            _this2.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}