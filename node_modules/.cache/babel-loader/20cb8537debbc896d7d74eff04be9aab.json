{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoSignComplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoSignComplete.vue","mtime":1563365589846},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.date.to-json\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validateField as _validateField, validateForm as _validateForm, required } from \"../validators.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nexport default {\n  name: \"AccountInfoSignComplete\",\n  components: {\n    modelLogin: ModalLogin\n  },\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      showmodel: false,\n      save: true,\n      formData: {\n        dobM: \"\",\n        dobD: \"\",\n        dobY: \"\",\n        imageIdFront: null\n      },\n      preview: {\n        imageIdFront: null\n      },\n      rules: {\n        dobM: [required],\n        dobD: [required],\n        dobY: [required] // sign: [required]\n\n      },\n      formErrors: {},\n      hints: {},\n      loading: false,\n      error: null\n    };\n  },\n  updated: function updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  created: function created() {\n    var dobM = \"\",\n        imageSign = \"\",\n        dobD = \"\",\n        dobY = \"\"; // this.$emit(\"update-progress\", this.progress);\n    // if (this.driver.dateOfSign) {\n    //       [dobM, dobD, dobY] = this.driver.dateOfSign.split('/');\n    //     }\n\n    this.formData = _objectSpread({}, this.formData, {\n      //   ...this.driver,\n      dobM: dobM,\n      dobD: dobD,\n      dobY: dobY\n    });\n  },\n  mounted: function mounted() {\n    var currentDate = new Date();\n    var currentDateWithFormat = new Date().toJSON().slice(0, 10).replace(/-/g, '/');\n\n    var _currentDateWithForma = currentDateWithFormat.split('/');\n\n    var _currentDateWithForma2 = _slicedToArray(_currentDateWithForma, 3);\n\n    this.formData.dobD = _currentDateWithForma2[0];\n    this.formData.dobM = _currentDateWithForma2[1];\n    this.formData.dobY = _currentDateWithForma2[2];\n\n    //     var startdate = moment();\n    // startdate = startdate.subtract(1, \"days\");\n    // startdate = startdate.format(\"DD-MM-YYYY\");\n    // var startdate = moment().subtract(1, \"days\").format(\"DD-MM-YYYY\");\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n    } else {\n      this.save = true;\n    }\n  },\n  methods: {\n    show: function show() {\n      if (this.showmodel) {\n        this.showmodel = false;\n      } else {\n        this.showmodel = true;\n      }\n    },\n    setImage: function setImage(event, fieldName) {\n      var files = event.target.files;\n      var image = files[0] || null;\n      this.formData[fieldName] = image;\n      this.previewFile(image, fieldName); // this.validateField(fieldName);\n    },\n    previewFile: function previewFile(file, fieldName) {\n      var _this = this;\n\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        _this.preview[fieldName] = reader.result;\n      };\n\n      if (file) {\n        reader.readAsDataURL(file);\n      } else {\n        this.preview[fieldName] = null;\n      }\n    },\n    clearFiles: function clearFiles() {\n      this.$refs[\"file-input\"].reset();\n    },\n    updateCompany: function () {\n      var _updateCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function updateCompany() {\n        return _updateCompany.apply(this, arguments);\n      }\n\n      return updateCompany;\n    }(),\n    goPrevForm: function goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm: function goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    onFocus: function onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n    onBlur: function onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n    validateField: function validateField(fieldName) {\n      _validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n    validateForm: function validateForm() {\n      this.formErrors = {};\n      return _validateForm(this.formData, this.rules, this.formErrors);\n    }\n  },\n  computed: {\n    dateOfSign: function dateOfSign() {\n      var _this$formData = this.formData,\n          m = _this$formData.dobM,\n          d = _this$formData.dobD,\n          y = _this$formData.dobY;\n\n      if (m.length < 2) {\n        m = \"0\".concat(m);\n      }\n\n      if (d.length < 2) {\n        d = \"0\".concat(d);\n      }\n\n      return \"\".concat(m, \"/\").concat(d, \"/\").concat(y);\n    }\n  }\n};",null]}