{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/src/validators.js","dependencies":[{"path":"/home/ubuntu/luckytruck/src/validators.js","mtime":1561725709702},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport Vue from 'vue';\nexport const validateField = function validateField() {\n  let fieldName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let formData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let formErrors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let fieldRules = rules[fieldName] || [];\n\n  for (let ruleFunc of fieldRules) {\n    let error = ruleFunc(formData[fieldName]);\n    let fieldIsValid = typeof error !== 'string';\n\n    if (fieldIsValid) {\n      Vue.delete(formErrors, fieldName);\n    } else {\n      Vue.set(formErrors, fieldName, error);\n    }\n\n    if (!fieldIsValid) {\n      break;\n    }\n  }\n};\nexport const validateForm = function validateForm() {\n  let formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let formErrors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  for (let fieldName in rules) {\n    validateField(fieldName, formData, rules, formErrors);\n  }\n\n  let formIsValid = Object.keys(formErrors).length === 0;\n  return formIsValid;\n};\n/* RULES */\n\nexport const required = (val, errorMessage) => !!val || errorMessage || 'Field is required';\nexport const requiredWith = (val, some, errorMessage) => some ? required(val, errorMessage) : true;\nexport const minLength = (val, min, errorMessage) => {\n  let isValidValue = false;\n\n  if (Array.isArray(val) || typeof val === 'string') {\n    isValidValue = val.length >= min;\n  } else if (typeof val === 'object' && val !== null) {\n    isValidValue = Object.keys(val).length >= min;\n  }\n\n  return isValidValue || errorMessage || 'Field is required';\n};",null]}