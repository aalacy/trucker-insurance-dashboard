{"remainingRequest":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/babel-loader/lib/index.js!/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoQuestions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/src/components/AccountInfoQuestions.vue","mtime":1571770663139},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/raqu/repos/LuckyTruck_UI_Solulab/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\nimport axios from \"axios\";\nimport { setTimeout } from 'timers';\nexport default {\n  name: \"AccountInfoQuestions\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios.get(\"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" + localStorage.getItem(\"userId\")).then(function (coins) {\n        _this.userData = coins.data.uuid;\n      });\n      setTimeout(function () {\n        _this.$store.dispatch(\"loadData\", _this.userData).then(function () {\n          var len = _this.$store.state.getData.data;\n\n          for (var i = 0; i <= len.length; i++) {\n            if (_this.$store.state.getData.data[i].key == \"questions\") {\n              var a = _this.$store.state.getData.data[i];\n              var b = JSON.parse(a.val);\n              _this.formData.question1 = b.question1;\n            }\n          } //  this.formData.question2 = b.question2;\n\n        });\n      }, 1000);\n    } else {\n      this.save = true;\n      setTimeout(function () {\n        _this.$store.dispatch(\"loadData\", _this.uuid).then(function () {\n          var len = _this.$store.state.getData.data;\n\n          for (var i = 0; i <= len.length; i++) {\n            if (_this.$store.state.getData.data[i].key == \"questions\") {\n              var a = _this.$store.state.getData.data[i];\n              var b = JSON.parse(a.val);\n              _this.formData.question1 = b.question1;\n            }\n          } //  this.formData.question2 = b.question2;\n\n        });\n      }, 1000);\n    }\n  },\n  computed: _objectSpread({}, mapState([\"data\"])),\n  data: function data() {\n    return {\n      showmodel: false,\n      save: true,\n      final_uuid: \"\",\n      userData: \"\",\n      questions: [{\n        key: \"question1\",\n        text: \"\",\n        required: true\n      } // { key: \"question2\", text: \"Question 2\", required: true }\n      ],\n      formData: {\n        question1: \"\" // question2: \"\"\n\n      },\n      rules: {\n        question1: [required] // question2: [required]\n\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created: function created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated: function updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    newQuoteReq: function newQuoteReq() {\n      var _this2 = this;\n\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(function (willDelete) {\n        _this2.show();\n\n        if (willDelete) {\n          _this2.$router.push({\n            name: \"AccountInfoQuestions\"\n          });\n        } else {\n          swal(\"Thank You!\", \"Your changes has been accepted! You will get new Updated Quote\", {\n            icon: \"success\"\n          });\n        }\n      });\n    },\n    show: function () {\n      var _show = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var temp_uuid, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n\n                if (localStorage.getItem(\"token\")) {\n                  temp_uuid = this.userData;\n                } else {\n                  temp_uuid = this.uuid;\n                }\n\n                _context.prev = 3;\n                _context.next = 6;\n                return API.post(\"company/save\", {\n                  key: \"questions\",\n                  val: this.formData,\n                  user_id: localStorage.getItem(\"userId\"),\n                  uuid: temp_uuid\n                });\n\n              case 6:\n                data = _context.sent;\n\n                if (data.status === \"OK\") {\n                  if (!localStorage.getItem(\"token\")) {\n                    if (this.showmodel) {\n                      this.showmodel = false;\n                    } else {\n                      this.showmodel = true;\n                    }\n                  }\n                } else if (data.status === \"ERROR\") {\n                  // this.showmodel = true;\n                  this.error = data.messages[0] || data.data;\n                }\n\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                // this.showmodel = true;\n                console.error(_context.t0);\n                this.error = _context.t0.message;\n\n              case 14:\n                _context.prev = 14;\n                // this.showmodel = true;\n                this.loading = false;\n                return _context.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10, 14, 17]]);\n      }));\n\n      function show() {\n        return _show.apply(this, arguments);\n      }\n\n      return show;\n    }(),\n    goPrevForm: function goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm: function goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    loadCompany: function () {\n      var _loadCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var data, questions;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return API.get(\"company/current\");\n\n              case 5:\n                data = _context2.sent;\n\n                if (data.status === \"OK\") {\n                  questions = data.data.questions;\n                  this.uuid = data.data.b;\n\n                  if (questions) {\n                    this.formData = _objectSpread({}, this.formData, {}, questions);\n                  }\n                } else if (data.status === \"ERROR\") {// this.$router.replace({ name: 'Home' });\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                console.error(_context2.t0);\n                this.error = _context2.t0.message;\n\n              case 13:\n                _context2.prev = 13;\n                this.loading = false;\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 9, 13, 16]]);\n      }));\n\n      function loadCompany() {\n        return _loadCompany.apply(this, arguments);\n      }\n\n      return loadCompany;\n    }(),\n    updateCompany: function () {\n      var _updateCompany = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var data;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.loading = true;\n                this.error = null;\n\n                if (localStorage.getItem('token')) {\n                  this.final_uuid = this.userData;\n                } else {\n                  this.final_uuid = this.uuid;\n                }\n\n                _context3.prev = 3;\n                _context3.next = 6;\n                return API.post(\"company/save\", {\n                  key: \"questions\",\n                  val: this.formData,\n                  user_id: localStorage.getItem(\"userId\"),\n                  uuid: this.final_uuid\n                });\n\n              case 6:\n                data = _context3.sent;\n\n                if (data.status === \"OK\") {\n                  this.goNextForm();\n                } else if (data.status === \"ERROR\") {\n                  this.error = data.messages[0] || data.data;\n                }\n\n                axios.post(\"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\" + this.final_uuid + \"&user_id=\" + localStorage.getItem(\"userId\")).then(function (res) {});\n                _context3.next = 15;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](3);\n                console.error(_context3.t0);\n                this.error = _context3.t0.message;\n\n              case 15:\n                _context3.prev = 15;\n                this.loading = false;\n                return _context3.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 11, 15, 18]]);\n      }));\n\n      function updateCompany() {\n        return _updateCompany.apply(this, arguments);\n      }\n\n      return updateCompany;\n    }()\n  }\n};",{"version":3,"sources":["AccountInfoQuestions.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"account-info-questions-form container-fluid mob-2\">\n            \n\n    <form @submit.prevent=\"updateCompany\">\n      <div class=\"card mb-5\">\n        <div class=\"card-body\">\n          <h4 class=\"card-title form-sub-title\">Additional Comments</h4>\n\n          <div v-for=\"{ text, key } in questions\" :key=\"key\" class=\"mb-2\">\n            <div>{{ text }}</div>\n               <div class=\"m-1 pb-2\">\n           <span>If you have any additional comments or concerns regarding your quotation, please list them here. \n</span>\n           </div>\n\n            <div>\n              <textarea v-model=\"formData[key]\" class=\"answer\"></textarea>\n            </div>\n          </div>\n\n          <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">{{ error }}</div>\n        </div>\n        <div class=\"card-footer\">\n          <div class=\"form-buttons next-wrapper\">\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"button\"\n                class=\"lt-button lt-button-default px-4 btn-block btn-border-radius-lb mob-2\"\n                @click=\"goPrevForm\"\n              >\n                Prev\n                <div class=\"next-title text-center d-inline pl-3 mob-2\">Owners</div>\n              </button>\n            </div>\n\n            <div class=\"col-6 p-0\">\n              <button\n                :disabled=\"loading\"\n                type=\"submit\"\n                class=\"lt-button lt-button-main px-4 mob-2 btn-block btn-border-radius-rb\"\n              >\n                {{ loading ? 'Loading...' : 'Next' }}\n                <div class=\"next-title text-center d-inline pl-3 mob-2 text-white\">Document Upload</div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"d-flex justify-content-center m-4\" @click=\"show\" v-if=\"save\">\n        <span class=\"save-hover\">Save & Continue</span>\n      </div>\n      <div class=\"d-flex justify-content-center m-4\" @click=\"newQuoteReq\" v-else>\n        <span class=\"save-hover\">Save Changes</span>\n      </div>\n      <div v-if=\"showmodel\">\n        <modelLogin/>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ModalLogin from \"./ModalLogin.vue\";\nimport { mapState } from \"vuex\";\nimport axios from \"axios\";\nimport { setTimeout } from 'timers';\n\nexport default {\n  name: \"AccountInfoQuestions\",\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    modelLogin: ModalLogin,\n\n  },\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.save = false;\n      axios\n      .get(\n        \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/getuuidbyuserid?user_id=\" +\n          localStorage.getItem(\"userId\")\n      )\n      .then(coins => {\n        this.userData = coins.data.uuid;\n      });\n      setTimeout(()=>{\n this.$store\n        .dispatch(\"loadData\", this.userData)\n        .then(() => {\n          let len = this.$store.state.getData.data;\n          for(let i=0;i<=len.length;i++){\n            if(this.$store.state.getData.data[i].key==\"questions\"){\n          let a = this.$store.state.getData.data[i];\n          let b = JSON.parse(a.val);\n                   \n\n          this.formData.question1 = b.question1;\n            }\n          }\n          \n          //  this.formData.question2 = b.question2;\n        });\n      },1000)\n  \n     \n    } else {\n      this.save = true;\n      setTimeout(()=>{\n         this.$store\n        .dispatch(\"loadData\",this.uuid)\n        .then(() => {\n          let len = this.$store.state.getData.data;\n          for(let i=0;i<=len.length;i++){\n            if(this.$store.state.getData.data[i].key==\"questions\"){\n          let a = this.$store.state.getData.data[i];\n          let b = JSON.parse(a.val);\n                   \n\n          this.formData.question1 = b.question1;\n            }\n          }\n          \n          //  this.formData.question2 = b.question2;\n        });\n    \n      },1000)\n    } \n     \n  },\n  computed: {\n    ...mapState([\"data\"])\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      save: true,\n      final_uuid:\"\",\n      userData:\"\",\n      questions: [\n        { key: \"question1\", text: \"\", required: true }\n        // { key: \"question2\", text: \"Question 2\", required: true }\n      ],\n      formData: {\n        question1: \"\"\n        // question2: \"\"\n      },\n      rules: {\n        question1: [required]\n        // question2: [required]\n      },\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n  methods: {\n    newQuoteReq() {\n      swal({\n        title: \"Are you sure?\",\n        text: \"Do you want to continue editing?\",\n        icon: \"warning\",\n        buttons: [\"No\", \"Yes\"]\n      }).then(willDelete => {\n       \n        this.show();\n        if (willDelete) {\n          \n          this.$router.push({ name: \"AccountInfoQuestions\" });\n        } else {\n          swal(\n            \"Thank You!\",\n            \"Your changes has been accepted! You will get new Updated Quote\",\n            {\n              icon: \"success\"\n            }\n          );\n        }\n      });\n    },\n    async show() {\n      this.loading = true;\n      this.error = null;\n      var temp_uuid;\n       if (localStorage.getItem(\"token\")) {\n        temp_uuid = this.userData;\n       \n      } else {\n        temp_uuid = this.uuid;\n       \n      }\n      \n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"questions\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: temp_uuid\n        });\n\n        if (data.status === \"OK\") {\n          if(!localStorage.getItem(\"token\")){\n              if (this.showmodel) {\n            this.showmodel = false;\n          } else {\n            this.showmodel = true;\n          }\n          }\n          \n        } else if (data.status === \"ERROR\") {\n          // this.showmodel = true;\n          this.error = data.messages[0] || data.data;\n        }\n      } catch (err) {\n        // this.showmodel = true;\n\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        // this.showmodel = true;\n        this.loading = false;\n      }\n    },\n    goPrevForm() {\n      this.$emit(\"go-to-form\", this.prevForm);\n    },\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n    async loadCompany() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        let data = await API.get(\"company/current\");\n\n        if (data.status === \"OK\") {\n          let { questions } = data.data;\n          this.uuid = data.data.b;\n          if (questions) {\n            this.formData = {\n              ...this.formData,\n              ...questions\n            };\n          }\n        } else if (data.status === \"ERROR\") {\n          // this.$router.replace({ name: 'Home' });\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateCompany() {\n      this.loading = true;\n      this.error = null;\n          if(localStorage.getItem('token')){\n        \n          this.final_uuid = this.userData;\n         \n      }else{\n        this.final_uuid = this.uuid;\n       \n      }\n      try {\n        let data = await API.post(\"company/save\", {\n          key: \"questions\",\n          val: this.formData,\n          user_id: localStorage.getItem(\"userId\"),\n          uuid: this.final_uuid,\n        });\n\n        if (data.status === \"OK\") {\n          this.goNextForm();\n        } else if (data.status === \"ERROR\") {\n          this.error = data.messages[0] || data.data;\n        }\n             axios.post(\n          \"http://3.13.68.92/luckytrucker_admin/api/CompanyController/postUserIdByUuid?uuid=\"+ this.final_uuid+\"&user_id=\"+localStorage.getItem(\"userId\")\n        )\n        .then(res => {\n         \n        })\n      } catch (err) {\n        console.error(err);\n        this.error = err.message;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.account-info-questions-form {\n  .answer {\n    border: 1px solid #b3aaaa;\n    width: 100%;\n    height: 80px;\n    border-radius: 10px;\n    margin-top: 10px;\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}