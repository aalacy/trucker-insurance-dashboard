{"remainingRequest":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js!/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/luckytruck/src/components/AccountInfoPersonalInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu/luckytruck/src/components/AccountInfoPersonalInfo.vue","mtime":1561725709698},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/babel-loader/lib/index.js","mtime":1561725708306},{"path":"/home/ubuntu/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":1561725708362},{"path":"/home/ubuntu/luckytruck/node_modules/vue-loader/lib/index.js","mtime":1561725709586}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/ubuntu/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validateField, validateForm, required } from \"../validators.js\";\nimport { API } from \"../api.js\";\nimport ChatBoat from \"./ChatBoat.vue\";\nexport default {\n  name: \"AccountInfoPersonalInfo\",\n  components: {\n    \"chat-boat\": ChatBoat\n  },\n  props: {\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  mounted() {\n    this.formData.USDOT = localStorage.getItem(\"usdot\");\n    this.formData.company = localStorage.getItem(\"company\");\n    console.log(\"this.formData.address\", this.formData.address);\n    this.formData.address = localStorage.getItem([\"Physical address\"]);\n    console.log(\"this.formData.address\", this.formData.address);\n    this.formData.phone = localStorage.getItem(\"Phone\");\n  },\n\n  data() {\n    return {\n      checked: true,\n      formData: {\n        // firstName: \"\",\n        // lastName: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n        USDOT: \"\",\n        company: '',\n        phone: '',\n        address1: \"\",\n        city1: \"\",\n        state1: \"\",\n        zip1: \"\"\n      },\n      rules: {\n        // firstName: [required],\n        // lastName: [required],\n        address: [required],\n        city: [required],\n        state: [required],\n        zip: [required]\n      },\n      formErrors: {},\n      hints: {\n        address: \"Another hint\"\n      },\n      loading: false,\n      error: null\n    };\n  },\n\n  created() {\n    this.$emit(\"update-progress\", this.progress);\n    this.loadCompany();\n  },\n\n  methods: {\n    onFocus(fieldName) {\n      this.$emit(\"update-hint\", this.hints[fieldName]);\n    },\n\n    onBlur() {\n      this.$emit(\"update-hint\", \"\");\n    },\n\n    goNextForm() {\n      this.$emit(\"go-to-form\", this.nextForm);\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n\n    loadCompany() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.get(\"company/current\");\n\n          if (data.status === \"OK\") {\n            let personalInfo = data.data.personalInfo;\n\n            if (personalInfo) {\n              _this.formData = _objectSpread({}, _this.formData, personalInfo);\n            }\n          } else if (data.status === \"ERROR\") {\n            _this.$router.replace({\n              name: \"Home\"\n            });\n          }\n        } catch (err) {\n          console.error(err);\n          _this.error = err.message;\n        } finally {\n          _this.loading = false;\n        }\n      })();\n    },\n\n    updateCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        let formIsValid = _this2.validateForm();\n\n        if (!formIsValid) {\n          return;\n        }\n\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"personalInfo\",\n            val: _this2.formData\n          });\n\n          if (data.status === \"OK\") {\n            _this2.goNextForm();\n          } else if (data.status === \"ERROR\") {\n            // console.log(\"data\",data)\n            _this2.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          // console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}