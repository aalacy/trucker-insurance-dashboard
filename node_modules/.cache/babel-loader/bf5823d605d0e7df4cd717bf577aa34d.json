{"remainingRequest":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js!/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/luckytruck/src/components/AccountInfoEldProvider.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/luckytruck/src/components/AccountInfoEldProvider.vue","mtime":1563362891775},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Desktop/luckytruck/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _asyncToGenerator from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/admin/Desktop/luckytruck/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { validateField, validateForm, minLength } from '../validators.js';\nimport { API } from '../api.js';\nimport ModalLogin from \"./ModalLogin.vue\";\nexport default {\n  name: 'AccountInfoEldProvider',\n  props: {\n    prevForm: {\n      type: String,\n      required: true\n    },\n    nextForm: {\n      type: String,\n      required: true\n    },\n    progress: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      showmodel: false,\n      formData: {\n        eldProvider: []\n      },\n      rules: {\n        eldProvider: [val => minLength(val, 1, 'Please select ELD Provider')]\n      },\n      formErrors: {},\n      hints: {},\n      userProviders: [],\n      userProviderName: '',\n      loading: false,\n      error: null,\n      save: true\n    };\n  },\n\n  computed: _objectSpread({}, mapState('eld', ['eldProviders']), {\n    allProviders() {\n      return this.eldProviders.concat(this.userProviders);\n    },\n\n    eldProviderMap() {\n      let map = {};\n      this.formData.eldProvider.forEach(val => map[val] = true);\n      return map;\n    }\n\n  }, mapState(['data'])),\n\n  created() {\n    this.$emit('update-progress', this.progress);\n    this.loadCompany();\n  },\n\n  components: {\n    \"modelLogin\": ModalLogin\n  },\n\n  mounted() {\n    if (localStorage.getItem(\"token\")) {\n      this.$store.dispatch('loadData', localStorage.getItem(\"uuid\"));\n      let a = this.$store.state.getData.data[6];\n      let b = JSON.parse(a.val).eldProvider;\n      console.log(b);\n      let c = [];\n\n      for (var i = 0; i < b.length; i++) {\n        c.push(b[i]);\n      }\n\n      let filteredKeywords = c.filter(word => b.includes(word));\n      console.log(\"filteredKeywords\", filteredKeywords);\n\n      for (var i = 0; i < filteredKeywords.length; i++) {\n        this.selectProvider(filteredKeywords[i]);\n      }\n\n      this.save = false;\n    } else {\n      this.save = true;\n    }\n  },\n\n  updated() {\n    if (localStorage.getItem(\"showModal\") == \"true\") {\n      this.showmodel = true;\n    } else {\n      this.showmodel = false;\n    }\n  },\n\n  methods: {\n    show() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let formIsValid = _this.validateForm();\n\n        if (!formIsValid) {\n          return;\n        }\n\n        _this.loading = true;\n        _this.error = null;\n\n        try {\n          let data = yield API.post(\"company/save\", {\n            key: \"eldProvider\",\n            val: _this.formData,\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === \"OK\") {\n            if (_this.showmodel) {\n              _this.showmodel = false;\n            } else {\n              _this.showmodel = true;\n            }\n          } else if (data.status === \"ERROR\") {\n            _this.showmodel = true;\n            _this.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err); // this.showmodel = true;\n\n          _this.error = err.message;\n        } finally {\n          // this.showmodel = true;\n          _this.loading = false;\n        }\n      })();\n    },\n\n    addProvider() {\n      if (!this.userProviderName || this.eldProviderMap[this.userProviderName]) {\n        return;\n      }\n\n      this.userProviders.push({\n        value: this.userProviderName\n      });\n      this.userProviderName = '';\n    },\n\n    selectProvider(providerValue) {\n      if (this.eldProviderMap[providerValue]) {\n        this.formData.eldProvider = this.formData.eldProvider.filter(val => val !== providerValue);\n        this.$emit('update-hint', '');\n      } else {\n        this.formData.eldProvider.push(providerValue);\n        this.$emit('update-hint', this.hints[providerValue]);\n      }\n\n      this.formErrors = {};\n    },\n\n    goPrevForm() {\n      this.$emit('update-hint', '');\n      this.$emit('go-to-form', this.prevForm);\n    },\n\n    goNextForm() {\n      this.$emit('update-hint', '');\n      this.$emit('go-to-form', this.nextForm);\n    },\n\n    validateField(fieldName) {\n      validateField(fieldName, this.formData, this.rules, this.formErrors);\n    },\n\n    validateForm() {\n      this.formErrors = {};\n      return validateForm(this.formData, this.rules, this.formErrors);\n    },\n\n    loadCompany() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.loading = true;\n        _this2.error = null;\n\n        try {\n          let data = yield API.get('company/current');\n\n          if (data.status === 'OK') {\n            let eldProviderTab = data.data.eldProvider;\n\n            if (eldProviderTab) {\n              _this2.formData = _objectSpread({}, _this2.formData, eldProviderTab);\n              let eldProvider = eldProviderTab.eldProvider;\n\n              _this2.addUserProviders(eldProvider);\n            }\n          } else if (data.status === 'ERROR') {// this.$router.replace({ name: 'Home' });\n          }\n        } catch (err) {\n          console.error(err);\n          _this2.error = err.message;\n        } finally {\n          _this2.loading = false;\n        }\n      })();\n    },\n\n    addUserProviders(eldProvider) {\n      eldProvider.forEach(providerName => {\n        let providersIndex = this.eldProviders.findIndex(p => p.value === providerName);\n\n        if (providersIndex === -1) {\n          this.userProviders.push({\n            value: providerName\n          });\n        }\n      });\n    },\n\n    updateCompany() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        let formIsValid = _this3.validateForm();\n\n        if (!formIsValid) {\n          return;\n        }\n\n        _this3.loading = true;\n        _this3.error = null;\n\n        try {\n          let data = yield API.post('company/save', {\n            key: 'eldProvider',\n            val: _this3.formData,\n            userId: localStorage.getItem(\"userId\"),\n            uuid: localStorage.getItem(\"uuid\")\n          });\n\n          if (data.status === 'OK') {\n            _this3.goNextForm();\n          } else if (data.status === 'ERROR') {\n            _this3.error = data.messages[0] || data.data;\n          }\n        } catch (err) {\n          console.error(err);\n          _this3.error = err.message;\n        } finally {\n          _this3.loading = false;\n        }\n      })();\n    }\n\n  }\n};",null]}